
Sterowanie_silnikami.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005338  08005338  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000006c  080053ac  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080053ac  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe2a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208e  00000000  00000000  0002ff09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc1  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275ed  00000000  00000000  00033a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001131c  00000000  00000000  0005b056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4125  00000000  00000000  0006c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000472c  00000000  00000000  00160498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00164bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005240 	.word	0x08005240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005240 	.word	0x08005240

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b0d      	cmp	r3, #13
 800059a:	d003      	beq.n	80005a4 <line_append+0x18>
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	f040 80bc 	bne.w	800071c <line_append+0x190>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 80005a4:	4b67      	ldr	r3, [pc, #412]	; (8000744 <line_append+0x1b8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f000 80c7 	beq.w	800073c <line_append+0x1b0>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 80005ae:	4b65      	ldr	r3, [pc, #404]	; (8000744 <line_append+0x1b8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a65      	ldr	r2, [pc, #404]	; (8000748 <line_append+0x1bc>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("Otrzymano: %s\n", line_buffer);
 80005b8:	4963      	ldr	r1, [pc, #396]	; (8000748 <line_append+0x1bc>)
 80005ba:	4864      	ldr	r0, [pc, #400]	; (800074c <line_append+0x1c0>)
 80005bc:	f003 ff70 	bl	80044a0 <iprintf>

			//kody: prawy/lewy/oba | przód/tyl | wypelnienie
			//          P/L/O      |    P/T    |    0-99
			// stop = stop

			if (strcmp(line_buffer, "wlacz") == 0) {
 80005c0:	4963      	ldr	r1, [pc, #396]	; (8000750 <line_append+0x1c4>)
 80005c2:	4861      	ldr	r0, [pc, #388]	; (8000748 <line_append+0x1bc>)
 80005c4:	f7ff fe04 	bl	80001d0 <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <line_append+0x50>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2120      	movs	r1, #32
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 f81b 	bl	8001610 <HAL_GPIO_WritePin>
 80005da:	e08c      	b.n	80006f6 <line_append+0x16a>
			}
			else if (strcmp(line_buffer, "wylacz") == 0) {
 80005dc:	495d      	ldr	r1, [pc, #372]	; (8000754 <line_append+0x1c8>)
 80005de:	485a      	ldr	r0, [pc, #360]	; (8000748 <line_append+0x1bc>)
 80005e0:	f7ff fdf6 	bl	80001d0 <strcmp>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d106      	bne.n	80005f8 <line_append+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 f80d 	bl	8001610 <HAL_GPIO_WritePin>
 80005f6:	e07e      	b.n	80006f6 <line_append+0x16a>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 1 = przod
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
				HAL_TIM_Base_Start_IT(&htim4);
				HAL_TIM_Base_Start_IT(&htim6);
			} */
			else if (line_buffer[0]=='O'&&line_buffer[1]=='P'){ //OP
 80005f8:	4b53      	ldr	r3, [pc, #332]	; (8000748 <line_append+0x1bc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b4f      	cmp	r3, #79	; 0x4f
 80005fe:	d117      	bne.n	8000630 <line_append+0xa4>
 8000600:	4b51      	ldr	r3, [pc, #324]	; (8000748 <line_append+0x1bc>)
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	2b50      	cmp	r3, #80	; 0x50
 8000606:	d113      	bne.n	8000630 <line_append+0xa4>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 1 = przod
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 fffd 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	484e      	ldr	r0, [pc, #312]	; (8000758 <line_append+0x1cc>)
 800061e:	f000 fff7 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 8000622:	484e      	ldr	r0, [pc, #312]	; (800075c <line_append+0x1d0>)
 8000624:	f002 fb9e 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 8000628:	484d      	ldr	r0, [pc, #308]	; (8000760 <line_append+0x1d4>)
 800062a:	f002 fb9b 	bl	8002d64 <HAL_TIM_Base_Start_IT>
 800062e:	e062      	b.n	80006f6 <line_append+0x16a>
			}
			else if (strcmp(line_buffer, "OT") == 0){
 8000630:	494c      	ldr	r1, [pc, #304]	; (8000764 <line_append+0x1d8>)
 8000632:	4845      	ldr	r0, [pc, #276]	; (8000748 <line_append+0x1bc>)
 8000634:	f7ff fdcc 	bl	80001d0 <strcmp>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d113      	bne.n	8000666 <line_append+0xda>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 1 = przod
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 ffe2 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	4841      	ldr	r0, [pc, #260]	; (8000758 <line_append+0x1cc>)
 8000654:	f000 ffdc 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 8000658:	4840      	ldr	r0, [pc, #256]	; (800075c <line_append+0x1d0>)
 800065a:	f002 fb83 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 800065e:	4840      	ldr	r0, [pc, #256]	; (8000760 <line_append+0x1d4>)
 8000660:	f002 fb80 	bl	8002d64 <HAL_TIM_Base_Start_IT>
 8000664:	e047      	b.n	80006f6 <line_append+0x16a>
			}
			else if (strcmp(line_buffer, "stop") == 0){
 8000666:	4940      	ldr	r1, [pc, #256]	; (8000768 <line_append+0x1dc>)
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <line_append+0x1bc>)
 800066a:	f7ff fdb1 	bl	80001d0 <strcmp>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <line_append+0xf6>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000674:	4839      	ldr	r0, [pc, #228]	; (800075c <line_append+0x1d0>)
 8000676:	f002 fbe5 	bl	8002e44 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 800067a:	4839      	ldr	r0, [pc, #228]	; (8000760 <line_append+0x1d4>)
 800067c:	f002 fbe2 	bl	8002e44 <HAL_TIM_Base_Stop_IT>
 8000680:	e039      	b.n	80006f6 <line_append+0x16a>
			}
			else if (strcmp(line_buffer, "PP") == 0){
 8000682:	493a      	ldr	r1, [pc, #232]	; (800076c <line_append+0x1e0>)
 8000684:	4830      	ldr	r0, [pc, #192]	; (8000748 <line_append+0x1bc>)
 8000686:	f7ff fda3 	bl	80001d0 <strcmp>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d113      	bne.n	80006b8 <line_append+0x12c>
				HAL_TIM_Base_Start_IT(&htim4);
 8000690:	4832      	ldr	r0, [pc, #200]	; (800075c <line_append+0x1d0>)
 8000692:	f002 fb67 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <line_append+0x1cc>)
 800069e:	f000 ffb7 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 80006a2:	482f      	ldr	r0, [pc, #188]	; (8000760 <line_append+0x1d4>)
 80006a4:	f002 fb5e 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 0 = tyl
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f000 ffad 	bl	8001610 <HAL_GPIO_WritePin>
 80006b6:	e01e      	b.n	80006f6 <line_append+0x16a>
			}
			else if (strcmp(line_buffer, "LP") == 0){
 80006b8:	492d      	ldr	r1, [pc, #180]	; (8000770 <line_append+0x1e4>)
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <line_append+0x1bc>)
 80006bc:	f7ff fd88 	bl	80001d0 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d113      	bne.n	80006ee <line_append+0x162>
				HAL_TIM_Base_Start_IT(&htim4);
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <line_append+0x1d0>)
 80006c8:	f002 fb4c 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4821      	ldr	r0, [pc, #132]	; (8000758 <line_append+0x1cc>)
 80006d4:	f000 ff9c 	bl	8001610 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 80006d8:	4821      	ldr	r0, [pc, #132]	; (8000760 <line_append+0x1d4>)
 80006da:	f002 fb43 	bl	8002d64 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 0 = tyl
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f000 ff92 	bl	8001610 <HAL_GPIO_WritePin>
 80006ec:	e003      	b.n	80006f6 <line_append+0x16a>


			} //*/
			else {
				printf("Nieznane polecenie: %s\n", line_buffer);
 80006ee:	4916      	ldr	r1, [pc, #88]	; (8000748 <line_append+0x1bc>)
 80006f0:	4820      	ldr	r0, [pc, #128]	; (8000774 <line_append+0x1e8>)
 80006f2:	f003 fed5 	bl	80044a0 <iprintf>
			}

			wypelnienie_uart = (int)(line_buffer[2] - '0')*10 + (int)(line_buffer[3] - '0');
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <line_append+0x1bc>)
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80006fe:	4613      	mov	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	461a      	mov	r2, r3
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <line_append+0x1bc>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	3b30      	subs	r3, #48	; 0x30
 800070e:	4413      	add	r3, r2
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <line_append+0x1ec>)
 8000712:	6013      	str	r3, [r2, #0]


			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <line_append+0x1b8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 800071a:	e00f      	b.n	800073c <line_append+0x1b0>

		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <line_append+0x1b8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b4f      	cmp	r3, #79	; 0x4f
 8000722:	d902      	bls.n	800072a <line_append+0x19e>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <line_append+0x1b8>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <line_append+0x1b8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <line_append+0x1b8>)
 8000732:	600a      	str	r2, [r1, #0]
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <line_append+0x1bc>)
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	54ca      	strb	r2, [r1, r3]
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200001fc 	.word	0x200001fc
 8000748:	200001a8 	.word	0x200001a8
 800074c:	08005258 	.word	0x08005258
 8000750:	08005268 	.word	0x08005268
 8000754:	08005270 	.word	0x08005270
 8000758:	48000800 	.word	0x48000800
 800075c:	20000088 	.word	0x20000088
 8000760:	200000d4 	.word	0x200000d4
 8000764:	08005278 	.word	0x08005278
 8000768:	0800527c 	.word	0x0800527c
 800076c:	08005284 	.word	0x08005284
 8000770:	08005288 	.word	0x08005288
 8000774:	0800528c 	.word	0x0800528c
 8000778:	20000000 	.word	0x20000000

0800077c <__io_putchar>:


/////////////////////////////////////////////////  send
int __io_putchar(int ch)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	d109      	bne.n	800079e <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 800078a:	230d      	movs	r3, #13
 800078c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800078e:	f107 010f 	add.w	r1, r7, #15
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2201      	movs	r2, #1
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <__io_putchar+0x3c>)
 800079a:	f002 ff9d 	bl	80036d8 <HAL_UART_Transmit>
	}

	  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800079e:	1d39      	adds	r1, r7, #4
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	2201      	movs	r2, #1
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <__io_putchar+0x3c>)
 80007a8:	f002 ff96 	bl	80036d8 <HAL_UART_Transmit>
	  return 1;
 80007ac:	2301      	movs	r3, #1
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000120 	.word	0x20000120

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fbc9 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f831 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f935 	bl	8000a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ce:	f000 f903 	bl	80009d8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80007d2:	f000 f87d 	bl	80008d0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80007d6:	f000 f8c9 	bl	800096c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  int i;

  for (i = 0; i < 10; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e00a      	b.n	80007f6 <main+0x3a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 ff2b 	bl	8001640 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fc30 	bl	8001050 <HAL_Delay>
  for (i = 0; i < 10; i++) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b09      	cmp	r3, #9
 80007fa:	ddf1      	ble.n	80007e0 <main+0x24>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello World!\n");
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <main+0x68>)
 80007fe:	f003 feb5 	bl	800456c <puts>
  while (1)
  {

	  uint8_t test;
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK) {
 8000802:	1cb9      	adds	r1, r7, #2
 8000804:	2300      	movs	r3, #0
 8000806:	2201      	movs	r2, #1
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <main+0x6c>)
 800080a:	f002 ffef 	bl	80037ec <HAL_UART_Receive>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f6      	bne.n	8000802 <main+0x46>
		  line_append(value);
 8000814:	78bb      	ldrb	r3, [r7, #2]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff feb8 	bl	800058c <line_append>
		  test = value;
 800081c:	78bb      	ldrb	r3, [r7, #2]
 800081e:	70fb      	strb	r3, [r7, #3]
  {
 8000820:	e7ef      	b.n	8000802 <main+0x46>
 8000822:	bf00      	nop
 8000824:	080052a4 	.word	0x080052a4
 8000828:	20000120 	.word	0x20000120

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	; 0x58
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2244      	movs	r2, #68	; 0x44
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 ff76 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000852:	f000 ff1d 	bl	8001690 <HAL_PWREx_ControlVoltageScaling>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800085c:	f000 f996 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	2302      	movs	r3, #2
 8000874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800087a:	230a      	movs	r3, #10
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f000 ff54 	bl	800173c <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800089a:	f000 f977 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fb1c 	bl	8001ef4 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c2:	f000 f963 	bl	8000b8c <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3758      	adds	r7, #88	; 0x58
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_TIM4_Init+0x94>)
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <MX_TIM4_Init+0x98>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_TIM4_Init+0x94>)
 80008f6:	22c7      	movs	r2, #199	; 0xc7
 80008f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_TIM4_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_TIM4_Init+0x94>)
 8000902:	2263      	movs	r2, #99	; 0x63
 8000904:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_TIM4_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_TIM4_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_TIM4_Init+0x94>)
 8000914:	f002 f9ce 	bl	8002cb4 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f935 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_TIM4_Init+0x94>)
 8000930:	f002 fbb9 	bl	80030a6 <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f927 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM4_Init+0x94>)
 800094c:	f002 fdd0 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000956:	f000 f919 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000088 	.word	0x20000088
 8000968:	40000800 	.word	0x40000800

0800096c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_TIM6_Init+0x64>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_TIM6_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000984:	22c7      	movs	r2, #199	; 0xc7
 8000986:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_TIM6_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000990:	2263      	movs	r2, #99	; 0x63
 8000992:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_TIM6_Init+0x64>)
 800099c:	f002 f98a 	bl	8002cb4 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009a6:	f000 f8f1 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_TIM6_Init+0x64>)
 80009b8:	f002 fd9a 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009c2:	f000 f8e3 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000d4 	.word	0x200000d4
 80009d4:	40001000 	.word	0x40001000

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a1c:	f002 fe0e 	bl	800363c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8b1 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000120 	.word	0x20000120
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_GPIO_Init+0x10c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f649 0120 	movw	r1, #38944	; 0x9820
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fdaa 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <MX_GPIO_Init+0x110>)
 8000ac4:	f000 fda4 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ace:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	481a      	ldr	r0, [pc, #104]	; (8000b48 <MX_GPIO_Init+0x110>)
 8000ae0:	f000 fbec 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_minus_Pin PUL_minus_Pin PUL2_minus_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin;
 8000ae4:	f649 0320 	movw	r3, #38944	; 0x9820
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f000 fbdc 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_L_Pin */
  GPIO_InitStruct.Pin = Button_L_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_L_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_GPIO_Init+0x110>)
 8000b1a:	f000 fbcf 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_minus_Pin */
  GPIO_InitStruct.Pin = DIR2_minus_Pin;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR2_minus_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_GPIO_Init+0x110>)
 8000b38:	f000 fbc0 	bl	80012bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000800 	.word	0x48000800

08000b4c <HAL_TIM_PeriodElapsedCallback>:
	//}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	if (htim == &htim6){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d105      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(PUL_minus_GPIO_Port, PUL_minus_Pin);
 8000b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fd6c 	bl	8001640 <HAL_GPIO_TogglePin>
	}

	if (htim == &htim4){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d105      	bne.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(PUL2_minus_GPIO_Port, PUL2_minus_Pin);
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 fd62 	bl	8001640 <HAL_GPIO_TogglePin>
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	20000088 	.word	0x20000088

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x44>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_TIM_Base_MspInit+0x78>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d114      	bne.n	8000c1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	201e      	movs	r0, #30
 8000c10:	f000 fb1d 	bl	800124e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c14:	201e      	movs	r0, #30
 8000c16:	f000 fb36 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c1a:	e018      	b.n	8000c4e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_TIM_Base_MspInit+0x80>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d113      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_TIM_Base_MspInit+0x7c>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2036      	movs	r0, #54	; 0x36
 8000c44:	f000 fb03 	bl	800124e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c48:	2036      	movs	r0, #54	; 0x36
 8000c4a:	f000 fb1c 	bl	8001286 <HAL_NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40000800 	.word	0x40000800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40001000 	.word	0x40001000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ac      	sub	sp, #176	; 0xb0
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2288      	movs	r2, #136	; 0x88
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fd51 	bl	800472c <memset>
  if(huart->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <HAL_UART_MspInit+0xb0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d13b      	bne.n	8000d0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fb4b 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff ff6e 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_UART_MspInit+0xb4>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fad8 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	37b0      	adds	r7, #176	; 0xb0
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f952 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM4_IRQHandler+0x10>)
 8000d76:	f002 f894 	bl	8002ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000088 	.word	0x20000088

08000d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM6_DAC_IRQHandler+0x10>)
 8000d8a:	f002 f88a 	bl	8002ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000d4 	.word	0x200000d4

08000d98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
  }

  return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fcc5 	bl	800077c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
  }
  return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f003 fc90 	bl	80047c8 <__errno>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20018000 	.word	0x20018000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	20000200 	.word	0x20000200
 8000edc:	20000358 	.word	0x20000358

08000ee0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f08:	f7ff ffea 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f003 fc4f 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f36:	f7ff fc41 	bl	80007bc <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f48:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 8000f4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f50:	20000354 	.word	0x20000354

08000f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_Init+0x3c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_Init+0x3c>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f962 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f80f 	bl	8000f98 <HAL_InitTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e001      	b.n	8000f8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f86:	f7ff fe07 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40022000 	.word	0x40022000

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_InitTick+0x6c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d023      	beq.n	8000ff4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x70>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f96d 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10f      	bne.n	8000fee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d809      	bhi.n	8000fe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f937 	bl	800124e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_InitTick+0x74>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e004      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e001      	b.n	8000ff8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000000c 	.word	0x2000000c
 8001008:	20000004 	.word	0x20000004
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000000c 	.word	0x2000000c
 8001034:	20000204 	.word	0x20000204

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000204 	.word	0x20000204

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000000c 	.word	0x2000000c

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <__NVIC_EnableIRQ+0x38>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff29 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff3e 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff8e 	bl	800118c <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5d 	bl	8001138 <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff31 	bl	80010fc <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa2 	bl	80011f4 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e17f      	b.n	80015cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8171 	beq.w	80015c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x40>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d130      	bne.n	800135e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	f003 0201 	and.w	r2, r3, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b03      	cmp	r3, #3
 8001368:	d118      	bne.n	800139c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	6939      	ldr	r1, [r7, #16]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80ac 	beq.w	80015c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_GPIO_Init+0x330>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <HAL_GPIO_Init+0x330>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6613      	str	r3, [r2, #96]	; 0x60
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_GPIO_Init+0x330>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x242>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <HAL_GPIO_Init+0x338>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x23e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_GPIO_Init+0x33c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x23a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4d      	ldr	r2, [pc, #308]	; (80015fc <HAL_GPIO_Init+0x340>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x236>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_GPIO_Init+0x344>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x232>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4b      	ldr	r2, [pc, #300]	; (8001604 <HAL_GPIO_Init+0x348>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x22e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <HAL_GPIO_Init+0x34c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x22a>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x244>
 80014fe:	2300      	movs	r3, #0
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001510:	4937      	ldr	r1, [pc, #220]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_GPIO_Init+0x350>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001542:	4a32      	ldr	r2, [pc, #200]	; (800160c <HAL_GPIO_Init+0x350>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <HAL_GPIO_Init+0x350>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800156c:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_GPIO_Init+0x350>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_GPIO_Init+0x350>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_GPIO_Init+0x350>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_GPIO_Init+0x350>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_GPIO_Init+0x350>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa22 f303 	lsr.w	r3, r2, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f47f ae78 	bne.w	80012cc <HAL_GPIO_Init+0x10>
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	48000400 	.word	0x48000400
 80015f8:	48000800 	.word	0x48000800
 80015fc:	48000c00 	.word	0x48000c00
 8001600:	48001000 	.word	0x48001000
 8001604:	48001400 	.word	0x48001400
 8001608:	48001800 	.word	0x48001800
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43d9      	mvns	r1, r3
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	400b      	ands	r3, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_PWREx_GetVoltageRange+0x18>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40007000 	.word	0x40007000

08001690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169e:	d130      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ac:	d038      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2232      	movs	r2, #50	; 0x32
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d4:	e002      	b.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e8:	d102      	bne.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f2      	bne.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fc:	d110      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e00f      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d007      	beq.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000
 8001734:	20000004 	.word	0x20000004
 8001738:	431bde83 	.word	0x431bde83

0800173c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e3ca      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4b97      	ldr	r3, [pc, #604]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001758:	4b94      	ldr	r3, [pc, #592]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80e4 	beq.w	8001938 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_RCC_OscConfig+0x4a>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	f040 808b 	bne.w	8001894 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 8087 	bne.w	8001894 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001786:	4b89      	ldr	r3, [pc, #548]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x62>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e3a2      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1a      	ldr	r2, [r3, #32]
 80017a2:	4b82      	ldr	r3, [pc, #520]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_RCC_OscConfig+0x7c>
 80017ae:	4b7f      	ldr	r3, [pc, #508]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_OscConfig+0x88>
 80017b8:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d223      	bcs.n	8001810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fd55 	bl	800227c <RCC_SetFlashLatencyFromMSIRange>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e383      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a72      	ldr	r2, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	496d      	ldr	r1, [pc, #436]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fa:	4b6c      	ldr	r3, [pc, #432]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4968      	ldr	r1, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
 800180e:	e025      	b.n	800185c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a65      	ldr	r2, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4960      	ldr	r1, [pc, #384]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	495b      	ldr	r1, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fd15 	bl	800227c <RCC_SetFlashLatencyFromMSIRange>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e343      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185c:	f000 fc4a 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	4950      	ldr	r1, [pc, #320]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0x278>)
 800187a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fb89 	bl	8000f98 <HAL_InitTick>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d052      	beq.n	8001936 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	e327      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d032      	beq.n	8001902 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a42      	ldr	r2, [pc, #264]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fbc6 	bl	8001038 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b0:	f7ff fbc2 	bl	8001038 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e310      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4931      	ldr	r1, [pc, #196]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	492c      	ldr	r1, [pc, #176]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	e01a      	b.n	8001938 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a29      	ldr	r2, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb93 	bl	8001038 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001916:	f7ff fb8f 	bl	8001038 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e2dd      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x1da>
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001936:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d074      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x21a>
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d10e      	bne.n	800196e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d10b      	bne.n	800196e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d064      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d160      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e2ba      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x24a>
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e026      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198e:	d115      	bne.n	80019bc <HAL_RCC_OscConfig+0x280>
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a02      	ldr	r2, [pc, #8]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	080052b4 	.word	0x080052b4
 80019b4:	20000004 	.word	0x20000004
 80019b8:	20000008 	.word	0x20000008
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b9d      	ldr	r3, [pc, #628]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9c      	ldr	r2, [pc, #624]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fb2c 	bl	8001038 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fb28 	bl	8001038 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e276      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2a8>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e262      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2d0>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d060      	beq.n	8001afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x310>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d116      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x328>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e23f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4973      	ldr	r1, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e040      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fad3 	bl	8001038 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff facf 	bl	8001038 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e21d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	495f      	ldr	r1, [pc, #380]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e018      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff faaf 	bl	8001038 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff faab 	bl	8001038 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1f9      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d03c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff fa8a 	bl	8001038 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fa86 	bl	8001038 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1d4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ef      	beq.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
 8001b48:	e01b      	b.n	8001b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fa6d 	bl	8001038 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa69 	bl	8001038 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1b7      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ef      	bne.n	8001b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d118      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa30 	bl	8001038 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff fa2c 	bl	8001038 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e17a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d8>
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c12:	e029      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d115      	bne.n	8001c48 <HAL_RCC_OscConfig+0x50c>
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	4b9c      	ldr	r3, [pc, #624]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	4a9b      	ldr	r2, [pc, #620]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c58:	4b98      	ldr	r3, [pc, #608]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a97      	ldr	r2, [pc, #604]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d016      	beq.n	8001c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f9e2 	bl	8001038 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f9de 	bl	8001038 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e12a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ed      	beq.n	8001c78 <HAL_RCC_OscConfig+0x53c>
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f9cb 	bl	8001038 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f9c7 	bl	8001038 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e113      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ed      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a79      	ldr	r2, [pc, #484]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80fe 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	f040 80d0 	bne.w	8001e90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf0:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d130      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d127      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d11f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d30:	2a07      	cmp	r2, #7
 8001d32:	bf14      	ite	ne
 8001d34:	2201      	movne	r2, #1
 8001d36:	2200      	moveq	r2, #0
 8001d38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d113      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d06e      	beq.n	8001e44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d069      	beq.n	8001e40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0ad      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d88:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d94:	f7ff f950 	bl	8001038 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f94c 	bl	8001038 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e09a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ddc:	0852      	lsrs	r2, r2, #1
 8001dde:	3a01      	subs	r2, #1
 8001de0:	0552      	lsls	r2, r2, #21
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de8:	0852      	lsrs	r2, r2, #1
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0652      	lsls	r2, r2, #25
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df4:	0912      	lsrs	r2, r2, #4
 8001df6:	0452      	lsls	r2, r2, #17
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	4930      	ldr	r1, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e00:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e18:	f7ff f90e 	bl	8001038 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f90a 	bl	8001038 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e058      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3e:	e050      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d148      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e68:	f7ff f8e6 	bl	8001038 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff f8e2 	bl	8001038 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e030      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x734>
 8001e8e:	e028      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d023      	beq.n	8001ede <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x780>)
 8001e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f8c9 	bl	8001038 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	e00c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff f8c5 	bl	8001038 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d905      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x7b0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ec      	bne.n	8001eaa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x7b0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4905      	ldr	r1, [pc, #20]	; (8001eec <HAL_RCC_OscConfig+0x7b0>)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x7b4>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e001      	b.n	8001ee2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	feeefffc 	.word	0xfeeefffc

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0e7      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b75      	ldr	r3, [pc, #468]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0207 	bic.w	r2, r3, #7
 8001f1e:	4970      	ldr	r1, [pc, #448]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0cf      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d010      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4b66      	ldr	r3, [pc, #408]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d908      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4960      	ldr	r1, [pc, #384]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04c      	beq.n	800200c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0a6      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f92:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e09a      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001faa:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e08e      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fba:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e086      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4943      	ldr	r1, [pc, #268]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f82c 	bl	8001038 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f828 	bl	8001038 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e06e      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d010      	beq.n	800203a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002024:	429a      	cmp	r2, r3
 8002026:	d208      	bcs.n	800203a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	492b      	ldr	r1, [pc, #172]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d210      	bcs.n	800206a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 0207 	bic.w	r2, r3, #7
 8002050:	4923      	ldr	r1, [pc, #140]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_ClockConfig+0x1ec>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e036      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4918      	ldr	r1, [pc, #96]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4910      	ldr	r1, [pc, #64]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020a8:	f000 f824 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	490b      	ldr	r1, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1f4>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1f8>)
 80020c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1fc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe ff63 	bl	8000f98 <HAL_InitTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020d6:	7afb      	ldrb	r3, [r7, #11]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	080052b4 	.word	0x080052b4
 80020ec:	20000004 	.word	0x20000004
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d121      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11e      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e005      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002158:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002164:	e00a      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d102      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_RCC_GetSysClockFreq+0x110>)
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e004      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d101      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_GetSysClockFreq+0x114>)
 800217a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d134      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0xa6>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d003      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002198:	e005      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_RCC_GetSysClockFreq+0x110>)
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x114>)
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e002      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	617b      	str	r3, [r7, #20]
      break;
 80021aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	3301      	adds	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	fb03 f202 	mul.w	r2, r3, r2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	0e5b      	lsrs	r3, r3, #25
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	3301      	adds	r3, #1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ec:	69bb      	ldr	r3, [r7, #24]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	080052cc 	.word	0x080052cc
 8002204:	00f42400 	.word	0x00f42400
 8002208:	007a1200 	.word	0x007a1200

0800220c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4904      	ldr	r1, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	080052c4 	.word	0x080052c4

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002254:	f7ff ffda 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0adb      	lsrs	r3, r3, #11
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080052c4 	.word	0x080052c4

0800227c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f9ee 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
 800229a:	e014      	b.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022b4:	f7ff f9de 	bl	8001674 <HAL_PWREx_GetVoltageRange>
 80022b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d10b      	bne.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d919      	bls.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2ba0      	cmp	r3, #160	; 0xa0
 80022d8:	d902      	bls.n	80022e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022da:	2302      	movs	r3, #2
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e013      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e0:	2301      	movs	r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e010      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d902      	bls.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022ec:	2303      	movs	r3, #3
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e00a      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d102      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e004      	b.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b70      	cmp	r3, #112	; 0x70
 8002302:	d101      	bne.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 0207 	bic.w	r2, r3, #7
 8002310:	4909      	ldr	r1, [pc, #36]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002348:	2300      	movs	r3, #0
 800234a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002354:	2b00      	cmp	r3, #0
 8002356:	d041      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002360:	d02a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002362:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002366:	d824      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236c:	d008      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800236e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002372:	d81e      	bhi.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237c:	d010      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800237e:	e018      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002380:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a85      	ldr	r2, [pc, #532]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800238c:	e015      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fabb 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800239e:	e00c      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3320      	adds	r3, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fba6 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b0:	e003      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	74fb      	strb	r3, [r7, #19]
      break;
 80023b6:	e000      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ce:	4973      	ldr	r1, [pc, #460]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d6:	e001      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d041      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f0:	d02a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023f6:	d824      	bhi.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023fc:	d008      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002402:	d81e      	bhi.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d010      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800240e:	e018      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a61      	ldr	r2, [pc, #388]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800241c:	e015      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa73 	bl	8002910 <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800242e:	e00c      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3320      	adds	r3, #32
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fb5e 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002440:	e003      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	74fb      	strb	r3, [r7, #19]
      break;
 8002446:	e000      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002450:	4b52      	ldr	r3, [pc, #328]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800245e:	494f      	ldr	r1, [pc, #316]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002466:	e001      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a0 	beq.w	80025ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024bc:	f7fe fdbc 	bl	8001038 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fe fdb8 	bl	8001038 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d902      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	74fb      	strb	r3, [r7, #19]
        break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ef      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d15c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	d019      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fd77 	bl	8001038 <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254c:	e00b      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fd73 	bl	8001038 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d902      	bls.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	74fb      	strb	r3, [r7, #19]
            break;
 8002564:	e006      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ec      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002592:	e009      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
 8002598:	e006      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a8:	7c7b      	ldrb	r3, [r7, #17]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b9e      	ldr	r3, [pc, #632]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	4a9d      	ldr	r2, [pc, #628]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c6:	4b98      	ldr	r3, [pc, #608]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 0203 	bic.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	4994      	ldr	r1, [pc, #592]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e8:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f023 020c 	bic.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	498c      	ldr	r1, [pc, #560]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800260a:	4b87      	ldr	r3, [pc, #540]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4983      	ldr	r1, [pc, #524]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	497b      	ldr	r1, [pc, #492]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265c:	4972      	ldr	r1, [pc, #456]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002670:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	496a      	ldr	r1, [pc, #424]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002692:	4b65      	ldr	r3, [pc, #404]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	4961      	ldr	r1, [pc, #388]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b4:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	4959      	ldr	r1, [pc, #356]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e4:	4950      	ldr	r1, [pc, #320]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	4948      	ldr	r1, [pc, #288]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271a:	4b43      	ldr	r3, [pc, #268]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	493f      	ldr	r1, [pc, #252]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275a:	d106      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002766:	60d3      	str	r3, [r2, #12]
 8002768:	e011      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002772:	d10c      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f8c8 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d028      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	491f      	ldr	r1, [pc, #124]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a1a      	ldr	r2, [pc, #104]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	60d3      	str	r3, [r2, #12]
 80027c6:	e011      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f899 	bl	8002910 <RCCEx_PLLSAI1_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d02b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002816:	d109      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a02      	ldr	r2, [pc, #8]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	60d3      	str	r3, [r2, #12]
 8002824:	e014      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f867 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02f      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286a:	4928      	ldr	r1, [pc, #160]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287a:	d10d      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	2102      	movs	r1, #2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f844 	bl	8002910 <RCCEx_PLLSAI1_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	74bb      	strb	r3, [r7, #18]
 8002896:	e011      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3320      	adds	r3, #32
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f925 	bl	8002af8 <RCCEx_PLLSAI2_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d6:	490d      	ldr	r1, [pc, #52]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fa:	4904      	ldr	r1, [pc, #16]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002902:	7cbb      	ldrb	r3, [r7, #18]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291e:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d10d      	bne.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
       ||
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002942:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
       ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d047      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e044      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d018      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x86>
 8002964:	2b03      	cmp	r3, #3
 8002966:	d825      	bhi.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <RCCEx_PLLSAI1_Config+0x62>
 800296c:	2b02      	cmp	r3, #2
 800296e:	d009      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x74>
 8002970:	e020      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002972:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002982:	e01a      	b.n	80029ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002984:	4b5b      	ldr	r3, [pc, #364]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e013      	b.n	80029be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002996:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b2:	e006      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e004      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	430b      	orrs	r3, r1
 80029e0:	4944      	ldr	r1, [pc, #272]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d17d      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe fb1e 	bl	8001038 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fe:	e009      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a00:	f7fe fb1a 	bl	8001038 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
        break;
 8002a12:	e005      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ef      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d160      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	0912      	lsrs	r2, r2, #4
 8002a44:	0452      	lsls	r2, r2, #17
 8002a46:	430a      	orrs	r2, r1
 8002a48:	492a      	ldr	r1, [pc, #168]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	610b      	str	r3, [r1, #16]
 8002a4e:	e027      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d112      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	0211      	lsls	r1, r2, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6912      	ldr	r2, [r2, #16]
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0552      	lsls	r2, r2, #21
 8002a72:	430a      	orrs	r2, r1
 8002a74:	491f      	ldr	r1, [pc, #124]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
 8002a7a:	e011      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	0211      	lsls	r1, r2, #8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6952      	ldr	r2, [r2, #20]
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0652      	lsls	r2, r2, #25
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4916      	ldr	r1, [pc, #88]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe fac4 	bl	8001038 <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ab4:	f7fe fac0 	bl	8001038 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac6:	e005      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000

08002af8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b12:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0203 	and.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10d      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
       ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d047      	beq.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e044      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d018      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0x86>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d825      	bhi.n	8002b9c <RCCEx_PLLSAI2_Config+0xa4>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d002      	beq.n	8002b5a <RCCEx_PLLSAI2_Config+0x62>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d009      	beq.n	8002b6c <RCCEx_PLLSAI2_Config+0x74>
 8002b58:	e020      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5a:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11d      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e01a      	b.n	8002ba2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e013      	b.n	8002ba6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9a:	e006      	b.n	8002baa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e004      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	4939      	ldr	r1, [pc, #228]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d167      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe fa2a 	bl	8001038 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be6:	e009      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be8:	f7fe fa26 	bl	8001038 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bfa:	e005      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ef      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d14a      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6892      	ldr	r2, [r2, #8]
 8002c24:	0211      	lsls	r1, r2, #8
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	0912      	lsrs	r2, r2, #4
 8002c2c:	0452      	lsls	r2, r2, #17
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	491f      	ldr	r1, [pc, #124]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	614b      	str	r3, [r1, #20]
 8002c36:	e011      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6912      	ldr	r2, [r2, #16]
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f9e6 	bl	8001038 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c70:	f7fe f9e2 	bl	8001038 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
          break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e049      	b.n	8002d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fd ff80 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 fac8 	bl	8003288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e04f      	b.n	8002e1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d018      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_TIM_Base_Start_IT+0x76>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d115      	bne.n	8002e06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d015      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0xb4>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df2:	d011      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e04:	e008      	b.n	8002e18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	00010007 	.word	0x00010007

08002e44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_TIM_Base_Stop_IT+0x48>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	f240 4344 	movw	r3, #1092	; 0x444
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_Base_Stop_IT+0x48>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01b      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0202 	mvn.w	r2, #2
 8002ed6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f9ad 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002ef2:	e005      	b.n	8002f00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f99f 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9b0 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01b      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0204 	mvn.w	r2, #4
 8002f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f987 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002f3e:	e005      	b.n	8002f4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f979 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f98a 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01b      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0208 	mvn.w	r2, #8
 8002f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f961 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002f8a:	e005      	b.n	8002f98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f953 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f964 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01b      	beq.n	8002fea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0210 	mvn.w	r2, #16
 8002fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f93b 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002fd6:	e005      	b.n	8002fe4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f92d 	bl	8003238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f93e 	bl	8003260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0201 	mvn.w	r2, #1
 8003006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fd fd9f 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 faf1 	bl	8003614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800304e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fae9 	bl	8003628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8fd 	bl	8003274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0220 	mvn.w	r2, #32
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fab1 	bl	8003600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_ConfigClockSource+0x1c>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0b6      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x18a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	d03e      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xd8>
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	f200 8087 	bhi.w	8003216 <HAL_TIM_ConfigClockSource+0x170>
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310c:	f000 8086 	beq.w	800321c <HAL_TIM_ConfigClockSource+0x176>
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d87f      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 8003116:	2b70      	cmp	r3, #112	; 0x70
 8003118:	d01a      	beq.n	8003150 <HAL_TIM_ConfigClockSource+0xaa>
 800311a:	2b70      	cmp	r3, #112	; 0x70
 800311c:	d87b      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d050      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x11e>
 8003122:	2b60      	cmp	r3, #96	; 0x60
 8003124:	d877      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 8003126:	2b50      	cmp	r3, #80	; 0x50
 8003128:	d03c      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0xfe>
 800312a:	2b50      	cmp	r3, #80	; 0x50
 800312c:	d873      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d058      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x13e>
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d86f      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 8003136:	2b30      	cmp	r3, #48	; 0x30
 8003138:	d064      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0x15e>
 800313a:	2b30      	cmp	r3, #48	; 0x30
 800313c:	d86b      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 800313e:	2b20      	cmp	r3, #32
 8003140:	d060      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0x15e>
 8003142:	2b20      	cmp	r3, #32
 8003144:	d867      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d05c      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0x15e>
 800314a:	2b10      	cmp	r3, #16
 800314c:	d05a      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0x15e>
 800314e:	e062      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003160:	f000 f9a6 	bl	80034b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003172:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
      break;
 800317c:	e04f      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800318e:	f000 f98f 	bl	80034b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a0:	609a      	str	r2, [r3, #8]
      break;
 80031a2:	e03c      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f903 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2150      	movs	r1, #80	; 0x50
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f95c 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 80031c2:	e02c      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d0:	461a      	mov	r2, r3
 80031d2:	f000 f922 	bl	800341a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2160      	movs	r1, #96	; 0x60
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f94c 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 80031e2:	e01c      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f0:	461a      	mov	r2, r3
 80031f2:	f000 f8e3 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f93c 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8003202:	e00c      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 f933 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8003214:	e003      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      break;
 800321a:	e000      	b.n	800321e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800321c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <TIM_Base_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0x114>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d01b      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <TIM_Base_SetConfig+0x118>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d017      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a29      	ldr	r2, [pc, #164]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00b      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d108      	bne.n	8003334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a10      	ldr	r2, [pc, #64]	; (800339c <TIM_Base_SetConfig+0x114>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00f      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <TIM_Base_SetConfig+0x124>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <TIM_Base_SetConfig+0x128>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <TIM_Base_SetConfig+0x12c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xf8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <TIM_Base_SetConfig+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 030a 	bic.w	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341a:	b480      	push	{r7}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 0307 	orr.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003504:	2302      	movs	r3, #2
 8003506:	e068      	b.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d018      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10c      	bne.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40013400 	.word	0x40013400
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40000c00 	.word	0x40000c00
 80035fc:	40014000 	.word	0x40014000

08003600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e040      	b.n	80036d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fb00 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fc34 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f979 	bl	8003980 <UART_SetConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01b      	b.n	80036d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fcb3 	bl	8004034 <UART_CheckIdleState>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d178      	bne.n	80037e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_UART_Transmit+0x24>
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e071      	b.n	80037e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2221      	movs	r2, #33	; 0x21
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800370e:	f7fd fc93 	bl	8001038 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372c:	d108      	bne.n	8003740 <HAL_UART_Transmit+0x68>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003748:	e030      	b.n	80037ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fd15 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e03c      	b.n	80037e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800377c:	b292      	uxth	r2, r2
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	3302      	adds	r3, #2
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e008      	b.n	800379a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	b292      	uxth	r2, r2
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1c8      	bne.n	800374a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	2140      	movs	r1, #64	; 0x40
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fcde 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e005      	b.n	80037e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003802:	2b20      	cmp	r3, #32
 8003804:	f040 80b6 	bne.w	8003974 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_UART_Receive+0x28>
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0ae      	b.n	8003976 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2222      	movs	r2, #34	; 0x22
 8003824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382e:	f7fd fc03 	bl	8001038 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d10e      	bne.n	800386c <HAL_UART_Receive+0x80>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_UART_Receive+0x76>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f240 12ff 	movw	r2, #511	; 0x1ff
 800385c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003860:	e02d      	b.n	80038be <HAL_UART_Receive+0xd2>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800386a:	e028      	b.n	80038be <HAL_UART_Receive+0xd2>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10d      	bne.n	8003890 <HAL_UART_Receive+0xa4>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_UART_Receive+0x9a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003884:	e01b      	b.n	80038be <HAL_UART_Receive+0xd2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	227f      	movs	r2, #127	; 0x7f
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800388e:	e016      	b.n	80038be <HAL_UART_Receive+0xd2>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003898:	d10d      	bne.n	80038b6 <HAL_UART_Receive+0xca>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_UART_Receive+0xc0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	227f      	movs	r2, #127	; 0x7f
 80038a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038aa:	e008      	b.n	80038be <HAL_UART_Receive+0xd2>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	223f      	movs	r2, #63	; 0x3f
 80038b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038b4:	e003      	b.n	80038be <HAL_UART_Receive+0xd2>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d108      	bne.n	80038e2 <HAL_UART_Receive+0xf6>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e003      	b.n	80038ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038ea:	e037      	b.n	800395c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	2120      	movs	r1, #32
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fc44 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e033      	b.n	8003976 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10c      	bne.n	800392e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800391a:	b29a      	uxth	r2, r3
 800391c:	8a7b      	ldrh	r3, [r7, #18]
 800391e:	4013      	ands	r3, r2
 8003920:	b29a      	uxth	r2, r3
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3302      	adds	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e00d      	b.n	800394a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003934:	b29b      	uxth	r3, r3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4013      	ands	r3, r2
 800393e:	b2da      	uxtb	r2, r3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3301      	adds	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1c1      	bne.n	80038ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b08a      	sub	sp, #40	; 0x28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4ba4      	ldr	r3, [pc, #656]	; (8003c40 <UART_SetConfig+0x2c0>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a99      	ldr	r2, [pc, #612]	; (8003c44 <UART_SetConfig+0x2c4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	4313      	orrs	r3, r2
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a90      	ldr	r2, [pc, #576]	; (8003c48 <UART_SetConfig+0x2c8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d126      	bne.n	8003a58 <UART_SetConfig+0xd8>
 8003a0a:	4b90      	ldr	r3, [pc, #576]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d81b      	bhi.n	8003a50 <UART_SetConfig+0xd0>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0xa0>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a41 	.word	0x08003a41
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a49 	.word	0x08003a49
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e116      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e112      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003a40:	2304      	movs	r3, #4
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e10e      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003a48:	2308      	movs	r3, #8
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e10a      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003a50:	2310      	movs	r3, #16
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a56:	e106      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <UART_SetConfig+0x2d0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d138      	bne.n	8003ad4 <UART_SetConfig+0x154>
 8003a62:	4b7a      	ldr	r3, [pc, #488]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d82d      	bhi.n	8003acc <UART_SetConfig+0x14c>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0xf8>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003acd 	.word	0x08003acd
 8003a84:	08003acd 	.word	0x08003acd
 8003a88:	08003abd 	.word	0x08003abd
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003acd 	.word	0x08003acd
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	08003acd 	.word	0x08003acd
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ac5 	.word	0x08003ac5
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e0d8      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e0d4      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003abc:	2304      	movs	r3, #4
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e0d0      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e0cc      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003acc:	2310      	movs	r3, #16
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e0c8      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a5e      	ldr	r2, [pc, #376]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d125      	bne.n	8003b2a <UART_SetConfig+0x1aa>
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d016      	beq.n	8003b1a <UART_SetConfig+0x19a>
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	d818      	bhi.n	8003b22 <UART_SetConfig+0x1a2>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d00a      	beq.n	8003b0a <UART_SetConfig+0x18a>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d814      	bhi.n	8003b22 <UART_SetConfig+0x1a2>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <UART_SetConfig+0x182>
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d008      	beq.n	8003b12 <UART_SetConfig+0x192>
 8003b00:	e00f      	b.n	8003b22 <UART_SetConfig+0x1a2>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b08:	e0ad      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b10:	e0a9      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b12:	2304      	movs	r3, #4
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b18:	e0a5      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b20:	e0a1      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b22:	2310      	movs	r3, #16
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b28:	e09d      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <UART_SetConfig+0x2d8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d125      	bne.n	8003b80 <UART_SetConfig+0x200>
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b40:	d016      	beq.n	8003b70 <UART_SetConfig+0x1f0>
 8003b42:	2bc0      	cmp	r3, #192	; 0xc0
 8003b44:	d818      	bhi.n	8003b78 <UART_SetConfig+0x1f8>
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d00a      	beq.n	8003b60 <UART_SetConfig+0x1e0>
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d814      	bhi.n	8003b78 <UART_SetConfig+0x1f8>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <UART_SetConfig+0x1d8>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d008      	beq.n	8003b68 <UART_SetConfig+0x1e8>
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x1f8>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e082      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e07e      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e07a      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e076      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e072      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a35      	ldr	r2, [pc, #212]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d12a      	bne.n	8003be0 <UART_SetConfig+0x260>
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b98:	d01a      	beq.n	8003bd0 <UART_SetConfig+0x250>
 8003b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9e:	d81b      	bhi.n	8003bd8 <UART_SetConfig+0x258>
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d00c      	beq.n	8003bc0 <UART_SetConfig+0x240>
 8003ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003baa:	d815      	bhi.n	8003bd8 <UART_SetConfig+0x258>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <UART_SetConfig+0x238>
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb4:	d008      	beq.n	8003bc8 <UART_SetConfig+0x248>
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x258>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e052      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e04e      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e04a      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e046      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e042      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <UART_SetConfig+0x2c4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d13a      	bne.n	8003c60 <UART_SetConfig+0x2e0>
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf8:	d01a      	beq.n	8003c30 <UART_SetConfig+0x2b0>
 8003bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0x2b8>
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c04:	d00c      	beq.n	8003c20 <UART_SetConfig+0x2a0>
 8003c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0a:	d815      	bhi.n	8003c38 <UART_SetConfig+0x2b8>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <UART_SetConfig+0x298>
 8003c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c14:	d008      	beq.n	8003c28 <UART_SetConfig+0x2a8>
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x2b8>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e022      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e01e      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e01a      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e016      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e012      	b.n	8003c66 <UART_SetConfig+0x2e6>
 8003c40:	efff69f3 	.word	0xefff69f3
 8003c44:	40008000 	.word	0x40008000
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40004800 	.word	0x40004800
 8003c58:	40004c00 	.word	0x40004c00
 8003c5c:	40005000 	.word	0x40005000
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a9f      	ldr	r2, [pc, #636]	; (8003ee8 <UART_SetConfig+0x568>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d17a      	bne.n	8003d66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d824      	bhi.n	8003cc2 <UART_SetConfig+0x342>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x300>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cb3 	.word	0x08003cb3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cc3 	.word	0x08003cc3
 8003ca0:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fabe 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	61f8      	str	r0, [r7, #28]
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b8f      	ldr	r3, [pc, #572]	; (8003eec <UART_SetConfig+0x56c>)
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe fa1f 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8003cb6:	61f8      	str	r0, [r7, #28]
        break;
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e005      	b.n	8003cce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80fb 	beq.w	8003ecc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d305      	bcc.n	8003cf2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d903      	bls.n	8003cfa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cf8:	e0e8      	b.n	8003ecc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	461c      	mov	r4, r3
 8003d00:	4615      	mov	r5, r2
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	022b      	lsls	r3, r5, #8
 8003d0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d10:	0222      	lsls	r2, r4, #8
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	6849      	ldr	r1, [r1, #4]
 8003d16:	0849      	lsrs	r1, r1, #1
 8003d18:	2000      	movs	r0, #0
 8003d1a:	4688      	mov	r8, r1
 8003d1c:	4681      	mov	r9, r0
 8003d1e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d22:	eb43 0b09 	adc.w	fp, r3, r9
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d34:	4650      	mov	r0, sl
 8003d36:	4659      	mov	r1, fp
 8003d38:	f7fc faaa 	bl	8000290 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4a:	d308      	bcc.n	8003d5e <UART_SetConfig+0x3de>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d204      	bcs.n	8003d5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e0b6      	b.n	8003ecc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d64:	e0b2      	b.n	8003ecc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6e:	d15e      	bne.n	8003e2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d828      	bhi.n	8003dca <UART_SetConfig+0x44a>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x400>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fa3e 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003da8:	61f8      	str	r0, [r7, #28]
        break;
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fa50 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003db0:	61f8      	str	r0, [r7, #28]
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b4d      	ldr	r3, [pc, #308]	; (8003eec <UART_SetConfig+0x56c>)
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe f99b 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8003dbe:	61f8      	str	r0, [r7, #28]
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d077      	beq.n	8003ecc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005a      	lsls	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d916      	bls.n	8003e26 <UART_SetConfig+0x4a6>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d212      	bcs.n	8003e26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	8afb      	ldrh	r3, [r7, #22]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	8afa      	ldrh	r2, [r7, #22]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e052      	b.n	8003ecc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e2c:	e04e      	b.n	8003ecc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d827      	bhi.n	8003e86 <UART_SetConfig+0x506>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x4bc>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe f9e0 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
        break;
 8003e66:	e014      	b.n	8003e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe f9f2 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61f8      	str	r0, [r7, #28]
        break;
 8003e6e:	e010      	b.n	8003e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <UART_SetConfig+0x56c>)
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e00d      	b.n	8003e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fe f93d 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8003e7a:	61f8      	str	r0, [r7, #28]
        break;
 8003e7c:	e009      	b.n	8003e92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	61fb      	str	r3, [r7, #28]
        break;
 8003e84:	e005      	b.n	8003e92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e90:	bf00      	nop
    }

    if (pclk != 0U)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085a      	lsrs	r2, r3, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0f      	cmp	r3, #15
 8003eb0:	d909      	bls.n	8003ec6 <UART_SetConfig+0x546>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d205      	bcs.n	8003ec6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e002      	b.n	8003ecc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ed8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40008000 	.word	0x40008000
 8003eec:	00f42400 	.word	0x00f42400

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b098      	sub	sp, #96	; 0x60
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004044:	f7fc fff8 	bl	8001038 <HAL_GetTick>
 8004048:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d12e      	bne.n	80040b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f88c 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d021      	beq.n	80040b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	653b      	str	r3, [r7, #80]	; 0x50
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e6      	bne.n	8004072 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e062      	b.n	800417c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d149      	bne.n	8004158 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	2200      	movs	r2, #0
 80040ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f856 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03c      	beq.n	8004158 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	623b      	str	r3, [r7, #32]
   return(result);
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 80040fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e6      	bne.n	80040de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	617b      	str	r3, [r7, #20]
   return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e011      	b.n	800417c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3758      	adds	r7, #88	; 0x58
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	e049      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d045      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fc ff4b 	bl	8001038 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e048      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d031      	beq.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d110      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2208      	movs	r2, #8
 80041da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f838 	bl	8004252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2208      	movs	r2, #8
 80041e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e029      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d111      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f81e 	bl	8004252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e00f      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d0a6      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004252:	b480      	push	{r7}
 8004254:	b095      	sub	sp, #84	; 0x54
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
 800427a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800427e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3308      	adds	r3, #8
 8004292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	61fb      	str	r3, [r7, #28]
   return(result);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e5      	bne.n	800428c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d118      	bne.n	80042fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6979      	ldr	r1, [r7, #20]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	613b      	str	r3, [r7, #16]
   return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e6      	bne.n	80042c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800430e:	bf00      	nop
 8004310:	3754      	adds	r7, #84	; 0x54
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	e9c0 3300 	strd	r3, r3, [r0]
 8004326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432a:	6083      	str	r3, [r0, #8]
 800432c:	8181      	strh	r1, [r0, #12]
 800432e:	6643      	str	r3, [r0, #100]	; 0x64
 8004330:	81c2      	strh	r2, [r0, #14]
 8004332:	6183      	str	r3, [r0, #24]
 8004334:	4619      	mov	r1, r3
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	; 0x5c
 800433a:	f000 f9f7 	bl	800472c <memset>
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <std+0x58>)
 8004340:	6263      	str	r3, [r4, #36]	; 0x24
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <std+0x5c>)
 8004344:	62a3      	str	r3, [r4, #40]	; 0x28
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <std+0x60>)
 8004348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <std+0x64>)
 800434c:	6323      	str	r3, [r4, #48]	; 0x30
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <std+0x68>)
 8004350:	6224      	str	r4, [r4, #32]
 8004352:	429c      	cmp	r4, r3
 8004354:	d006      	beq.n	8004364 <std+0x48>
 8004356:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800435a:	4294      	cmp	r4, r2
 800435c:	d002      	beq.n	8004364 <std+0x48>
 800435e:	33d0      	adds	r3, #208	; 0xd0
 8004360:	429c      	cmp	r4, r3
 8004362:	d105      	bne.n	8004370 <std+0x54>
 8004364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f000 ba56 	b.w	800481c <__retarget_lock_init_recursive>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	0800457d 	.word	0x0800457d
 8004378:	0800459f 	.word	0x0800459f
 800437c:	080045d7 	.word	0x080045d7
 8004380:	080045fb 	.word	0x080045fb
 8004384:	20000208 	.word	0x20000208

08004388 <stdio_exit_handler>:
 8004388:	4a02      	ldr	r2, [pc, #8]	; (8004394 <stdio_exit_handler+0xc>)
 800438a:	4903      	ldr	r1, [pc, #12]	; (8004398 <stdio_exit_handler+0x10>)
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <stdio_exit_handler+0x14>)
 800438e:	f000 b869 	b.w	8004464 <_fwalk_sglue>
 8004392:	bf00      	nop
 8004394:	20000010 	.word	0x20000010
 8004398:	080050c9 	.word	0x080050c9
 800439c:	2000001c 	.word	0x2000001c

080043a0 <cleanup_stdio>:
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <cleanup_stdio+0x34>)
 80043a4:	4299      	cmp	r1, r3
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
 80043aa:	d001      	beq.n	80043b0 <cleanup_stdio+0x10>
 80043ac:	f000 fe8c 	bl	80050c8 <_fflush_r>
 80043b0:	68a1      	ldr	r1, [r4, #8]
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <cleanup_stdio+0x38>)
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <cleanup_stdio+0x1e>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fe85 	bl	80050c8 <_fflush_r>
 80043be:	68e1      	ldr	r1, [r4, #12]
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <cleanup_stdio+0x3c>)
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d004      	beq.n	80043d0 <cleanup_stdio+0x30>
 80043c6:	4620      	mov	r0, r4
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f000 be7c 	b.w	80050c8 <_fflush_r>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	20000208 	.word	0x20000208
 80043d8:	20000270 	.word	0x20000270
 80043dc:	200002d8 	.word	0x200002d8

080043e0 <global_stdio_init.part.0>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <global_stdio_init.part.0+0x30>)
 80043e4:	4c0b      	ldr	r4, [pc, #44]	; (8004414 <global_stdio_init.part.0+0x34>)
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <global_stdio_init.part.0+0x38>)
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	4620      	mov	r0, r4
 80043ec:	2200      	movs	r2, #0
 80043ee:	2104      	movs	r1, #4
 80043f0:	f7ff ff94 	bl	800431c <std>
 80043f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043f8:	2201      	movs	r2, #1
 80043fa:	2109      	movs	r1, #9
 80043fc:	f7ff ff8e 	bl	800431c <std>
 8004400:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004404:	2202      	movs	r2, #2
 8004406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440a:	2112      	movs	r1, #18
 800440c:	f7ff bf86 	b.w	800431c <std>
 8004410:	20000340 	.word	0x20000340
 8004414:	20000208 	.word	0x20000208
 8004418:	08004389 	.word	0x08004389

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 b9fe 	b.w	800481e <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20000349 	.word	0x20000349

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 b9f9 	b.w	8004820 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20000349 	.word	0x20000349

08004434 <__sinit>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	f7ff fff0 	bl	800441c <__sfp_lock_acquire>
 800443c:	6a23      	ldr	r3, [r4, #32]
 800443e:	b11b      	cbz	r3, 8004448 <__sinit+0x14>
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f7ff bff0 	b.w	8004428 <__sfp_lock_release>
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <__sinit+0x28>)
 800444a:	6223      	str	r3, [r4, #32]
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <__sinit+0x2c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f5      	bne.n	8004440 <__sinit+0xc>
 8004454:	f7ff ffc4 	bl	80043e0 <global_stdio_init.part.0>
 8004458:	e7f2      	b.n	8004440 <__sinit+0xc>
 800445a:	bf00      	nop
 800445c:	080043a1 	.word	0x080043a1
 8004460:	20000340 	.word	0x20000340

08004464 <_fwalk_sglue>:
 8004464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004468:	4607      	mov	r7, r0
 800446a:	4688      	mov	r8, r1
 800446c:	4614      	mov	r4, r2
 800446e:	2600      	movs	r6, #0
 8004470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004474:	f1b9 0901 	subs.w	r9, r9, #1
 8004478:	d505      	bpl.n	8004486 <_fwalk_sglue+0x22>
 800447a:	6824      	ldr	r4, [r4, #0]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d1f7      	bne.n	8004470 <_fwalk_sglue+0xc>
 8004480:	4630      	mov	r0, r6
 8004482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d907      	bls.n	800449c <_fwalk_sglue+0x38>
 800448c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004490:	3301      	adds	r3, #1
 8004492:	d003      	beq.n	800449c <_fwalk_sglue+0x38>
 8004494:	4629      	mov	r1, r5
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	4306      	orrs	r6, r0
 800449c:	3568      	adds	r5, #104	; 0x68
 800449e:	e7e9      	b.n	8004474 <_fwalk_sglue+0x10>

080044a0 <iprintf>:
 80044a0:	b40f      	push	{r0, r1, r2, r3}
 80044a2:	b507      	push	{r0, r1, r2, lr}
 80044a4:	4906      	ldr	r1, [pc, #24]	; (80044c0 <iprintf+0x20>)
 80044a6:	ab04      	add	r3, sp, #16
 80044a8:	6808      	ldr	r0, [r1, #0]
 80044aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ae:	6881      	ldr	r1, [r0, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f000 fad9 	bl	8004a68 <_vfiprintf_r>
 80044b6:	b003      	add	sp, #12
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	20000068 	.word	0x20000068

080044c4 <_puts_r>:
 80044c4:	6a03      	ldr	r3, [r0, #32]
 80044c6:	b570      	push	{r4, r5, r6, lr}
 80044c8:	6884      	ldr	r4, [r0, #8]
 80044ca:	4605      	mov	r5, r0
 80044cc:	460e      	mov	r6, r1
 80044ce:	b90b      	cbnz	r3, 80044d4 <_puts_r+0x10>
 80044d0:	f7ff ffb0 	bl	8004434 <__sinit>
 80044d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d6:	07db      	lsls	r3, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_puts_r+0x22>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_puts_r+0x22>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 f99c 	bl	800481e <__retarget_lock_acquire_recursive>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	0719      	lsls	r1, r3, #28
 80044ea:	d513      	bpl.n	8004514 <_puts_r+0x50>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	b18b      	cbz	r3, 8004514 <_puts_r+0x50>
 80044f0:	3e01      	subs	r6, #1
 80044f2:	68a3      	ldr	r3, [r4, #8]
 80044f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	b9e9      	cbnz	r1, 800453a <_puts_r+0x76>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da2e      	bge.n	8004560 <_puts_r+0x9c>
 8004502:	4622      	mov	r2, r4
 8004504:	210a      	movs	r1, #10
 8004506:	4628      	mov	r0, r5
 8004508:	f000 f87b 	bl	8004602 <__swbuf_r>
 800450c:	3001      	adds	r0, #1
 800450e:	d007      	beq.n	8004520 <_puts_r+0x5c>
 8004510:	250a      	movs	r5, #10
 8004512:	e007      	b.n	8004524 <_puts_r+0x60>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f8b0 	bl	800467c <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0e7      	beq.n	80044f0 <_puts_r+0x2c>
 8004520:	f04f 35ff 	mov.w	r5, #4294967295
 8004524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	d405      	bmi.n	8004536 <_puts_r+0x72>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	059b      	lsls	r3, r3, #22
 800452e:	d402      	bmi.n	8004536 <_puts_r+0x72>
 8004530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004532:	f000 f975 	bl	8004820 <__retarget_lock_release_recursive>
 8004536:	4628      	mov	r0, r5
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	2b00      	cmp	r3, #0
 800453c:	da04      	bge.n	8004548 <_puts_r+0x84>
 800453e:	69a2      	ldr	r2, [r4, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	dc06      	bgt.n	8004552 <_puts_r+0x8e>
 8004544:	290a      	cmp	r1, #10
 8004546:	d004      	beq.n	8004552 <_puts_r+0x8e>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	e7cf      	b.n	80044f2 <_puts_r+0x2e>
 8004552:	4622      	mov	r2, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f854 	bl	8004602 <__swbuf_r>
 800455a:	3001      	adds	r0, #1
 800455c:	d1c9      	bne.n	80044f2 <_puts_r+0x2e>
 800455e:	e7df      	b.n	8004520 <_puts_r+0x5c>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	250a      	movs	r5, #10
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701d      	strb	r5, [r3, #0]
 800456a:	e7db      	b.n	8004524 <_puts_r+0x60>

0800456c <puts>:
 800456c:	4b02      	ldr	r3, [pc, #8]	; (8004578 <puts+0xc>)
 800456e:	4601      	mov	r1, r0
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f7ff bfa7 	b.w	80044c4 <_puts_r>
 8004576:	bf00      	nop
 8004578:	20000068 	.word	0x20000068

0800457c <__sread>:
 800457c:	b510      	push	{r4, lr}
 800457e:	460c      	mov	r4, r1
 8004580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004584:	f000 f8fc 	bl	8004780 <_read_r>
 8004588:	2800      	cmp	r0, #0
 800458a:	bfab      	itete	ge
 800458c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800458e:	89a3      	ldrhlt	r3, [r4, #12]
 8004590:	181b      	addge	r3, r3, r0
 8004592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004596:	bfac      	ite	ge
 8004598:	6563      	strge	r3, [r4, #84]	; 0x54
 800459a:	81a3      	strhlt	r3, [r4, #12]
 800459c:	bd10      	pop	{r4, pc}

0800459e <__swrite>:
 800459e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	461f      	mov	r7, r3
 80045a4:	898b      	ldrh	r3, [r1, #12]
 80045a6:	05db      	lsls	r3, r3, #23
 80045a8:	4605      	mov	r5, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4616      	mov	r6, r2
 80045ae:	d505      	bpl.n	80045bc <__swrite+0x1e>
 80045b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b4:	2302      	movs	r3, #2
 80045b6:	2200      	movs	r2, #0
 80045b8:	f000 f8d0 	bl	800475c <_lseek_r>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	4632      	mov	r2, r6
 80045ca:	463b      	mov	r3, r7
 80045cc:	4628      	mov	r0, r5
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f000 b8e7 	b.w	80047a4 <_write_r>

080045d6 <__sseek>:
 80045d6:	b510      	push	{r4, lr}
 80045d8:	460c      	mov	r4, r1
 80045da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045de:	f000 f8bd 	bl	800475c <_lseek_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	bf15      	itete	ne
 80045e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80045ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045f2:	81a3      	strheq	r3, [r4, #12]
 80045f4:	bf18      	it	ne
 80045f6:	81a3      	strhne	r3, [r4, #12]
 80045f8:	bd10      	pop	{r4, pc}

080045fa <__sclose>:
 80045fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fe:	f000 b89d 	b.w	800473c <_close_r>

08004602 <__swbuf_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	460e      	mov	r6, r1
 8004606:	4614      	mov	r4, r2
 8004608:	4605      	mov	r5, r0
 800460a:	b118      	cbz	r0, 8004614 <__swbuf_r+0x12>
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	b90b      	cbnz	r3, 8004614 <__swbuf_r+0x12>
 8004610:	f7ff ff10 	bl	8004434 <__sinit>
 8004614:	69a3      	ldr	r3, [r4, #24]
 8004616:	60a3      	str	r3, [r4, #8]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	071a      	lsls	r2, r3, #28
 800461c:	d525      	bpl.n	800466a <__swbuf_r+0x68>
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	b31b      	cbz	r3, 800466a <__swbuf_r+0x68>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	1a98      	subs	r0, r3, r2
 8004628:	6963      	ldr	r3, [r4, #20]
 800462a:	b2f6      	uxtb	r6, r6
 800462c:	4283      	cmp	r3, r0
 800462e:	4637      	mov	r7, r6
 8004630:	dc04      	bgt.n	800463c <__swbuf_r+0x3a>
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f000 fd47 	bl	80050c8 <_fflush_r>
 800463a:	b9e0      	cbnz	r0, 8004676 <__swbuf_r+0x74>
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	701e      	strb	r6, [r3, #0]
 800464a:	6962      	ldr	r2, [r4, #20]
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	429a      	cmp	r2, r3
 8004650:	d004      	beq.n	800465c <__swbuf_r+0x5a>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	07db      	lsls	r3, r3, #31
 8004656:	d506      	bpl.n	8004666 <__swbuf_r+0x64>
 8004658:	2e0a      	cmp	r6, #10
 800465a:	d104      	bne.n	8004666 <__swbuf_r+0x64>
 800465c:	4621      	mov	r1, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f000 fd32 	bl	80050c8 <_fflush_r>
 8004664:	b938      	cbnz	r0, 8004676 <__swbuf_r+0x74>
 8004666:	4638      	mov	r0, r7
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f805 	bl	800467c <__swsetup_r>
 8004672:	2800      	cmp	r0, #0
 8004674:	d0d5      	beq.n	8004622 <__swbuf_r+0x20>
 8004676:	f04f 37ff 	mov.w	r7, #4294967295
 800467a:	e7f4      	b.n	8004666 <__swbuf_r+0x64>

0800467c <__swsetup_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <__swsetup_r+0xac>)
 8004680:	4605      	mov	r5, r0
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	460c      	mov	r4, r1
 8004686:	b118      	cbz	r0, 8004690 <__swsetup_r+0x14>
 8004688:	6a03      	ldr	r3, [r0, #32]
 800468a:	b90b      	cbnz	r3, 8004690 <__swsetup_r+0x14>
 800468c:	f7ff fed2 	bl	8004434 <__sinit>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004696:	0718      	lsls	r0, r3, #28
 8004698:	d422      	bmi.n	80046e0 <__swsetup_r+0x64>
 800469a:	06d9      	lsls	r1, r3, #27
 800469c:	d407      	bmi.n	80046ae <__swsetup_r+0x32>
 800469e:	2309      	movs	r3, #9
 80046a0:	602b      	str	r3, [r5, #0]
 80046a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e034      	b.n	8004718 <__swsetup_r+0x9c>
 80046ae:	0758      	lsls	r0, r3, #29
 80046b0:	d512      	bpl.n	80046d8 <__swsetup_r+0x5c>
 80046b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b4:	b141      	cbz	r1, 80046c8 <__swsetup_r+0x4c>
 80046b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ba:	4299      	cmp	r1, r3
 80046bc:	d002      	beq.n	80046c4 <__swsetup_r+0x48>
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 f8b0 	bl	8004824 <_free_r>
 80046c4:	2300      	movs	r3, #0
 80046c6:	6363      	str	r3, [r4, #52]	; 0x34
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	2300      	movs	r3, #0
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	f043 0308 	orr.w	r3, r3, #8
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	b94b      	cbnz	r3, 80046f8 <__swsetup_r+0x7c>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ee:	d003      	beq.n	80046f8 <__swsetup_r+0x7c>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 fd36 	bl	8005164 <__smakebuf_r>
 80046f8:	89a0      	ldrh	r0, [r4, #12]
 80046fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046fe:	f010 0301 	ands.w	r3, r0, #1
 8004702:	d00a      	beq.n	800471a <__swsetup_r+0x9e>
 8004704:	2300      	movs	r3, #0
 8004706:	60a3      	str	r3, [r4, #8]
 8004708:	6963      	ldr	r3, [r4, #20]
 800470a:	425b      	negs	r3, r3
 800470c:	61a3      	str	r3, [r4, #24]
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	b943      	cbnz	r3, 8004724 <__swsetup_r+0xa8>
 8004712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004716:	d1c4      	bne.n	80046a2 <__swsetup_r+0x26>
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	0781      	lsls	r1, r0, #30
 800471c:	bf58      	it	pl
 800471e:	6963      	ldrpl	r3, [r4, #20]
 8004720:	60a3      	str	r3, [r4, #8]
 8004722:	e7f4      	b.n	800470e <__swsetup_r+0x92>
 8004724:	2000      	movs	r0, #0
 8004726:	e7f7      	b.n	8004718 <__swsetup_r+0x9c>
 8004728:	20000068 	.word	0x20000068

0800472c <memset>:
 800472c:	4402      	add	r2, r0
 800472e:	4603      	mov	r3, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <_close_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	; (8004758 <_close_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f7fc fb5f 	bl	8000e0a <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_close_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_close_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000344 	.word	0x20000344

0800475c <_lseek_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	; (800477c <_lseek_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fc fb74 	bl	8000e58 <_lseek>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_lseek_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_lseek_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20000344 	.word	0x20000344

08004780 <_read_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_read_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fb02 	bl	8000d98 <_read>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_read_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_read_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000344 	.word	0x20000344

080047a4 <_write_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	; (80047c4 <_write_r+0x20>)
 80047a8:	4604      	mov	r4, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	602a      	str	r2, [r5, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fc fb0d 	bl	8000dd2 <_write>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_write_r+0x1e>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_write_r+0x1e>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000344 	.word	0x20000344

080047c8 <__errno>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <__errno+0x8>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000068 	.word	0x20000068

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2600      	movs	r6, #0
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	; (8004818 <__libc_init_array+0x44>)
 80047e8:	f000 fd2a 	bl	8005240 <_init>
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2600      	movs	r6, #0
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	4798      	blx	r3
 80047fe:	3601      	adds	r6, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	4798      	blx	r3
 8004808:	3601      	adds	r6, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	08005338 	.word	0x08005338
 8004810:	08005338 	.word	0x08005338
 8004814:	08005338 	.word	0x08005338
 8004818:	0800533c 	.word	0x0800533c

0800481c <__retarget_lock_init_recursive>:
 800481c:	4770      	bx	lr

0800481e <__retarget_lock_acquire_recursive>:
 800481e:	4770      	bx	lr

08004820 <__retarget_lock_release_recursive>:
 8004820:	4770      	bx	lr
	...

08004824 <_free_r>:
 8004824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004826:	2900      	cmp	r1, #0
 8004828:	d044      	beq.n	80048b4 <_free_r+0x90>
 800482a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800482e:	9001      	str	r0, [sp, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f1a1 0404 	sub.w	r4, r1, #4
 8004836:	bfb8      	it	lt
 8004838:	18e4      	addlt	r4, r4, r3
 800483a:	f000 f8df 	bl	80049fc <__malloc_lock>
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <_free_r+0x94>)
 8004840:	9801      	ldr	r0, [sp, #4]
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	b933      	cbnz	r3, 8004854 <_free_r+0x30>
 8004846:	6063      	str	r3, [r4, #4]
 8004848:	6014      	str	r4, [r2, #0]
 800484a:	b003      	add	sp, #12
 800484c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004850:	f000 b8da 	b.w	8004a08 <__malloc_unlock>
 8004854:	42a3      	cmp	r3, r4
 8004856:	d908      	bls.n	800486a <_free_r+0x46>
 8004858:	6825      	ldr	r5, [r4, #0]
 800485a:	1961      	adds	r1, r4, r5
 800485c:	428b      	cmp	r3, r1
 800485e:	bf01      	itttt	eq
 8004860:	6819      	ldreq	r1, [r3, #0]
 8004862:	685b      	ldreq	r3, [r3, #4]
 8004864:	1949      	addeq	r1, r1, r5
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	e7ed      	b.n	8004846 <_free_r+0x22>
 800486a:	461a      	mov	r2, r3
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b10b      	cbz	r3, 8004874 <_free_r+0x50>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d9fa      	bls.n	800486a <_free_r+0x46>
 8004874:	6811      	ldr	r1, [r2, #0]
 8004876:	1855      	adds	r5, r2, r1
 8004878:	42a5      	cmp	r5, r4
 800487a:	d10b      	bne.n	8004894 <_free_r+0x70>
 800487c:	6824      	ldr	r4, [r4, #0]
 800487e:	4421      	add	r1, r4
 8004880:	1854      	adds	r4, r2, r1
 8004882:	42a3      	cmp	r3, r4
 8004884:	6011      	str	r1, [r2, #0]
 8004886:	d1e0      	bne.n	800484a <_free_r+0x26>
 8004888:	681c      	ldr	r4, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	6053      	str	r3, [r2, #4]
 800488e:	440c      	add	r4, r1
 8004890:	6014      	str	r4, [r2, #0]
 8004892:	e7da      	b.n	800484a <_free_r+0x26>
 8004894:	d902      	bls.n	800489c <_free_r+0x78>
 8004896:	230c      	movs	r3, #12
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	e7d6      	b.n	800484a <_free_r+0x26>
 800489c:	6825      	ldr	r5, [r4, #0]
 800489e:	1961      	adds	r1, r4, r5
 80048a0:	428b      	cmp	r3, r1
 80048a2:	bf04      	itt	eq
 80048a4:	6819      	ldreq	r1, [r3, #0]
 80048a6:	685b      	ldreq	r3, [r3, #4]
 80048a8:	6063      	str	r3, [r4, #4]
 80048aa:	bf04      	itt	eq
 80048ac:	1949      	addeq	r1, r1, r5
 80048ae:	6021      	streq	r1, [r4, #0]
 80048b0:	6054      	str	r4, [r2, #4]
 80048b2:	e7ca      	b.n	800484a <_free_r+0x26>
 80048b4:	b003      	add	sp, #12
 80048b6:	bd30      	pop	{r4, r5, pc}
 80048b8:	2000034c 	.word	0x2000034c

080048bc <sbrk_aligned>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	4e0e      	ldr	r6, [pc, #56]	; (80048f8 <sbrk_aligned+0x3c>)
 80048c0:	460c      	mov	r4, r1
 80048c2:	6831      	ldr	r1, [r6, #0]
 80048c4:	4605      	mov	r5, r0
 80048c6:	b911      	cbnz	r1, 80048ce <sbrk_aligned+0x12>
 80048c8:	f000 fcaa 	bl	8005220 <_sbrk_r>
 80048cc:	6030      	str	r0, [r6, #0]
 80048ce:	4621      	mov	r1, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 fca5 	bl	8005220 <_sbrk_r>
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	d00a      	beq.n	80048f0 <sbrk_aligned+0x34>
 80048da:	1cc4      	adds	r4, r0, #3
 80048dc:	f024 0403 	bic.w	r4, r4, #3
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d007      	beq.n	80048f4 <sbrk_aligned+0x38>
 80048e4:	1a21      	subs	r1, r4, r0
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fc9a 	bl	8005220 <_sbrk_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d101      	bne.n	80048f4 <sbrk_aligned+0x38>
 80048f0:	f04f 34ff 	mov.w	r4, #4294967295
 80048f4:	4620      	mov	r0, r4
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	20000350 	.word	0x20000350

080048fc <_malloc_r>:
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	1ccd      	adds	r5, r1, #3
 8004902:	f025 0503 	bic.w	r5, r5, #3
 8004906:	3508      	adds	r5, #8
 8004908:	2d0c      	cmp	r5, #12
 800490a:	bf38      	it	cc
 800490c:	250c      	movcc	r5, #12
 800490e:	2d00      	cmp	r5, #0
 8004910:	4607      	mov	r7, r0
 8004912:	db01      	blt.n	8004918 <_malloc_r+0x1c>
 8004914:	42a9      	cmp	r1, r5
 8004916:	d905      	bls.n	8004924 <_malloc_r+0x28>
 8004918:	230c      	movs	r3, #12
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	2600      	movs	r6, #0
 800491e:	4630      	mov	r0, r6
 8004920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004924:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049f8 <_malloc_r+0xfc>
 8004928:	f000 f868 	bl	80049fc <__malloc_lock>
 800492c:	f8d8 3000 	ldr.w	r3, [r8]
 8004930:	461c      	mov	r4, r3
 8004932:	bb5c      	cbnz	r4, 800498c <_malloc_r+0x90>
 8004934:	4629      	mov	r1, r5
 8004936:	4638      	mov	r0, r7
 8004938:	f7ff ffc0 	bl	80048bc <sbrk_aligned>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	4604      	mov	r4, r0
 8004940:	d155      	bne.n	80049ee <_malloc_r+0xf2>
 8004942:	f8d8 4000 	ldr.w	r4, [r8]
 8004946:	4626      	mov	r6, r4
 8004948:	2e00      	cmp	r6, #0
 800494a:	d145      	bne.n	80049d8 <_malloc_r+0xdc>
 800494c:	2c00      	cmp	r4, #0
 800494e:	d048      	beq.n	80049e2 <_malloc_r+0xe6>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	4631      	mov	r1, r6
 8004954:	4638      	mov	r0, r7
 8004956:	eb04 0903 	add.w	r9, r4, r3
 800495a:	f000 fc61 	bl	8005220 <_sbrk_r>
 800495e:	4581      	cmp	r9, r0
 8004960:	d13f      	bne.n	80049e2 <_malloc_r+0xe6>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	1a6d      	subs	r5, r5, r1
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ffa7 	bl	80048bc <sbrk_aligned>
 800496e:	3001      	adds	r0, #1
 8004970:	d037      	beq.n	80049e2 <_malloc_r+0xe6>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	442b      	add	r3, r5
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	f8d8 3000 	ldr.w	r3, [r8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d038      	beq.n	80049f2 <_malloc_r+0xf6>
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	42a2      	cmp	r2, r4
 8004984:	d12b      	bne.n	80049de <_malloc_r+0xe2>
 8004986:	2200      	movs	r2, #0
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e00f      	b.n	80049ac <_malloc_r+0xb0>
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	1b52      	subs	r2, r2, r5
 8004990:	d41f      	bmi.n	80049d2 <_malloc_r+0xd6>
 8004992:	2a0b      	cmp	r2, #11
 8004994:	d917      	bls.n	80049c6 <_malloc_r+0xca>
 8004996:	1961      	adds	r1, r4, r5
 8004998:	42a3      	cmp	r3, r4
 800499a:	6025      	str	r5, [r4, #0]
 800499c:	bf18      	it	ne
 800499e:	6059      	strne	r1, [r3, #4]
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	bf08      	it	eq
 80049a4:	f8c8 1000 	streq.w	r1, [r8]
 80049a8:	5162      	str	r2, [r4, r5]
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	4638      	mov	r0, r7
 80049ae:	f104 060b 	add.w	r6, r4, #11
 80049b2:	f000 f829 	bl	8004a08 <__malloc_unlock>
 80049b6:	f026 0607 	bic.w	r6, r6, #7
 80049ba:	1d23      	adds	r3, r4, #4
 80049bc:	1af2      	subs	r2, r6, r3
 80049be:	d0ae      	beq.n	800491e <_malloc_r+0x22>
 80049c0:	1b9b      	subs	r3, r3, r6
 80049c2:	50a3      	str	r3, [r4, r2]
 80049c4:	e7ab      	b.n	800491e <_malloc_r+0x22>
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	6862      	ldr	r2, [r4, #4]
 80049ca:	d1dd      	bne.n	8004988 <_malloc_r+0x8c>
 80049cc:	f8c8 2000 	str.w	r2, [r8]
 80049d0:	e7ec      	b.n	80049ac <_malloc_r+0xb0>
 80049d2:	4623      	mov	r3, r4
 80049d4:	6864      	ldr	r4, [r4, #4]
 80049d6:	e7ac      	b.n	8004932 <_malloc_r+0x36>
 80049d8:	4634      	mov	r4, r6
 80049da:	6876      	ldr	r6, [r6, #4]
 80049dc:	e7b4      	b.n	8004948 <_malloc_r+0x4c>
 80049de:	4613      	mov	r3, r2
 80049e0:	e7cc      	b.n	800497c <_malloc_r+0x80>
 80049e2:	230c      	movs	r3, #12
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4638      	mov	r0, r7
 80049e8:	f000 f80e 	bl	8004a08 <__malloc_unlock>
 80049ec:	e797      	b.n	800491e <_malloc_r+0x22>
 80049ee:	6025      	str	r5, [r4, #0]
 80049f0:	e7dc      	b.n	80049ac <_malloc_r+0xb0>
 80049f2:	605b      	str	r3, [r3, #4]
 80049f4:	deff      	udf	#255	; 0xff
 80049f6:	bf00      	nop
 80049f8:	2000034c 	.word	0x2000034c

080049fc <__malloc_lock>:
 80049fc:	4801      	ldr	r0, [pc, #4]	; (8004a04 <__malloc_lock+0x8>)
 80049fe:	f7ff bf0e 	b.w	800481e <__retarget_lock_acquire_recursive>
 8004a02:	bf00      	nop
 8004a04:	20000348 	.word	0x20000348

08004a08 <__malloc_unlock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__malloc_unlock+0x8>)
 8004a0a:	f7ff bf09 	b.w	8004820 <__retarget_lock_release_recursive>
 8004a0e:	bf00      	nop
 8004a10:	20000348 	.word	0x20000348

08004a14 <__sfputc_r>:
 8004a14:	6893      	ldr	r3, [r2, #8]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	b410      	push	{r4}
 8004a1c:	6093      	str	r3, [r2, #8]
 8004a1e:	da08      	bge.n	8004a32 <__sfputc_r+0x1e>
 8004a20:	6994      	ldr	r4, [r2, #24]
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	db01      	blt.n	8004a2a <__sfputc_r+0x16>
 8004a26:	290a      	cmp	r1, #10
 8004a28:	d103      	bne.n	8004a32 <__sfputc_r+0x1e>
 8004a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2e:	f7ff bde8 	b.w	8004602 <__swbuf_r>
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	1c58      	adds	r0, r3, #1
 8004a36:	6010      	str	r0, [r2, #0]
 8004a38:	7019      	strb	r1, [r3, #0]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <__sfputs_r>:
 8004a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	18d5      	adds	r5, r2, r3
 8004a4c:	42ac      	cmp	r4, r5
 8004a4e:	d101      	bne.n	8004a54 <__sfputs_r+0x12>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e007      	b.n	8004a64 <__sfputs_r+0x22>
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	463a      	mov	r2, r7
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ffda 	bl	8004a14 <__sfputc_r>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1f3      	bne.n	8004a4c <__sfputs_r+0xa>
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a68 <_vfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	b09d      	sub	sp, #116	; 0x74
 8004a70:	4614      	mov	r4, r2
 8004a72:	4698      	mov	r8, r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	b118      	cbz	r0, 8004a80 <_vfiprintf_r+0x18>
 8004a78:	6a03      	ldr	r3, [r0, #32]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <_vfiprintf_r+0x18>
 8004a7c:	f7ff fcda 	bl	8004434 <__sinit>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x2a>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8e:	f7ff fec6 	bl	800481e <__retarget_lock_acquire_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	d501      	bpl.n	8004a9c <_vfiprintf_r+0x34>
 8004a98:	692b      	ldr	r3, [r5, #16]
 8004a9a:	b99b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x5c>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff fdec 	bl	800467c <__swsetup_r>
 8004aa4:	b170      	cbz	r0, 8004ac4 <_vfiprintf_r+0x5c>
 8004aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aa8:	07dc      	lsls	r4, r3, #31
 8004aaa:	d504      	bpl.n	8004ab6 <_vfiprintf_r+0x4e>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	b01d      	add	sp, #116	; 0x74
 8004ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	0598      	lsls	r0, r3, #22
 8004aba:	d4f7      	bmi.n	8004aac <_vfiprintf_r+0x44>
 8004abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004abe:	f7ff feaf 	bl	8004820 <__retarget_lock_release_recursive>
 8004ac2:	e7f3      	b.n	8004aac <_vfiprintf_r+0x44>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	2320      	movs	r3, #32
 8004aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad2:	2330      	movs	r3, #48	; 0x30
 8004ad4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c88 <_vfiprintf_r+0x220>
 8004ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004adc:	f04f 0901 	mov.w	r9, #1
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae8:	b10a      	cbz	r2, 8004aee <_vfiprintf_r+0x86>
 8004aea:	2a25      	cmp	r2, #37	; 0x25
 8004aec:	d1f9      	bne.n	8004ae2 <_vfiprintf_r+0x7a>
 8004aee:	ebba 0b04 	subs.w	fp, sl, r4
 8004af2:	d00b      	beq.n	8004b0c <_vfiprintf_r+0xa4>
 8004af4:	465b      	mov	r3, fp
 8004af6:	4622      	mov	r2, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ffa1 	bl	8004a42 <__sfputs_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f000 80a9 	beq.w	8004c58 <_vfiprintf_r+0x1f0>
 8004b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b08:	445a      	add	r2, fp
 8004b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a1 	beq.w	8004c58 <_vfiprintf_r+0x1f0>
 8004b16:	2300      	movs	r3, #0
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b20:	f10a 0a01 	add.w	sl, sl, #1
 8004b24:	9304      	str	r3, [sp, #16]
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b2e:	4654      	mov	r4, sl
 8004b30:	2205      	movs	r2, #5
 8004b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b36:	4854      	ldr	r0, [pc, #336]	; (8004c88 <_vfiprintf_r+0x220>)
 8004b38:	f7fb fb5a 	bl	80001f0 <memchr>
 8004b3c:	9a04      	ldr	r2, [sp, #16]
 8004b3e:	b9d8      	cbnz	r0, 8004b78 <_vfiprintf_r+0x110>
 8004b40:	06d1      	lsls	r1, r2, #27
 8004b42:	bf44      	itt	mi
 8004b44:	2320      	movmi	r3, #32
 8004b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4a:	0713      	lsls	r3, r2, #28
 8004b4c:	bf44      	itt	mi
 8004b4e:	232b      	movmi	r3, #43	; 0x2b
 8004b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b54:	f89a 3000 	ldrb.w	r3, [sl]
 8004b58:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5a:	d015      	beq.n	8004b88 <_vfiprintf_r+0x120>
 8004b5c:	9a07      	ldr	r2, [sp, #28]
 8004b5e:	4654      	mov	r4, sl
 8004b60:	2000      	movs	r0, #0
 8004b62:	f04f 0c0a 	mov.w	ip, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b6c:	3b30      	subs	r3, #48	; 0x30
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	d94d      	bls.n	8004c0e <_vfiprintf_r+0x1a6>
 8004b72:	b1b0      	cbz	r0, 8004ba2 <_vfiprintf_r+0x13a>
 8004b74:	9207      	str	r2, [sp, #28]
 8004b76:	e014      	b.n	8004ba2 <_vfiprintf_r+0x13a>
 8004b78:	eba0 0308 	sub.w	r3, r0, r8
 8004b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	46a2      	mov	sl, r4
 8004b86:	e7d2      	b.n	8004b2e <_vfiprintf_r+0xc6>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	1d19      	adds	r1, r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbb      	ittet	lt
 8004b94:	425b      	neglt	r3, r3
 8004b96:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9a:	9307      	strge	r3, [sp, #28]
 8004b9c:	9307      	strlt	r3, [sp, #28]
 8004b9e:	bfb8      	it	lt
 8004ba0:	9204      	strlt	r2, [sp, #16]
 8004ba2:	7823      	ldrb	r3, [r4, #0]
 8004ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba6:	d10c      	bne.n	8004bc2 <_vfiprintf_r+0x15a>
 8004ba8:	7863      	ldrb	r3, [r4, #1]
 8004baa:	2b2a      	cmp	r3, #42	; 0x2a
 8004bac:	d134      	bne.n	8004c18 <_vfiprintf_r+0x1b0>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9203      	str	r2, [sp, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bfb8      	it	lt
 8004bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bbe:	3402      	adds	r4, #2
 8004bc0:	9305      	str	r3, [sp, #20]
 8004bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c98 <_vfiprintf_r+0x230>
 8004bc6:	7821      	ldrb	r1, [r4, #0]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	4650      	mov	r0, sl
 8004bcc:	f7fb fb10 	bl	80001f0 <memchr>
 8004bd0:	b138      	cbz	r0, 8004be2 <_vfiprintf_r+0x17a>
 8004bd2:	9b04      	ldr	r3, [sp, #16]
 8004bd4:	eba0 000a 	sub.w	r0, r0, sl
 8004bd8:	2240      	movs	r2, #64	; 0x40
 8004bda:	4082      	lsls	r2, r0
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	3401      	adds	r4, #1
 8004be0:	9304      	str	r3, [sp, #16]
 8004be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be6:	4829      	ldr	r0, [pc, #164]	; (8004c8c <_vfiprintf_r+0x224>)
 8004be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bec:	2206      	movs	r2, #6
 8004bee:	f7fb faff 	bl	80001f0 <memchr>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d03f      	beq.n	8004c76 <_vfiprintf_r+0x20e>
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <_vfiprintf_r+0x228>)
 8004bf8:	bb1b      	cbnz	r3, 8004c42 <_vfiprintf_r+0x1da>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	3307      	adds	r3, #7
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	3308      	adds	r3, #8
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c08:	443b      	add	r3, r7
 8004c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0c:	e768      	b.n	8004ae0 <_vfiprintf_r+0x78>
 8004c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c12:	460c      	mov	r4, r1
 8004c14:	2001      	movs	r0, #1
 8004c16:	e7a6      	b.n	8004b66 <_vfiprintf_r+0xfe>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	3401      	adds	r4, #1
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f04f 0c0a 	mov.w	ip, #10
 8004c24:	4620      	mov	r0, r4
 8004c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c2a:	3a30      	subs	r2, #48	; 0x30
 8004c2c:	2a09      	cmp	r2, #9
 8004c2e:	d903      	bls.n	8004c38 <_vfiprintf_r+0x1d0>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0c6      	beq.n	8004bc2 <_vfiprintf_r+0x15a>
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	e7c4      	b.n	8004bc2 <_vfiprintf_r+0x15a>
 8004c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7f0      	b.n	8004c24 <_vfiprintf_r+0x1bc>
 8004c42:	ab03      	add	r3, sp, #12
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	462a      	mov	r2, r5
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <_vfiprintf_r+0x22c>)
 8004c4a:	a904      	add	r1, sp, #16
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f3af 8000 	nop.w
 8004c52:	4607      	mov	r7, r0
 8004c54:	1c78      	adds	r0, r7, #1
 8004c56:	d1d6      	bne.n	8004c06 <_vfiprintf_r+0x19e>
 8004c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c5a:	07d9      	lsls	r1, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_vfiprintf_r+0x202>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	059a      	lsls	r2, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_vfiprintf_r+0x202>
 8004c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c66:	f7ff fddb 	bl	8004820 <__retarget_lock_release_recursive>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	065b      	lsls	r3, r3, #25
 8004c6e:	f53f af1d 	bmi.w	8004aac <_vfiprintf_r+0x44>
 8004c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c74:	e71c      	b.n	8004ab0 <_vfiprintf_r+0x48>
 8004c76:	ab03      	add	r3, sp, #12
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <_vfiprintf_r+0x22c>)
 8004c7e:	a904      	add	r1, sp, #16
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f879 	bl	8004d78 <_printf_i>
 8004c86:	e7e4      	b.n	8004c52 <_vfiprintf_r+0x1ea>
 8004c88:	080052fc 	.word	0x080052fc
 8004c8c:	08005306 	.word	0x08005306
 8004c90:	00000000 	.word	0x00000000
 8004c94:	08004a43 	.word	0x08004a43
 8004c98:	08005302 	.word	0x08005302

08004c9c <_printf_common>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	688a      	ldr	r2, [r1, #8]
 8004ca6:	690b      	ldr	r3, [r1, #16]
 8004ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bfb8      	it	lt
 8004cb0:	4613      	movlt	r3, r2
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cb8:	4607      	mov	r7, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	b10a      	cbz	r2, 8004cc2 <_printf_common+0x26>
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	0699      	lsls	r1, r3, #26
 8004cc6:	bf42      	ittt	mi
 8004cc8:	6833      	ldrmi	r3, [r6, #0]
 8004cca:	3302      	addmi	r3, #2
 8004ccc:	6033      	strmi	r3, [r6, #0]
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	f015 0506 	ands.w	r5, r5, #6
 8004cd4:	d106      	bne.n	8004ce4 <_printf_common+0x48>
 8004cd6:	f104 0a19 	add.w	sl, r4, #25
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	6832      	ldr	r2, [r6, #0]
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	dc26      	bgt.n	8004d32 <_printf_common+0x96>
 8004ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ce8:	1e13      	subs	r3, r2, #0
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	bf18      	it	ne
 8004cee:	2301      	movne	r3, #1
 8004cf0:	0692      	lsls	r2, r2, #26
 8004cf2:	d42b      	bmi.n	8004d4c <_printf_common+0xb0>
 8004cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	47c0      	blx	r8
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d01e      	beq.n	8004d40 <_printf_common+0xa4>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	6922      	ldr	r2, [r4, #16]
 8004d06:	f003 0306 	and.w	r3, r3, #6
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	bf02      	ittt	eq
 8004d0e:	68e5      	ldreq	r5, [r4, #12]
 8004d10:	6833      	ldreq	r3, [r6, #0]
 8004d12:	1aed      	subeq	r5, r5, r3
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	bf0c      	ite	eq
 8004d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d1c:	2500      	movne	r5, #0
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bfc4      	itt	gt
 8004d22:	1a9b      	subgt	r3, r3, r2
 8004d24:	18ed      	addgt	r5, r5, r3
 8004d26:	2600      	movs	r6, #0
 8004d28:	341a      	adds	r4, #26
 8004d2a:	42b5      	cmp	r5, r6
 8004d2c:	d11a      	bne.n	8004d64 <_printf_common+0xc8>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e008      	b.n	8004d44 <_printf_common+0xa8>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4649      	mov	r1, r9
 8004d38:	4638      	mov	r0, r7
 8004d3a:	47c0      	blx	r8
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d103      	bne.n	8004d48 <_printf_common+0xac>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d48:	3501      	adds	r5, #1
 8004d4a:	e7c6      	b.n	8004cda <_printf_common+0x3e>
 8004d4c:	18e1      	adds	r1, r4, r3
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	2030      	movs	r0, #48	; 0x30
 8004d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d56:	4422      	add	r2, r4
 8004d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d60:	3302      	adds	r3, #2
 8004d62:	e7c7      	b.n	8004cf4 <_printf_common+0x58>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4622      	mov	r2, r4
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d0e6      	beq.n	8004d40 <_printf_common+0xa4>
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7d9      	b.n	8004d2a <_printf_common+0x8e>
	...

08004d78 <_printf_i>:
 8004d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	7e0f      	ldrb	r7, [r1, #24]
 8004d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d80:	2f78      	cmp	r7, #120	; 0x78
 8004d82:	4691      	mov	r9, r2
 8004d84:	4680      	mov	r8, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	469a      	mov	sl, r3
 8004d8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d8e:	d807      	bhi.n	8004da0 <_printf_i+0x28>
 8004d90:	2f62      	cmp	r7, #98	; 0x62
 8004d92:	d80a      	bhi.n	8004daa <_printf_i+0x32>
 8004d94:	2f00      	cmp	r7, #0
 8004d96:	f000 80d4 	beq.w	8004f42 <_printf_i+0x1ca>
 8004d9a:	2f58      	cmp	r7, #88	; 0x58
 8004d9c:	f000 80c0 	beq.w	8004f20 <_printf_i+0x1a8>
 8004da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da8:	e03a      	b.n	8004e20 <_printf_i+0xa8>
 8004daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dae:	2b15      	cmp	r3, #21
 8004db0:	d8f6      	bhi.n	8004da0 <_printf_i+0x28>
 8004db2:	a101      	add	r1, pc, #4	; (adr r1, 8004db8 <_printf_i+0x40>)
 8004db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e25 	.word	0x08004e25
 8004dc0:	08004da1 	.word	0x08004da1
 8004dc4:	08004da1 	.word	0x08004da1
 8004dc8:	08004da1 	.word	0x08004da1
 8004dcc:	08004da1 	.word	0x08004da1
 8004dd0:	08004e25 	.word	0x08004e25
 8004dd4:	08004da1 	.word	0x08004da1
 8004dd8:	08004da1 	.word	0x08004da1
 8004ddc:	08004da1 	.word	0x08004da1
 8004de0:	08004da1 	.word	0x08004da1
 8004de4:	08004f29 	.word	0x08004f29
 8004de8:	08004e51 	.word	0x08004e51
 8004dec:	08004ee3 	.word	0x08004ee3
 8004df0:	08004da1 	.word	0x08004da1
 8004df4:	08004da1 	.word	0x08004da1
 8004df8:	08004f4b 	.word	0x08004f4b
 8004dfc:	08004da1 	.word	0x08004da1
 8004e00:	08004e51 	.word	0x08004e51
 8004e04:	08004da1 	.word	0x08004da1
 8004e08:	08004da1 	.word	0x08004da1
 8004e0c:	08004eeb 	.word	0x08004eeb
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e20:	2301      	movs	r3, #1
 8004e22:	e09f      	b.n	8004f64 <_printf_i+0x1ec>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	0607      	lsls	r7, r0, #24
 8004e2a:	f103 0104 	add.w	r1, r3, #4
 8004e2e:	6029      	str	r1, [r5, #0]
 8004e30:	d501      	bpl.n	8004e36 <_printf_i+0xbe>
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	e003      	b.n	8004e3e <_printf_i+0xc6>
 8004e36:	0646      	lsls	r6, r0, #25
 8004e38:	d5fb      	bpl.n	8004e32 <_printf_i+0xba>
 8004e3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	da03      	bge.n	8004e4a <_printf_i+0xd2>
 8004e42:	232d      	movs	r3, #45	; 0x2d
 8004e44:	4276      	negs	r6, r6
 8004e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4a:	485a      	ldr	r0, [pc, #360]	; (8004fb4 <_printf_i+0x23c>)
 8004e4c:	230a      	movs	r3, #10
 8004e4e:	e012      	b.n	8004e76 <_printf_i+0xfe>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	1d19      	adds	r1, r3, #4
 8004e56:	6029      	str	r1, [r5, #0]
 8004e58:	0605      	lsls	r5, r0, #24
 8004e5a:	d501      	bpl.n	8004e60 <_printf_i+0xe8>
 8004e5c:	681e      	ldr	r6, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <_printf_i+0xee>
 8004e60:	0641      	lsls	r1, r0, #25
 8004e62:	d5fb      	bpl.n	8004e5c <_printf_i+0xe4>
 8004e64:	881e      	ldrh	r6, [r3, #0]
 8004e66:	4853      	ldr	r0, [pc, #332]	; (8004fb4 <_printf_i+0x23c>)
 8004e68:	2f6f      	cmp	r7, #111	; 0x6f
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2308      	moveq	r3, #8
 8004e6e:	230a      	movne	r3, #10
 8004e70:	2100      	movs	r1, #0
 8004e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e76:	6865      	ldr	r5, [r4, #4]
 8004e78:	60a5      	str	r5, [r4, #8]
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	bfa2      	ittt	ge
 8004e7e:	6821      	ldrge	r1, [r4, #0]
 8004e80:	f021 0104 	bicge.w	r1, r1, #4
 8004e84:	6021      	strge	r1, [r4, #0]
 8004e86:	b90e      	cbnz	r6, 8004e8c <_printf_i+0x114>
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	d04b      	beq.n	8004f24 <_printf_i+0x1ac>
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e92:	fb03 6711 	mls	r7, r3, r1, r6
 8004e96:	5dc7      	ldrb	r7, [r0, r7]
 8004e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e9c:	4637      	mov	r7, r6
 8004e9e:	42bb      	cmp	r3, r7
 8004ea0:	460e      	mov	r6, r1
 8004ea2:	d9f4      	bls.n	8004e8e <_printf_i+0x116>
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d10b      	bne.n	8004ec0 <_printf_i+0x148>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	07de      	lsls	r6, r3, #31
 8004eac:	d508      	bpl.n	8004ec0 <_printf_i+0x148>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	6861      	ldr	r1, [r4, #4]
 8004eb2:	4299      	cmp	r1, r3
 8004eb4:	bfde      	ittt	le
 8004eb6:	2330      	movle	r3, #48	; 0x30
 8004eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ec0:	1b52      	subs	r2, r2, r5
 8004ec2:	6122      	str	r2, [r4, #16]
 8004ec4:	f8cd a000 	str.w	sl, [sp]
 8004ec8:	464b      	mov	r3, r9
 8004eca:	aa03      	add	r2, sp, #12
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f7ff fee4 	bl	8004c9c <_printf_common>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d14a      	bne.n	8004f6e <_printf_i+0x1f6>
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	b004      	add	sp, #16
 8004ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f043 0320 	orr.w	r3, r3, #32
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	4833      	ldr	r0, [pc, #204]	; (8004fb8 <_printf_i+0x240>)
 8004eec:	2778      	movs	r7, #120	; 0x78
 8004eee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	6829      	ldr	r1, [r5, #0]
 8004ef6:	061f      	lsls	r7, r3, #24
 8004ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004efc:	d402      	bmi.n	8004f04 <_printf_i+0x18c>
 8004efe:	065f      	lsls	r7, r3, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2b6      	uxthmi	r6, r6
 8004f04:	07df      	lsls	r7, r3, #31
 8004f06:	bf48      	it	mi
 8004f08:	f043 0320 	orrmi.w	r3, r3, #32
 8004f0c:	6029      	str	r1, [r5, #0]
 8004f0e:	bf48      	it	mi
 8004f10:	6023      	strmi	r3, [r4, #0]
 8004f12:	b91e      	cbnz	r6, 8004f1c <_printf_i+0x1a4>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	f023 0320 	bic.w	r3, r3, #32
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	e7a7      	b.n	8004e70 <_printf_i+0xf8>
 8004f20:	4824      	ldr	r0, [pc, #144]	; (8004fb4 <_printf_i+0x23c>)
 8004f22:	e7e4      	b.n	8004eee <_printf_i+0x176>
 8004f24:	4615      	mov	r5, r2
 8004f26:	e7bd      	b.n	8004ea4 <_printf_i+0x12c>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	6826      	ldr	r6, [r4, #0]
 8004f2c:	6961      	ldr	r1, [r4, #20]
 8004f2e:	1d18      	adds	r0, r3, #4
 8004f30:	6028      	str	r0, [r5, #0]
 8004f32:	0635      	lsls	r5, r6, #24
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0x1c4>
 8004f38:	6019      	str	r1, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0x1ca>
 8004f3c:	0670      	lsls	r0, r6, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0x1c0>
 8004f40:	8019      	strh	r1, [r3, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	4615      	mov	r5, r2
 8004f48:	e7bc      	b.n	8004ec4 <_printf_i+0x14c>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	2100      	movs	r1, #0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f7fb f94a 	bl	80001f0 <memchr>
 8004f5c:	b108      	cbz	r0, 8004f62 <_printf_i+0x1ea>
 8004f5e:	1b40      	subs	r0, r0, r5
 8004f60:	6060      	str	r0, [r4, #4]
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	2300      	movs	r3, #0
 8004f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6c:	e7aa      	b.n	8004ec4 <_printf_i+0x14c>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	462a      	mov	r2, r5
 8004f72:	4649      	mov	r1, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	47d0      	blx	sl
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d0ad      	beq.n	8004ed8 <_printf_i+0x160>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	079b      	lsls	r3, r3, #30
 8004f80:	d413      	bmi.n	8004faa <_printf_i+0x232>
 8004f82:	68e0      	ldr	r0, [r4, #12]
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	4298      	cmp	r0, r3
 8004f88:	bfb8      	it	lt
 8004f8a:	4618      	movlt	r0, r3
 8004f8c:	e7a6      	b.n	8004edc <_printf_i+0x164>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4632      	mov	r2, r6
 8004f92:	4649      	mov	r1, r9
 8004f94:	4640      	mov	r0, r8
 8004f96:	47d0      	blx	sl
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d09d      	beq.n	8004ed8 <_printf_i+0x160>
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	9903      	ldr	r1, [sp, #12]
 8004fa2:	1a5b      	subs	r3, r3, r1
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dcf2      	bgt.n	8004f8e <_printf_i+0x216>
 8004fa8:	e7eb      	b.n	8004f82 <_printf_i+0x20a>
 8004faa:	2500      	movs	r5, #0
 8004fac:	f104 0619 	add.w	r6, r4, #25
 8004fb0:	e7f5      	b.n	8004f9e <_printf_i+0x226>
 8004fb2:	bf00      	nop
 8004fb4:	0800530d 	.word	0x0800530d
 8004fb8:	0800531e 	.word	0x0800531e

08004fbc <__sflush_r>:
 8004fbc:	898a      	ldrh	r2, [r1, #12]
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	0710      	lsls	r0, r2, #28
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	d458      	bmi.n	800507c <__sflush_r+0xc0>
 8004fca:	684b      	ldr	r3, [r1, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dc05      	bgt.n	8004fdc <__sflush_r+0x20>
 8004fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dc02      	bgt.n	8004fdc <__sflush_r+0x20>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	d0f9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fe8:	682f      	ldr	r7, [r5, #0]
 8004fea:	6a21      	ldr	r1, [r4, #32]
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	d032      	beq.n	8005056 <__sflush_r+0x9a>
 8004ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	075a      	lsls	r2, r3, #29
 8004ff6:	d505      	bpl.n	8005004 <__sflush_r+0x48>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	1ac0      	subs	r0, r0, r3
 8004ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ffe:	b10b      	cbz	r3, 8005004 <__sflush_r+0x48>
 8005000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005002:	1ac0      	subs	r0, r0, r3
 8005004:	2300      	movs	r3, #0
 8005006:	4602      	mov	r2, r0
 8005008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800500a:	6a21      	ldr	r1, [r4, #32]
 800500c:	4628      	mov	r0, r5
 800500e:	47b0      	blx	r6
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	d106      	bne.n	8005024 <__sflush_r+0x68>
 8005016:	6829      	ldr	r1, [r5, #0]
 8005018:	291d      	cmp	r1, #29
 800501a:	d82b      	bhi.n	8005074 <__sflush_r+0xb8>
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <__sflush_r+0x108>)
 800501e:	410a      	asrs	r2, r1
 8005020:	07d6      	lsls	r6, r2, #31
 8005022:	d427      	bmi.n	8005074 <__sflush_r+0xb8>
 8005024:	2200      	movs	r2, #0
 8005026:	6062      	str	r2, [r4, #4]
 8005028:	04d9      	lsls	r1, r3, #19
 800502a:	6922      	ldr	r2, [r4, #16]
 800502c:	6022      	str	r2, [r4, #0]
 800502e:	d504      	bpl.n	800503a <__sflush_r+0x7e>
 8005030:	1c42      	adds	r2, r0, #1
 8005032:	d101      	bne.n	8005038 <__sflush_r+0x7c>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b903      	cbnz	r3, 800503a <__sflush_r+0x7e>
 8005038:	6560      	str	r0, [r4, #84]	; 0x54
 800503a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800503c:	602f      	str	r7, [r5, #0]
 800503e:	2900      	cmp	r1, #0
 8005040:	d0c9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8005042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005046:	4299      	cmp	r1, r3
 8005048:	d002      	beq.n	8005050 <__sflush_r+0x94>
 800504a:	4628      	mov	r0, r5
 800504c:	f7ff fbea 	bl	8004824 <_free_r>
 8005050:	2000      	movs	r0, #0
 8005052:	6360      	str	r0, [r4, #52]	; 0x34
 8005054:	e7c0      	b.n	8004fd8 <__sflush_r+0x1c>
 8005056:	2301      	movs	r3, #1
 8005058:	4628      	mov	r0, r5
 800505a:	47b0      	blx	r6
 800505c:	1c41      	adds	r1, r0, #1
 800505e:	d1c8      	bne.n	8004ff2 <__sflush_r+0x36>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c5      	beq.n	8004ff2 <__sflush_r+0x36>
 8005066:	2b1d      	cmp	r3, #29
 8005068:	d001      	beq.n	800506e <__sflush_r+0xb2>
 800506a:	2b16      	cmp	r3, #22
 800506c:	d101      	bne.n	8005072 <__sflush_r+0xb6>
 800506e:	602f      	str	r7, [r5, #0]
 8005070:	e7b1      	b.n	8004fd6 <__sflush_r+0x1a>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	e7ad      	b.n	8004fd8 <__sflush_r+0x1c>
 800507c:	690f      	ldr	r7, [r1, #16]
 800507e:	2f00      	cmp	r7, #0
 8005080:	d0a9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8005082:	0793      	lsls	r3, r2, #30
 8005084:	680e      	ldr	r6, [r1, #0]
 8005086:	bf08      	it	eq
 8005088:	694b      	ldreq	r3, [r1, #20]
 800508a:	600f      	str	r7, [r1, #0]
 800508c:	bf18      	it	ne
 800508e:	2300      	movne	r3, #0
 8005090:	eba6 0807 	sub.w	r8, r6, r7
 8005094:	608b      	str	r3, [r1, #8]
 8005096:	f1b8 0f00 	cmp.w	r8, #0
 800509a:	dd9c      	ble.n	8004fd6 <__sflush_r+0x1a>
 800509c:	6a21      	ldr	r1, [r4, #32]
 800509e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050a0:	4643      	mov	r3, r8
 80050a2:	463a      	mov	r2, r7
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b0      	blx	r6
 80050a8:	2800      	cmp	r0, #0
 80050aa:	dc06      	bgt.n	80050ba <__sflush_r+0xfe>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e78e      	b.n	8004fd8 <__sflush_r+0x1c>
 80050ba:	4407      	add	r7, r0
 80050bc:	eba8 0800 	sub.w	r8, r8, r0
 80050c0:	e7e9      	b.n	8005096 <__sflush_r+0xda>
 80050c2:	bf00      	nop
 80050c4:	dfbffffe 	.word	0xdfbffffe

080050c8 <_fflush_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	4605      	mov	r5, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	b913      	cbnz	r3, 80050d8 <_fflush_r+0x10>
 80050d2:	2500      	movs	r5, #0
 80050d4:	4628      	mov	r0, r5
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	b118      	cbz	r0, 80050e2 <_fflush_r+0x1a>
 80050da:	6a03      	ldr	r3, [r0, #32]
 80050dc:	b90b      	cbnz	r3, 80050e2 <_fflush_r+0x1a>
 80050de:	f7ff f9a9 	bl	8004434 <__sinit>
 80050e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f3      	beq.n	80050d2 <_fflush_r+0xa>
 80050ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050ec:	07d0      	lsls	r0, r2, #31
 80050ee:	d404      	bmi.n	80050fa <_fflush_r+0x32>
 80050f0:	0599      	lsls	r1, r3, #22
 80050f2:	d402      	bmi.n	80050fa <_fflush_r+0x32>
 80050f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f6:	f7ff fb92 	bl	800481e <__retarget_lock_acquire_recursive>
 80050fa:	4628      	mov	r0, r5
 80050fc:	4621      	mov	r1, r4
 80050fe:	f7ff ff5d 	bl	8004fbc <__sflush_r>
 8005102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005104:	07da      	lsls	r2, r3, #31
 8005106:	4605      	mov	r5, r0
 8005108:	d4e4      	bmi.n	80050d4 <_fflush_r+0xc>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	059b      	lsls	r3, r3, #22
 800510e:	d4e1      	bmi.n	80050d4 <_fflush_r+0xc>
 8005110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005112:	f7ff fb85 	bl	8004820 <__retarget_lock_release_recursive>
 8005116:	e7dd      	b.n	80050d4 <_fflush_r+0xc>

08005118 <__swhatbuf_r>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	460c      	mov	r4, r1
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	2900      	cmp	r1, #0
 8005122:	b096      	sub	sp, #88	; 0x58
 8005124:	4615      	mov	r5, r2
 8005126:	461e      	mov	r6, r3
 8005128:	da0d      	bge.n	8005146 <__swhatbuf_r+0x2e>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	bf0c      	ite	eq
 8005136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800513a:	2340      	movne	r3, #64	; 0x40
 800513c:	2000      	movs	r0, #0
 800513e:	6031      	str	r1, [r6, #0]
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	b016      	add	sp, #88	; 0x58
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	466a      	mov	r2, sp
 8005148:	f000 f848 	bl	80051dc <_fstat_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	dbec      	blt.n	800512a <__swhatbuf_r+0x12>
 8005150:	9901      	ldr	r1, [sp, #4]
 8005152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800515a:	4259      	negs	r1, r3
 800515c:	4159      	adcs	r1, r3
 800515e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005162:	e7eb      	b.n	800513c <__swhatbuf_r+0x24>

08005164 <__smakebuf_r>:
 8005164:	898b      	ldrh	r3, [r1, #12]
 8005166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005168:	079d      	lsls	r5, r3, #30
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	d507      	bpl.n	8005180 <__smakebuf_r+0x1c>
 8005170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	2301      	movs	r3, #1
 800517a:	6163      	str	r3, [r4, #20]
 800517c:	b002      	add	sp, #8
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	ab01      	add	r3, sp, #4
 8005182:	466a      	mov	r2, sp
 8005184:	f7ff ffc8 	bl	8005118 <__swhatbuf_r>
 8005188:	9900      	ldr	r1, [sp, #0]
 800518a:	4605      	mov	r5, r0
 800518c:	4630      	mov	r0, r6
 800518e:	f7ff fbb5 	bl	80048fc <_malloc_r>
 8005192:	b948      	cbnz	r0, 80051a8 <__smakebuf_r+0x44>
 8005194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d4ef      	bmi.n	800517c <__smakebuf_r+0x18>
 800519c:	f023 0303 	bic.w	r3, r3, #3
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	e7e3      	b.n	8005170 <__smakebuf_r+0xc>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	9b00      	ldr	r3, [sp, #0]
 80051b4:	6163      	str	r3, [r4, #20]
 80051b6:	9b01      	ldr	r3, [sp, #4]
 80051b8:	6120      	str	r0, [r4, #16]
 80051ba:	b15b      	cbz	r3, 80051d4 <__smakebuf_r+0x70>
 80051bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f81d 	bl	8005200 <_isatty_r>
 80051c6:	b128      	cbz	r0, 80051d4 <__smakebuf_r+0x70>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	431d      	orrs	r5, r3
 80051d8:	81a5      	strh	r5, [r4, #12]
 80051da:	e7cf      	b.n	800517c <__smakebuf_r+0x18>

080051dc <_fstat_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4d07      	ldr	r5, [pc, #28]	; (80051fc <_fstat_r+0x20>)
 80051e0:	2300      	movs	r3, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	f7fb fe1a 	bl	8000e22 <_fstat>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d102      	bne.n	80051f8 <_fstat_r+0x1c>
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	b103      	cbz	r3, 80051f8 <_fstat_r+0x1c>
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	bd38      	pop	{r3, r4, r5, pc}
 80051fa:	bf00      	nop
 80051fc:	20000344 	.word	0x20000344

08005200 <_isatty_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	; (800521c <_isatty_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fb fe19 	bl	8000e42 <_isatty>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_isatty_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_isatty_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20000344 	.word	0x20000344

08005220 <_sbrk_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d06      	ldr	r5, [pc, #24]	; (800523c <_sbrk_r+0x1c>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f7fb fe22 	bl	8000e74 <_sbrk>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_sbrk_r+0x1a>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_sbrk_r+0x1a>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	20000344 	.word	0x20000344

08005240 <_init>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr

0800524c <_fini>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr
