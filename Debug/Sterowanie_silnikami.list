
Sterowanie_silnikami.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e4  080053e4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ec  080053ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080053f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000006c  08005460  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005460  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe60  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208e  00000000  00000000  0002ff3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc2  00000000  00000000  00032ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275ed  00000000  00000000  00033aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113bf  00000000  00000000  0005b08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4125  00000000  00000000  0006c44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004730  00000000  00000000  00160574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00164ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005304 	.word	0x08005304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005304 	.word	0x08005304

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b0d      	cmp	r3, #13
 800059a:	d003      	beq.n	80005a4 <line_append+0x18>
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	f040 80e6 	bne.w	8000770 <line_append+0x1e4>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 80005a4:	4b7c      	ldr	r3, [pc, #496]	; (8000798 <line_append+0x20c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f000 80f1 	beq.w	8000790 <line_append+0x204>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 80005ae:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <line_append+0x20c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a7a      	ldr	r2, [pc, #488]	; (800079c <line_append+0x210>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("Otrzymano: %s\n", line_buffer);
 80005b8:	4978      	ldr	r1, [pc, #480]	; (800079c <line_append+0x210>)
 80005ba:	4879      	ldr	r0, [pc, #484]	; (80007a0 <line_append+0x214>)
 80005bc:	f003 ffd2 	bl	8004564 <iprintf>

			//kody: prawy/lewy/oba | przód/tyl | wypelnienie
			//          P/L/O      |    P/T    |    0-99
			// stop = SP

			if (strcmp(line_buffer, "wlacz") == 0) {
 80005c0:	4978      	ldr	r1, [pc, #480]	; (80007a4 <line_append+0x218>)
 80005c2:	4876      	ldr	r0, [pc, #472]	; (800079c <line_append+0x210>)
 80005c4:	f7ff fe04 	bl	80001d0 <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <line_append+0x50>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2120      	movs	r1, #32
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 f87d 	bl	80016d4 <HAL_GPIO_WritePin>
 80005da:	e0b6      	b.n	800074a <line_append+0x1be>
			}
			else if (strcmp(line_buffer, "wylacz") == 0) {
 80005dc:	4972      	ldr	r1, [pc, #456]	; (80007a8 <line_append+0x21c>)
 80005de:	486f      	ldr	r0, [pc, #444]	; (800079c <line_append+0x210>)
 80005e0:	f7ff fdf6 	bl	80001d0 <strcmp>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d106      	bne.n	80005f8 <line_append+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 f86f 	bl	80016d4 <HAL_GPIO_WritePin>
 80005f6:	e0a8      	b.n	800074a <line_append+0x1be>
			}

			else if (line_buffer[0]=='O'&&line_buffer[1]=='P'){ //OP
 80005f8:	4b68      	ldr	r3, [pc, #416]	; (800079c <line_append+0x210>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b4f      	cmp	r3, #79	; 0x4f
 80005fe:	d117      	bne.n	8000630 <line_append+0xa4>
 8000600:	4b66      	ldr	r3, [pc, #408]	; (800079c <line_append+0x210>)
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	2b50      	cmp	r3, #80	; 0x50
 8000606:	d113      	bne.n	8000630 <line_append+0xa4>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 1 = przod
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 f85f 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	4863      	ldr	r0, [pc, #396]	; (80007ac <line_append+0x220>)
 800061e:	f001 f859 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 8000622:	4863      	ldr	r0, [pc, #396]	; (80007b0 <line_append+0x224>)
 8000624:	f002 fc00 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 8000628:	4862      	ldr	r0, [pc, #392]	; (80007b4 <line_append+0x228>)
 800062a:	f002 fbfd 	bl	8002e28 <HAL_TIM_Base_Start_IT>
 800062e:	e08c      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='O'&&line_buffer[1]=='T'){
 8000630:	4b5a      	ldr	r3, [pc, #360]	; (800079c <line_append+0x210>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b4f      	cmp	r3, #79	; 0x4f
 8000636:	d117      	bne.n	8000668 <line_append+0xdc>
 8000638:	4b58      	ldr	r3, [pc, #352]	; (800079c <line_append+0x210>)
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	2b54      	cmp	r3, #84	; 0x54
 800063e:	d113      	bne.n	8000668 <line_append+0xdc>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 1 = przod
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f001 f843 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4855      	ldr	r0, [pc, #340]	; (80007ac <line_append+0x220>)
 8000656:	f001 f83d 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 800065a:	4855      	ldr	r0, [pc, #340]	; (80007b0 <line_append+0x224>)
 800065c:	f002 fbe4 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 8000660:	4854      	ldr	r0, [pc, #336]	; (80007b4 <line_append+0x228>)
 8000662:	f002 fbe1 	bl	8002e28 <HAL_TIM_Base_Start_IT>
 8000666:	e070      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='S'&&line_buffer[1]=='P'){
 8000668:	4b4c      	ldr	r3, [pc, #304]	; (800079c <line_append+0x210>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b53      	cmp	r3, #83	; 0x53
 800066e:	d10a      	bne.n	8000686 <line_append+0xfa>
 8000670:	4b4a      	ldr	r3, [pc, #296]	; (800079c <line_append+0x210>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	2b50      	cmp	r3, #80	; 0x50
 8000676:	d106      	bne.n	8000686 <line_append+0xfa>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000678:	484d      	ldr	r0, [pc, #308]	; (80007b0 <line_append+0x224>)
 800067a:	f002 fc45 	bl	8002f08 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 800067e:	484d      	ldr	r0, [pc, #308]	; (80007b4 <line_append+0x228>)
 8000680:	f002 fc42 	bl	8002f08 <HAL_TIM_Base_Stop_IT>
 8000684:	e061      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='P'&&line_buffer[1]=='P'){
 8000686:	4b45      	ldr	r3, [pc, #276]	; (800079c <line_append+0x210>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b50      	cmp	r3, #80	; 0x50
 800068c:	d117      	bne.n	80006be <line_append+0x132>
 800068e:	4b43      	ldr	r3, [pc, #268]	; (800079c <line_append+0x210>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	2b50      	cmp	r3, #80	; 0x50
 8000694:	d113      	bne.n	80006be <line_append+0x132>
				HAL_TIM_Base_Start_IT(&htim4);
 8000696:	4846      	ldr	r0, [pc, #280]	; (80007b0 <line_append+0x224>)
 8000698:	f002 fbc6 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a2:	4842      	ldr	r0, [pc, #264]	; (80007ac <line_append+0x220>)
 80006a4:	f001 f816 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 80006a8:	4842      	ldr	r0, [pc, #264]	; (80007b4 <line_append+0x228>)
 80006aa:	f002 fbbd 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 0 = tyl
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f001 f80c 	bl	80016d4 <HAL_GPIO_WritePin>
 80006bc:	e045      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='L'&&line_buffer[1]=='P'){
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <line_append+0x210>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b4c      	cmp	r3, #76	; 0x4c
 80006c4:	d117      	bne.n	80006f6 <line_append+0x16a>
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <line_append+0x210>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b50      	cmp	r3, #80	; 0x50
 80006cc:	d113      	bne.n	80006f6 <line_append+0x16a>
				HAL_TIM_Base_Start_IT(&htim4);
 80006ce:	4838      	ldr	r0, [pc, #224]	; (80007b0 <line_append+0x224>)
 80006d0:	f002 fbaa 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	4834      	ldr	r0, [pc, #208]	; (80007ac <line_append+0x220>)
 80006dc:	f000 fffa 	bl	80016d4 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 80006e0:	4834      	ldr	r0, [pc, #208]	; (80007b4 <line_append+0x228>)
 80006e2:	f002 fba1 	bl	8002e28 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 0 = tyl
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fff0 	bl	80016d4 <HAL_GPIO_WritePin>
 80006f4:	e029      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='D'&&line_buffer[1]=='1'&&line_buffer[2]=='T'){ //Led 1 On
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <line_append+0x210>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b44      	cmp	r3, #68	; 0x44
 80006fc:	d10e      	bne.n	800071c <line_append+0x190>
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <line_append+0x210>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b31      	cmp	r3, #49	; 0x31
 8000704:	d10a      	bne.n	800071c <line_append+0x190>
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <line_append+0x210>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	2b54      	cmp	r3, #84	; 0x54
 800070c:	d106      	bne.n	800071c <line_append+0x190>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 ffdd 	bl	80016d4 <HAL_GPIO_WritePin>
 800071a:	e016      	b.n	800074a <line_append+0x1be>
			}
			else if (line_buffer[0]=='D'&&line_buffer[1]=='1'&&line_buffer[2]=='F'){ //Led 1 On
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <line_append+0x210>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b44      	cmp	r3, #68	; 0x44
 8000722:	d10e      	bne.n	8000742 <line_append+0x1b6>
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <line_append+0x210>)
 8000726:	785b      	ldrb	r3, [r3, #1]
 8000728:	2b31      	cmp	r3, #49	; 0x31
 800072a:	d10a      	bne.n	8000742 <line_append+0x1b6>
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <line_append+0x210>)
 800072e:	789b      	ldrb	r3, [r3, #2]
 8000730:	2b46      	cmp	r3, #70	; 0x46
 8000732:	d106      	bne.n	8000742 <line_append+0x1b6>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f000 ffca 	bl	80016d4 <HAL_GPIO_WritePin>
 8000740:	e003      	b.n	800074a <line_append+0x1be>

			} //*/
			else {
				printf("Nieznane polecenie: %s\n", line_buffer);
 8000742:	4916      	ldr	r1, [pc, #88]	; (800079c <line_append+0x210>)
 8000744:	481c      	ldr	r0, [pc, #112]	; (80007b8 <line_append+0x22c>)
 8000746:	f003 ff0d 	bl	8004564 <iprintf>
			}

			wypelnienie_uart = (int)(line_buffer[2] - '0')*10 + (int)(line_buffer[3] - '0');
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <line_append+0x210>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	461a      	mov	r2, r3
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <line_append+0x210>)
 800075e:	78db      	ldrb	r3, [r3, #3]
 8000760:	3b30      	subs	r3, #48	; 0x30
 8000762:	4413      	add	r3, r2
 8000764:	4a15      	ldr	r2, [pc, #84]	; (80007bc <line_append+0x230>)
 8000766:	6013      	str	r3, [r2, #0]


			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <line_append+0x20c>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 800076e:	e00f      	b.n	8000790 <line_append+0x204>

		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <line_append+0x20c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b4f      	cmp	r3, #79	; 0x4f
 8000776:	d902      	bls.n	800077e <line_append+0x1f2>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <line_append+0x20c>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <line_append+0x20c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <line_append+0x20c>)
 8000786:	600a      	str	r2, [r1, #0]
 8000788:	4904      	ldr	r1, [pc, #16]	; (800079c <line_append+0x210>)
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	54ca      	strb	r2, [r1, r3]
	}
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001fc 	.word	0x200001fc
 800079c:	200001a8 	.word	0x200001a8
 80007a0:	0800531c 	.word	0x0800531c
 80007a4:	0800532c 	.word	0x0800532c
 80007a8:	08005334 	.word	0x08005334
 80007ac:	48000800 	.word	0x48000800
 80007b0:	20000088 	.word	0x20000088
 80007b4:	200000d4 	.word	0x200000d4
 80007b8:	0800533c 	.word	0x0800533c
 80007bc:	20000000 	.word	0x20000000

080007c0 <__io_putchar>:


/////////////////////////////////////////////////  send
int __io_putchar(int ch)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b0a      	cmp	r3, #10
 80007cc:	d109      	bne.n	80007e2 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 80007ce:	230d      	movs	r3, #13
 80007d0:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80007d2:	f107 010f 	add.w	r1, r7, #15
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	2201      	movs	r2, #1
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <__io_putchar+0x3c>)
 80007de:	f002 ffdd 	bl	800379c <HAL_UART_Transmit>
	}

	  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007e2:	1d39      	adds	r1, r7, #4
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <__io_putchar+0x3c>)
 80007ec:	f002 ffd6 	bl	800379c <HAL_UART_Transmit>
	  return 1;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000120 	.word	0x20000120

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fbf1 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f859 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 f95d 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000812:	f000 f92b 	bl	8000a6c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000816:	f000 f8a5 	bl	8000964 <MX_TIM4_Init>
  MX_TIM6_Init();
 800081a:	f000 f8f1 	bl	8000a00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  int i;

  for (i = 0; i < 10; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00a      	b.n	800083a <main+0x3a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000824:	2120      	movs	r1, #32
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f000 ff6b 	bl	8001704 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f000 fc58 	bl	80010e4 <HAL_Delay>
  for (i = 0; i < 10; i++) {
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b09      	cmp	r3, #9
 800083e:	ddf1      	ble.n	8000824 <main+0x24>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a=0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  int b=0;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  printf("Hello World!\n");
 8000848:	4819      	ldr	r0, [pc, #100]	; (80008b0 <main+0xb0>)
 800084a:	f003 fef1 	bl	8004630 <puts>
  while (1)
  {

	  uint8_t test;
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK) {
 800084e:	1cb9      	adds	r1, r7, #2
 8000850:	2300      	movs	r3, #0
 8000852:	2201      	movs	r2, #1
 8000854:	4817      	ldr	r0, [pc, #92]	; (80008b4 <main+0xb4>)
 8000856:	f003 f82b 	bl	80038b0 <HAL_UART_Receive>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d109      	bne.n	8000874 <main+0x74>
		  line_append(value);
 8000860:	78bb      	ldrb	r3, [r7, #2]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe92 	bl	800058c <line_append>
		  test = value;
 8000868:	78bb      	ldrb	r3, [r7, #2]
 800086a:	70fb      	strb	r3, [r7, #3]
		  //printf("otrzymano: ");
		  printf(value);
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fe78 	bl	8004564 <iprintf>
	  }
	  if (HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin)==0){
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <main+0xb8>)
 800087a:	f000 ff13 	bl	80016a4 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <main+0x9a>
		  if (a==1){
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d105      	bne.n	8000896 <main+0x96>
			  printf("b1\n");
 800088a:	480c      	ldr	r0, [pc, #48]	; (80008bc <main+0xbc>)
 800088c:	f003 fed0 	bl	8004630 <puts>
			  b++;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
		  }
		  a=0;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
	  }
	  if (HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin)==1){  //detecting edge
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <main+0xb8>)
 80008a0:	f000 ff00 	bl	80016a4 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d1d1      	bne.n	800084e <main+0x4e>
		  a=1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
  {
 80008ae:	e7ce      	b.n	800084e <main+0x4e>
 80008b0:	08005354 	.word	0x08005354
 80008b4:	20000120 	.word	0x20000120
 80008b8:	48000800 	.word	0x48000800
 80008bc:	08005364 	.word	0x08005364

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	; 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 ff8e 	bl	80047f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e6:	f000 ff35 	bl	8001754 <HAL_PWREx_ControlVoltageScaling>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f0:	f000 f996 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800090e:	230a      	movs	r3, #10
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000912:	2307      	movs	r3, #7
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4618      	mov	r0, r3
 8000924:	f000 ff6c 	bl	8001800 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800092e:	f000 f977 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fb34 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000956:	f000 f963 	bl	8000c20 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	; 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000984:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_TIM4_Init+0x98>)
 8000986:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_TIM4_Init+0x94>)
 800098a:	22c7      	movs	r2, #199	; 0xc7
 800098c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000996:	2263      	movs	r2, #99	; 0x63
 8000998:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_TIM4_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009a8:	f002 f9e6 	bl	8002d78 <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f935 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009c4:	f002 fbd1 	bl	800316a <HAL_TIM_ConfigClockSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 f927 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009e0:	f002 fde8 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009ea:	f000 f919 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000088 	.word	0x20000088
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_TIM6_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a18:	22c7      	movs	r2, #199	; 0xc7
 8000a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a24:	2263      	movs	r2, #99	; 0x63
 8000a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a30:	f002 f9a2 	bl	8002d78 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a3a:	f000 f8f1 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_TIM6_Init+0x64>)
 8000a4c:	f002 fdb2 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a56:	f000 f8e3 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	40001000 	.word	0x40001000

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f002 fe26 	bl	8003700 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f8b1 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000120 	.word	0x20000120
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a30      	ldr	r2, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f649 0120 	movw	r1, #38944	; 0x9820
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f000 fdc2 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MX_GPIO_Init+0x110>)
 8000b58:	f000 fdbc 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	481a      	ldr	r0, [pc, #104]	; (8000bdc <MX_GPIO_Init+0x110>)
 8000b74:	f000 fbec 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_minus_Pin PUL_minus_Pin PUL2_minus_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin;
 8000b78:	f649 0320 	movw	r3, #38944	; 0x9820
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f000 fbdc 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_L_Pin */
  GPIO_InitStruct.Pin = Button_L_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_L_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <MX_GPIO_Init+0x110>)
 8000bae:	f000 fbcf 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_minus_Pin */
  GPIO_InitStruct.Pin = DIR2_minus_Pin;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR2_minus_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0x110>)
 8000bcc:	f000 fbc0 	bl	8001350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000800 	.word	0x48000800

08000be0 <HAL_TIM_PeriodElapsedCallback>:
	//}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

	if (htim == &htim6){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d105      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(PUL_minus_GPIO_Port, PUL_minus_Pin);
 8000bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fd84 	bl	8001704 <HAL_GPIO_TogglePin>
	}

	if (htim == &htim4){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d105      	bne.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(PUL2_minus_GPIO_Port, PUL2_minus_Pin);
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 fd7a 	bl	8001704 <HAL_GPIO_TogglePin>
	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000d4 	.word	0x200000d4
 8000c1c:	20000088 	.word	0x20000088

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_TIM_Base_MspInit+0x78>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d114      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201e      	movs	r0, #30
 8000ca4:	f000 fb1d 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ca8:	201e      	movs	r0, #30
 8000caa:	f000 fb36 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cae:	e018      	b.n	8000ce2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_TIM_Base_MspInit+0x80>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d113      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2036      	movs	r0, #54	; 0x36
 8000cd8:	f000 fb03 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f000 fb1c 	bl	800131a <HAL_NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40000800 	.word	0x40000800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ac      	sub	sp, #176	; 0xb0
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2288      	movs	r2, #136	; 0x88
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fd69 	bl	80047f0 <memset>
  if(huart->Instance==USART2)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <HAL_UART_MspInit+0xb0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d13b      	bne.n	8000da0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fb63 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff ff6e 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d74:	230c      	movs	r3, #12
 8000d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 fad8 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	37b0      	adds	r7, #176	; 0xb0
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f952 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM4_IRQHandler+0x10>)
 8000e0a:	f002 f8ac 	bl	8002f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000088 	.word	0x20000088

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f002 f8a2 	bl	8002f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000d4 	.word	0x200000d4

08000e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
  }

  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc9d 	bl	80007c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
  }
  return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f003 fca8 	bl	800488c <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20018000 	.word	0x20018000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	20000200 	.word	0x20000200
 8000f70:	20000358 	.word	0x20000358

08000f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff ffea 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f003 fc67 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f7ff fc19 	bl	8000800 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fdc:	080053f4 	.word	0x080053f4
  ldr r2, =_sbss
 8000fe0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fe4:	20000354 	.word	0x20000354

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_Init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x3c>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f962 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f80f 	bl	800102c <HAL_InitTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	e001      	b.n	800101e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101a:	f7ff fe07 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_InitTick+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d023      	beq.n	8001088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_InitTick+0x70>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f96d 	bl	8001336 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d809      	bhi.n	800107c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f937 	bl	80012e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_InitTick+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e007      	b.n	800108c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e004      	b.n	800108c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e001      	b.n	800108c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000004 	.word	0x20000004
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000204 	.word	0x20000204

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000204 	.word	0x20000204

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000000c 	.word	0x2000000c

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e17f      	b.n	8001660 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8171 	beq.w	800165a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f003 0201 	and.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d118      	bne.n	8001430 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	6939      	ldr	r1, [r7, #16]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80ac 	beq.w	800165a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	4a5e      	ldr	r2, [pc, #376]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6613      	str	r3, [r2, #96]	; 0x60
 800150e:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800151a:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <HAL_GPIO_Init+0x334>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x242>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x338>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x23e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x33c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x23a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x340>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x236>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x344>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x232>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x348>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x22e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4a      	ldr	r2, [pc, #296]	; (800169c <HAL_GPIO_Init+0x34c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x22a>
 8001576:	2306      	movs	r3, #6
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800157a:	2307      	movs	r3, #7
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x244>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x244>
 8001592:	2300      	movs	r3, #0
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a4:	4937      	ldr	r1, [pc, #220]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_GPIO_Init+0x350>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_GPIO_Init+0x350>)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001654:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <HAL_GPIO_Init+0x350>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f ae78 	bne.w	8001360 <HAL_GPIO_Init+0x10>
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40010000 	.word	0x40010000
 8001688:	48000400 	.word	0x48000400
 800168c:	48000800 	.word	0x48000800
 8001690:	48000c00 	.word	0x48000c00
 8001694:	48001000 	.word	0x48001000
 8001698:	48001400 	.word	0x48001400
 800169c:	48001800 	.word	0x48001800
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e001      	b.n	80016c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43d9      	mvns	r1, r3
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	400b      	ands	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_PWREx_GetVoltageRange+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001762:	d130      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001770:	d038      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2232      	movs	r2, #50	; 0x32
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	e002      	b.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d102      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f2      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d110      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e00f      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d007      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000004 	.word	0x20000004
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3ca      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80e4 	beq.w	80019fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_RCC_OscConfig+0x4a>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	f040 808b 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b01      	cmp	r3, #1
 8001846:	f040 8087 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e3a2      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4b82      	ldr	r3, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_RCC_OscConfig+0x7c>
 8001872:	4b7f      	ldr	r3, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187a:	e005      	b.n	8001888 <HAL_RCC_OscConfig+0x88>
 800187c:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	4293      	cmp	r3, r2
 800188a:	d223      	bcs.n	80018d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fd55 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e383      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	496d      	ldr	r1, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4968      	ldr	r1, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e025      	b.n	8001920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4960      	ldr	r1, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	495b      	ldr	r1, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd15 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e343      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001920:	f000 fc4a 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	4950      	ldr	r1, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 800193e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001940:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb71 	bl	800102c <HAL_InitTick>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d052      	beq.n	80019fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	e327      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196c:	f7ff fbae 	bl	80010cc <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fbaa 	bl	80010cc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e310      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4931      	ldr	r1, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e01a      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb7b 	bl	80010cc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fb77 	bl	80010cc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e2dd      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x1da>
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d074      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x21a>
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d064      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d160      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2ba      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x24a>
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e026      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a52:	d115      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08005368 	.word	0x08005368
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a9f      	ldr	r2, [pc, #636]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb14 	bl	80010cc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fb10 	bl	80010cc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e276      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb00 	bl	80010cc <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fafc 	bl	80010cc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e262      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d060      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x310>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x328>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e23f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4973      	ldr	r1, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e040      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fabb 	bl	80010cc <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fab7 	bl	80010cc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e21d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	495f      	ldr	r1, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fa97 	bl	80010cc <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fa93 	bl	80010cc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1f9      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa72 	bl	80010cc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa6e 	bl	80010cc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1d4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x3ec>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa55 	bl	80010cc <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa51 	bl	80010cc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1b7      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a6 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fa18 	bl	80010cc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff fa14 	bl	80010cc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e17a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d115      	bne.n	8001d0c <HAL_RCC_OscConfig+0x50c>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	4b9c      	ldr	r3, [pc, #624]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a9b      	ldr	r2, [pc, #620]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1c:	4b98      	ldr	r3, [pc, #608]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	4a97      	ldr	r2, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f9ca 	bl	80010cc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f9c6 	bl	80010cc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e12a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ed      	beq.n	8001d3c <HAL_RCC_OscConfig+0x53c>
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff f9b3 	bl	80010cc <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff f9af 	bl	80010cc <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e113      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ed      	bne.n	8001d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a79      	ldr	r2, [pc, #484]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80fe 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 80d0 	bne.w	8001f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db4:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d130      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d127      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d11f      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df4:	2a07      	cmp	r2, #7
 8001df6:	bf14      	ite	ne
 8001df8:	2201      	movne	r2, #1
 8001dfa:	2200      	moveq	r2, #0
 8001dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d06e      	beq.n	8001f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d069      	beq.n	8001f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e30:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0ad      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e58:	f7ff f938 	bl	80010cc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f934 	bl	80010cc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e09a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e98:	0212      	lsls	r2, r2, #8
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ea0:	0852      	lsrs	r2, r2, #1
 8001ea2:	3a01      	subs	r2, #1
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0652      	lsls	r2, r2, #25
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb8:	0912      	lsrs	r2, r2, #4
 8001eba:	0452      	lsls	r2, r2, #17
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4930      	ldr	r1, [pc, #192]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001edc:	f7ff f8f6 	bl	80010cc <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8f2 	bl	80010cc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e058      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f02:	e050      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d148      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2c:	f7ff f8ce 	bl	80010cc <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f8ca 	bl	80010cc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e030      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x734>
 8001f52:	e028      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d023      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f8b1 	bl	80010cc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e00c      	b.n	8001f88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff f8ad 	bl	80010cc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d905      	bls.n	8001f88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e013      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ec      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4905      	ldr	r1, [pc, #20]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x7b4>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e001      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	feeefffc 	.word	0xfeeefffc

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0e7      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4970      	ldr	r1, [pc, #448]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0cf      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d908      	bls.n	800202a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4960      	ldr	r1, [pc, #384]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04c      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0a6      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e09a      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206e:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e08e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e086      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4943      	ldr	r1, [pc, #268]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff f814 	bl	80010cc <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff f810 	bl	80010cc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	492b      	ldr	r1, [pc, #172]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d210      	bcs.n	800212e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0207 	bic.w	r2, r3, #7
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e036      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4918      	ldr	r1, [pc, #96]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4910      	ldr	r1, [pc, #64]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216c:	f000 f824 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	490b      	ldr	r1, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1f4>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1fc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe ff4b 	bl	800102c <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	72fb      	strb	r3, [r7, #11]

  return status;
 800219a:	7afb      	ldrb	r3, [r7, #11]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08005368 	.word	0x08005368
 80021b0:	20000004 	.word	0x20000004
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d121      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11e      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d102      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e004      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 800223e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d134      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0xa6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xac>
 800225c:	e005      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002260:	617b      	str	r3, [r7, #20]
      break;
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e002      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	fb03 f202 	mul.w	r2, r3, r2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	0e5b      	lsrs	r3, r3, #25
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	3301      	adds	r3, #1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08005380 	.word	0x08005380
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08005378 	.word	0x08005378

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002318:	f7ff ffda 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK2Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08005378 	.word	0x08005378

08002340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f9ee 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 800235c:	6178      	str	r0, [r7, #20]
 800235e:	e014      	b.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002378:	f7ff f9de 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 800237c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002390:	d10b      	bne.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d919      	bls.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2ba0      	cmp	r3, #160	; 0xa0
 800239c:	d902      	bls.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800239e:	2302      	movs	r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e013      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a4:	2301      	movs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e010      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d902      	bls.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b0:	2303      	movs	r3, #3
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e00a      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d102      	bne.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e004      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d101      	bne.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0207 	bic.w	r2, r3, #7
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002408:	2300      	movs	r3, #0
 800240a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2300      	movs	r3, #0
 800240e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	d041      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002420:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002424:	d02a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002426:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800242a:	d824      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800242c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002436:	d81e      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800243c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002440:	d010      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002442:	e018      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002444:	4b86      	ldr	r3, [pc, #536]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a85      	ldr	r2, [pc, #532]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002450:	e015      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fabb 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002462:	e00c      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3320      	adds	r3, #32
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fba6 	bl	8002bbc <RCCEx_PLLSAI2_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002474:	e003      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	74fb      	strb	r3, [r7, #19]
      break;
 800247a:	e000      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800247c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002484:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002492:	4973      	ldr	r1, [pc, #460]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800249a:	e001      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d041      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024b4:	d02a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024ba:	d824      	bhi.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c6:	d81e      	bhi.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d010      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024d2:	e018      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024d4:	4b62      	ldr	r3, [pc, #392]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e0:	e015      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fa73 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024f2:	e00c      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3320      	adds	r3, #32
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fb5e 	bl	8002bbc <RCCEx_PLLSAI2_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002504:	e003      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	74fb      	strb	r3, [r7, #19]
      break;
 800250a:	e000      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800250c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002522:	494f      	ldr	r1, [pc, #316]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800252a:	e001      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a0 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002580:	f7fe fda4 	bl	80010cc <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002586:	e009      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7fe fda0 	bl	80010cc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d902      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	74fb      	strb	r3, [r7, #19]
        break;
 800259a:	e005      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ef      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d15c      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01f      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d019      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a20      	ldr	r2, [pc, #128]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fd5f 	bl	80010cc <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002610:	e00b      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fd5b 	bl	80010cc <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d902      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	74fb      	strb	r3, [r7, #19]
            break;
 8002628:	e006      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ec      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	4904      	ldr	r1, [pc, #16]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002656:	e009      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
 800265c:	e006      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266c:	7c7b      	ldrb	r3, [r7, #17]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b9e      	ldr	r3, [pc, #632]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4a9d      	ldr	r2, [pc, #628]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 0203 	bic.w	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	4994      	ldr	r1, [pc, #592]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ac:	4b8f      	ldr	r3, [pc, #572]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 020c 	bic.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	498c      	ldr	r1, [pc, #560]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ce:	4b87      	ldr	r3, [pc, #540]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	4983      	ldr	r1, [pc, #524]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	497b      	ldr	r1, [pc, #492]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	4972      	ldr	r1, [pc, #456]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002734:	4b6d      	ldr	r3, [pc, #436]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	496a      	ldr	r1, [pc, #424]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	4961      	ldr	r1, [pc, #388]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002778:	4b5c      	ldr	r3, [pc, #368]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002786:	4959      	ldr	r1, [pc, #356]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800279a:	4b54      	ldr	r3, [pc, #336]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	4950      	ldr	r1, [pc, #320]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027bc:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	4948      	ldr	r1, [pc, #288]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027de:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	493f      	ldr	r1, [pc, #252]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d028      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800280e:	4937      	ldr	r1, [pc, #220]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281e:	d106      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002820:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a31      	ldr	r2, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282a:	60d3      	str	r3, [r2, #12]
 800282c:	e011      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002836:	d10c      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f8c8 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d028      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	491f      	ldr	r1, [pc, #124]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287c:	d106      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002888:	60d3      	str	r3, [r2, #12]
 800288a:	e011      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f899 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02b      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028da:	d109      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a02      	ldr	r2, [pc, #8]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e6:	60d3      	str	r3, [r2, #12]
 80028e8:	e014      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f867 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d02f      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800292e:	4928      	ldr	r1, [pc, #160]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800293e:	d10d      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f844 	bl	80029d4 <RCCEx_PLLSAI1_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	74bb      	strb	r3, [r7, #18]
 800295a:	e011      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002964:	d10c      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3320      	adds	r3, #32
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f925 	bl	8002bbc <RCCEx_PLLSAI2_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299a:	490d      	ldr	r1, [pc, #52]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000

080029d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029e2:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ee:	4b72      	ldr	r3, [pc, #456]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0203 	and.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10d      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
       ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a06:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
       ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d047      	beq.n	8002aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e044      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d018      	beq.n	8002a5a <RCCEx_PLLSAI1_Config+0x86>
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d825      	bhi.n	8002a78 <RCCEx_PLLSAI1_Config+0xa4>
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d002      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x62>
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d009      	beq.n	8002a48 <RCCEx_PLLSAI1_Config+0x74>
 8002a34:	e020      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11d      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a46:	e01a      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a48:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d116      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e013      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a66:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a76:	e006      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e004      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	4944      	ldr	r1, [pc, #272]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d17d      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ab0:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe fb06 	bl	80010cc <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac4:	f7fe fb02 	bl	80010cc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ef      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d160      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	0211      	lsls	r1, r2, #8
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	0912      	lsrs	r2, r2, #4
 8002b08:	0452      	lsls	r2, r2, #17
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	492a      	ldr	r1, [pc, #168]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	610b      	str	r3, [r1, #16]
 8002b12:	e027      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d112      	bne.n	8002b40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	0211      	lsls	r1, r2, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6912      	ldr	r2, [r2, #16]
 8002b30:	0852      	lsrs	r2, r2, #1
 8002b32:	3a01      	subs	r2, #1
 8002b34:	0552      	lsls	r2, r2, #21
 8002b36:	430a      	orrs	r2, r1
 8002b38:	491f      	ldr	r1, [pc, #124]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	610b      	str	r3, [r1, #16]
 8002b3e:	e011      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	0211      	lsls	r1, r2, #8
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6952      	ldr	r2, [r2, #20]
 8002b56:	0852      	lsrs	r2, r2, #1
 8002b58:	3a01      	subs	r2, #1
 8002b5a:	0652      	lsls	r2, r2, #25
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	4916      	ldr	r1, [pc, #88]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe faac 	bl	80010cc <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b76:	e009      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b78:	f7fe faa8 	bl	80010cc <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	73fb      	strb	r3, [r7, #15]
          break;
 8002b8a:	e005      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ef      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000

08002bbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bca:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0203 	and.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d10d      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d047      	beq.n	8002c92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e044      	b.n	8002c92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d018      	beq.n	8002c42 <RCCEx_PLLSAI2_Config+0x86>
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d825      	bhi.n	8002c60 <RCCEx_PLLSAI2_Config+0xa4>
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d002      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x62>
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d009      	beq.n	8002c30 <RCCEx_PLLSAI2_Config+0x74>
 8002c1c:	e020      	b.n	8002c60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c1e:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11d      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2e:	e01a      	b.n	8002c66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e013      	b.n	8002c6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c4e:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c5e:	e006      	b.n	8002c6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e004      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	4939      	ldr	r1, [pc, #228]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d167      	bne.n	8002d68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a35      	ldr	r2, [pc, #212]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fa12 	bl	80010cc <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002caa:	e009      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cac:	f7fe fa0e 	bl	80010cc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cbe:	e005      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ef      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d14a      	bne.n	8002d68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6892      	ldr	r2, [r2, #8]
 8002ce8:	0211      	lsls	r1, r2, #8
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	0912      	lsrs	r2, r2, #4
 8002cf0:	0452      	lsls	r2, r2, #17
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	491f      	ldr	r1, [pc, #124]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	614b      	str	r3, [r1, #20]
 8002cfa:	e011      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	0211      	lsls	r1, r2, #8
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6912      	ldr	r2, [r2, #16]
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0652      	lsls	r2, r2, #25
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	4916      	ldr	r1, [pc, #88]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe f9ce 	bl	80010cc <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d32:	e009      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d34:	f7fe f9ca 	bl	80010cc <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	73fb      	strb	r3, [r7, #15]
          break;
 8002d46:	e005      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ef      	beq.n	8002d34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e049      	b.n	8002e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd ff68 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fac8 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04f      	b.n	8002ee0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_Base_Start_IT+0x76>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d115      	bne.n	8002eca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d015      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d011      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	e008      	b.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e000      	b.n	8002ede <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	00010007 	.word	0x00010007

08002f08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_TIM_Base_Stop_IT+0x48>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	f240 4344 	movw	r3, #1092	; 0x444
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_Base_Stop_IT+0x48>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01b      	beq.n	8002fca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0202 	mvn.w	r2, #2
 8002f9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f9ad 	bl	8003310 <HAL_TIM_IC_CaptureCallback>
 8002fb6:	e005      	b.n	8002fc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f99f 	bl	80032fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9b0 	bl	8003324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0204 	mvn.w	r2, #4
 8002fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f987 	bl	8003310 <HAL_TIM_IC_CaptureCallback>
 8003002:	e005      	b.n	8003010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f979 	bl	80032fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f98a 	bl	8003324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01b      	beq.n	8003062 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0208 	mvn.w	r2, #8
 8003032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f961 	bl	8003310 <HAL_TIM_IC_CaptureCallback>
 800304e:	e005      	b.n	800305c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f953 	bl	80032fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f964 	bl	8003324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01b      	beq.n	80030ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0210 	mvn.w	r2, #16
 800307e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2208      	movs	r2, #8
 8003084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f93b 	bl	8003310 <HAL_TIM_IC_CaptureCallback>
 800309a:	e005      	b.n	80030a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f92d 	bl	80032fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f93e 	bl	8003324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0201 	mvn.w	r2, #1
 80030ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7fd fd87 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 faf1 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fae9 	bl	80036ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8fd 	bl	8003338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0220 	mvn.w	r2, #32
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fab1 	bl	80036c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_TIM_ConfigClockSource+0x1c>
 8003182:	2302      	movs	r3, #2
 8003184:	e0b6      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x18a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d03e      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xd8>
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	f200 8087 	bhi.w	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	f000 8086 	beq.w	80032e0 <HAL_TIM_ConfigClockSource+0x176>
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d87f      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031da:	2b70      	cmp	r3, #112	; 0x70
 80031dc:	d01a      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xaa>
 80031de:	2b70      	cmp	r3, #112	; 0x70
 80031e0:	d87b      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031e2:	2b60      	cmp	r3, #96	; 0x60
 80031e4:	d050      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0x11e>
 80031e6:	2b60      	cmp	r3, #96	; 0x60
 80031e8:	d877      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031ea:	2b50      	cmp	r3, #80	; 0x50
 80031ec:	d03c      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xfe>
 80031ee:	2b50      	cmp	r3, #80	; 0x50
 80031f0:	d873      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d058      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0x13e>
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d86f      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 80031fa:	2b30      	cmp	r3, #48	; 0x30
 80031fc:	d064      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x15e>
 80031fe:	2b30      	cmp	r3, #48	; 0x30
 8003200:	d86b      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 8003202:	2b20      	cmp	r3, #32
 8003204:	d060      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x15e>
 8003206:	2b20      	cmp	r3, #32
 8003208:	d867      	bhi.n	80032da <HAL_TIM_ConfigClockSource+0x170>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d05c      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x15e>
 800320e:	2b10      	cmp	r3, #16
 8003210:	d05a      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x15e>
 8003212:	e062      	b.n	80032da <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	f000 f9a6 	bl	8003574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003236:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e04f      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	f000 f98f 	bl	8003574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003264:	609a      	str	r2, [r3, #8]
      break;
 8003266:	e03c      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003274:	461a      	mov	r2, r3
 8003276:	f000 f903 	bl	8003480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2150      	movs	r1, #80	; 0x50
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f95c 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 8003286:	e02c      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003294:	461a      	mov	r2, r3
 8003296:	f000 f922 	bl	80034de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2160      	movs	r1, #96	; 0x60
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f94c 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 80032a6:	e01c      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f8e3 	bl	8003480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f93c 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 80032c6:	e00c      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f000 f933 	bl	800353e <TIM_ITRx_SetConfig>
      break;
 80032d8:	e003      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
      break;
 80032de:	e000      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a40      	ldr	r2, [pc, #256]	; (8003460 <TIM_Base_SetConfig+0x114>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <TIM_Base_SetConfig+0x118>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <TIM_Base_SetConfig+0x11c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3b      	ldr	r2, [pc, #236]	; (800346c <TIM_Base_SetConfig+0x120>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <TIM_Base_SetConfig+0x124>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d108      	bne.n	800339e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <TIM_Base_SetConfig+0x114>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d01b      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2c      	ldr	r2, [pc, #176]	; (8003464 <TIM_Base_SetConfig+0x118>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <TIM_Base_SetConfig+0x11c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <TIM_Base_SetConfig+0x120>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <TIM_Base_SetConfig+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <TIM_Base_SetConfig+0x128>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <TIM_Base_SetConfig+0x12c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <TIM_Base_SetConfig+0x130>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a10      	ldr	r2, [pc, #64]	; (8003460 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a11      	ldr	r2, [pc, #68]	; (8003474 <TIM_Base_SetConfig+0x128>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <TIM_Base_SetConfig+0x12c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0xf8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a0f      	ldr	r2, [pc, #60]	; (800347c <TIM_Base_SetConfig+0x130>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d103      	bne.n	800344c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	615a      	str	r2, [r3, #20]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 030a 	bic.w	r3, r3, #10
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034de:	b480      	push	{r7}
 80034e0:	b087      	sub	sp, #28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f023 0210 	bic.w	r2, r3, #16
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	031b      	lsls	r3, r3, #12
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800351a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	f043 0307 	orr.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	431a      	orrs	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e068      	b.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d018      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10c      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4313      	orrs	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40014000 	.word	0x40014000

080036c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e040      	b.n	8003794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fae8 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fc34 	bl	8003fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f979 	bl	8003a44 <UART_SetConfig>
 8003752:	4603      	mov	r3, r0
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e01b      	b.n	8003794 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800376a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fcb3 	bl	80040f8 <UART_CheckIdleState>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d178      	bne.n	80038a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Transmit+0x24>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e071      	b.n	80038a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2221      	movs	r2, #33	; 0x21
 80037d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d2:	f7fd fc7b 	bl	80010cc <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x68>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800380c:	e030      	b.n	8003870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fd15 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e03c      	b.n	80038a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003840:	b292      	uxth	r2, r2
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	3302      	adds	r3, #2
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e008      	b.n	800385e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b292      	uxth	r2, r2
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1c8      	bne.n	800380e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fcde 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e005      	b.n	80038a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	f040 80b6 	bne.w	8003a38 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_UART_Receive+0x28>
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0ae      	b.n	8003a3a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2222      	movs	r2, #34	; 0x22
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f2:	f7fd fbeb 	bl	80010cc <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003910:	d10e      	bne.n	8003930 <HAL_UART_Receive+0x80>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_UART_Receive+0x76>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003924:	e02d      	b.n	8003982 <HAL_UART_Receive+0xd2>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	; 0xff
 800392a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800392e:	e028      	b.n	8003982 <HAL_UART_Receive+0xd2>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_UART_Receive+0xa4>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_UART_Receive+0x9a>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	22ff      	movs	r2, #255	; 0xff
 8003944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003948:	e01b      	b.n	8003982 <HAL_UART_Receive+0xd2>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	227f      	movs	r2, #127	; 0x7f
 800394e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003952:	e016      	b.n	8003982 <HAL_UART_Receive+0xd2>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395c:	d10d      	bne.n	800397a <HAL_UART_Receive+0xca>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_UART_Receive+0xc0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	227f      	movs	r2, #127	; 0x7f
 800396a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800396e:	e008      	b.n	8003982 <HAL_UART_Receive+0xd2>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	223f      	movs	r2, #63	; 0x3f
 8003974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003978:	e003      	b.n	8003982 <HAL_UART_Receive+0xd2>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003988:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003992:	d108      	bne.n	80039a6 <HAL_UART_Receive+0xf6>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e003      	b.n	80039ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039ae:	e037      	b.n	8003a20 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2120      	movs	r1, #32
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fc44 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e033      	b.n	8003a3a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10c      	bne.n	80039f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039de:	b29a      	uxth	r2, r3
 80039e0:	8a7b      	ldrh	r3, [r7, #18]
 80039e2:	4013      	ands	r3, r2
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e00d      	b.n	8003a0e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	8a7b      	ldrh	r3, [r7, #18]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1c1      	bne.n	80039b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b08a      	sub	sp, #40	; 0x28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4ba4      	ldr	r3, [pc, #656]	; (8003d04 <UART_SetConfig+0x2c0>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a99      	ldr	r2, [pc, #612]	; (8003d08 <UART_SetConfig+0x2c4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	4313      	orrs	r3, r2
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a90      	ldr	r2, [pc, #576]	; (8003d0c <UART_SetConfig+0x2c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d126      	bne.n	8003b1c <UART_SetConfig+0xd8>
 8003ace:	4b90      	ldr	r3, [pc, #576]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d81b      	bhi.n	8003b14 <UART_SetConfig+0xd0>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0xa0>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b05 	.word	0x08003b05
 8003aec:	08003afd 	.word	0x08003afd
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e116      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e112      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e10e      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e10a      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e106      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7c      	ldr	r2, [pc, #496]	; (8003d14 <UART_SetConfig+0x2d0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d138      	bne.n	8003b98 <UART_SetConfig+0x154>
 8003b26:	4b7a      	ldr	r3, [pc, #488]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b0c      	cmp	r3, #12
 8003b32:	d82d      	bhi.n	8003b90 <UART_SetConfig+0x14c>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0xf8>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003b91 	.word	0x08003b91
 8003b44:	08003b91 	.word	0x08003b91
 8003b48:	08003b91 	.word	0x08003b91
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
 8003b58:	08003b91 	.word	0x08003b91
 8003b5c:	08003b79 	.word	0x08003b79
 8003b60:	08003b91 	.word	0x08003b91
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003b89 	.word	0x08003b89
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e0d8      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e0d4      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b80:	2304      	movs	r3, #4
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e0d0      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e0cc      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b90:	2310      	movs	r3, #16
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e0c8      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d125      	bne.n	8003bee <UART_SetConfig+0x1aa>
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d016      	beq.n	8003bde <UART_SetConfig+0x19a>
 8003bb0:	2b30      	cmp	r3, #48	; 0x30
 8003bb2:	d818      	bhi.n	8003be6 <UART_SetConfig+0x1a2>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d00a      	beq.n	8003bce <UART_SetConfig+0x18a>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d814      	bhi.n	8003be6 <UART_SetConfig+0x1a2>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <UART_SetConfig+0x182>
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d008      	beq.n	8003bd6 <UART_SetConfig+0x192>
 8003bc4:	e00f      	b.n	8003be6 <UART_SetConfig+0x1a2>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bcc:	e0ad      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e0a9      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bdc:	e0a5      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003bde:	2308      	movs	r3, #8
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e0a1      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003be6:	2310      	movs	r3, #16
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e09d      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4a      	ldr	r2, [pc, #296]	; (8003d1c <UART_SetConfig+0x2d8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d125      	bne.n	8003c44 <UART_SetConfig+0x200>
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c02:	2bc0      	cmp	r3, #192	; 0xc0
 8003c04:	d016      	beq.n	8003c34 <UART_SetConfig+0x1f0>
 8003c06:	2bc0      	cmp	r3, #192	; 0xc0
 8003c08:	d818      	bhi.n	8003c3c <UART_SetConfig+0x1f8>
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d00a      	beq.n	8003c24 <UART_SetConfig+0x1e0>
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d814      	bhi.n	8003c3c <UART_SetConfig+0x1f8>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <UART_SetConfig+0x1d8>
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d008      	beq.n	8003c2c <UART_SetConfig+0x1e8>
 8003c1a:	e00f      	b.n	8003c3c <UART_SetConfig+0x1f8>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e082      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e07e      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e07a      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c34:	2308      	movs	r3, #8
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e076      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e072      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <UART_SetConfig+0x2dc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d12a      	bne.n	8003ca4 <UART_SetConfig+0x260>
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5c:	d01a      	beq.n	8003c94 <UART_SetConfig+0x250>
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c62:	d81b      	bhi.n	8003c9c <UART_SetConfig+0x258>
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c68:	d00c      	beq.n	8003c84 <UART_SetConfig+0x240>
 8003c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6e:	d815      	bhi.n	8003c9c <UART_SetConfig+0x258>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <UART_SetConfig+0x238>
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c78:	d008      	beq.n	8003c8c <UART_SetConfig+0x248>
 8003c7a:	e00f      	b.n	8003c9c <UART_SetConfig+0x258>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c82:	e052      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8a:	e04e      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c92:	e04a      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9a:	e046      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e042      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <UART_SetConfig+0x2c4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d13a      	bne.n	8003d24 <UART_SetConfig+0x2e0>
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cbc:	d01a      	beq.n	8003cf4 <UART_SetConfig+0x2b0>
 8003cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc2:	d81b      	bhi.n	8003cfc <UART_SetConfig+0x2b8>
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d00c      	beq.n	8003ce4 <UART_SetConfig+0x2a0>
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d815      	bhi.n	8003cfc <UART_SetConfig+0x2b8>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <UART_SetConfig+0x298>
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d008      	beq.n	8003cec <UART_SetConfig+0x2a8>
 8003cda:	e00f      	b.n	8003cfc <UART_SetConfig+0x2b8>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e022      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e01e      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e01a      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e016      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e012      	b.n	8003d2a <UART_SetConfig+0x2e6>
 8003d04:	efff69f3 	.word	0xefff69f3
 8003d08:	40008000 	.word	0x40008000
 8003d0c:	40013800 	.word	0x40013800
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40004400 	.word	0x40004400
 8003d18:	40004800 	.word	0x40004800
 8003d1c:	40004c00 	.word	0x40004c00
 8003d20:	40005000 	.word	0x40005000
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a9f      	ldr	r2, [pc, #636]	; (8003fac <UART_SetConfig+0x568>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d17a      	bne.n	8003e2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d824      	bhi.n	8003d86 <UART_SetConfig+0x342>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0x300>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d87 	.word	0x08003d87
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003d77 	.word	0x08003d77
 8003d58:	08003d87 	.word	0x08003d87
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d87 	.word	0x08003d87
 8003d64:	08003d7f 	.word	0x08003d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fabe 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61f8      	str	r0, [r7, #28]
        break;
 8003d6e:	e010      	b.n	8003d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d70:	4b8f      	ldr	r3, [pc, #572]	; (8003fb0 <UART_SetConfig+0x56c>)
 8003d72:	61fb      	str	r3, [r7, #28]
        break;
 8003d74:	e00d      	b.n	8003d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d76:	f7fe fa1f 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003d7a:	61f8      	str	r0, [r7, #28]
        break;
 8003d7c:	e009      	b.n	8003d92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	61fb      	str	r3, [r7, #28]
        break;
 8003d84:	e005      	b.n	8003d92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80fb 	beq.w	8003f90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d305      	bcc.n	8003db6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d903      	bls.n	8003dbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dbc:	e0e8      	b.n	8003f90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	4615      	mov	r5, r2
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	022b      	lsls	r3, r5, #8
 8003dd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dd4:	0222      	lsls	r2, r4, #8
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6849      	ldr	r1, [r1, #4]
 8003dda:	0849      	lsrs	r1, r1, #1
 8003ddc:	2000      	movs	r0, #0
 8003dde:	4688      	mov	r8, r1
 8003de0:	4681      	mov	r9, r0
 8003de2:	eb12 0a08 	adds.w	sl, r2, r8
 8003de6:	eb43 0b09 	adc.w	fp, r3, r9
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003df8:	4650      	mov	r0, sl
 8003dfa:	4659      	mov	r1, fp
 8003dfc:	f7fc fa48 	bl	8000290 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0e:	d308      	bcc.n	8003e22 <UART_SetConfig+0x3de>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e16:	d204      	bcs.n	8003e22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e0b6      	b.n	8003f90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e28:	e0b2      	b.n	8003f90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e32:	d15e      	bne.n	8003ef2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d828      	bhi.n	8003e8e <UART_SetConfig+0x44a>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x400>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe fa3e 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	61f8      	str	r0, [r7, #28]
        break;
 8003e6e:	e014      	b.n	8003e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe fa50 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003e74:	61f8      	str	r0, [r7, #28]
        break;
 8003e76:	e010      	b.n	8003e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <UART_SetConfig+0x56c>)
 8003e7a:	61fb      	str	r3, [r7, #28]
        break;
 8003e7c:	e00d      	b.n	8003e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe f99b 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003e82:	61f8      	str	r0, [r7, #28]
        break;
 8003e84:	e009      	b.n	8003e9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	61fb      	str	r3, [r7, #28]
        break;
 8003e8c:	e005      	b.n	8003e9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d077      	beq.n	8003f90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005a      	lsls	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d916      	bls.n	8003eea <UART_SetConfig+0x4a6>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d212      	bcs.n	8003eea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f023 030f 	bic.w	r3, r3, #15
 8003ecc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	8afa      	ldrh	r2, [r7, #22]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e052      	b.n	8003f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef0:	e04e      	b.n	8003f90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d827      	bhi.n	8003f4a <UART_SetConfig+0x506>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x4bc>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe f9e0 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e014      	b.n	8003f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe f9f2 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003f30:	61f8      	str	r0, [r7, #28]
        break;
 8003f32:	e010      	b.n	8003f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <UART_SetConfig+0x56c>)
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e00d      	b.n	8003f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fe f93d 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003f3e:	61f8      	str	r0, [r7, #28]
        break;
 8003f40:	e009      	b.n	8003f56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	61fb      	str	r3, [r7, #28]
        break;
 8003f48:	e005      	b.n	8003f56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f54:	bf00      	nop
    }

    if (pclk != 0U)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d019      	beq.n	8003f90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	085a      	lsrs	r2, r3, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	441a      	add	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d909      	bls.n	8003f8a <UART_SetConfig+0x546>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7c:	d205      	bcs.n	8003f8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	e002      	b.n	8003f90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	40008000 	.word	0x40008000
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01a      	beq.n	80040ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d10a      	bne.n	80040ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b098      	sub	sp, #96	; 0x60
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004108:	f7fc ffe0 	bl	80010cc <HAL_GetTick>
 800410c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d12e      	bne.n	800417a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f88c 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	653b      	str	r3, [r7, #80]	; 0x50
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800415a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e062      	b.n	8004240 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d149      	bne.n	800421c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	2200      	movs	r2, #0
 8004192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f856 	bl	8004248 <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03c      	beq.n	800421c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	623b      	str	r3, [r7, #32]
   return(result);
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f4:	61fa      	str	r2, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e011      	b.n	8004240 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3758      	adds	r7, #88	; 0x58
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004258:	e049      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d045      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fc ff33 	bl	80010cc <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <UART_WaitOnFlagUntilTimeout+0x30>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e048      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d031      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d110      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2208      	movs	r2, #8
 800429e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f838 	bl	8004316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2208      	movs	r2, #8
 80042aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e029      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	d111      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f81e 	bl	8004316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0a6      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004316:	b480      	push	{r7}
 8004318:	b095      	sub	sp, #84	; 0x54
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433c:	643b      	str	r3, [r7, #64]	; 0x40
 800433e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d118      	bne.n	80043be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	60bb      	str	r3, [r7, #8]
   return(result);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6979      	ldr	r1, [r7, #20]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	613b      	str	r3, [r7, #16]
   return(result);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043d2:	bf00      	nop
 80043d4:	3754      	adds	r7, #84	; 0x54
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <std>:
 80043e0:	2300      	movs	r3, #0
 80043e2:	b510      	push	{r4, lr}
 80043e4:	4604      	mov	r4, r0
 80043e6:	e9c0 3300 	strd	r3, r3, [r0]
 80043ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ee:	6083      	str	r3, [r0, #8]
 80043f0:	8181      	strh	r1, [r0, #12]
 80043f2:	6643      	str	r3, [r0, #100]	; 0x64
 80043f4:	81c2      	strh	r2, [r0, #14]
 80043f6:	6183      	str	r3, [r0, #24]
 80043f8:	4619      	mov	r1, r3
 80043fa:	2208      	movs	r2, #8
 80043fc:	305c      	adds	r0, #92	; 0x5c
 80043fe:	f000 f9f7 	bl	80047f0 <memset>
 8004402:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <std+0x58>)
 8004404:	6263      	str	r3, [r4, #36]	; 0x24
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <std+0x5c>)
 8004408:	62a3      	str	r3, [r4, #40]	; 0x28
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <std+0x60>)
 800440c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <std+0x64>)
 8004410:	6323      	str	r3, [r4, #48]	; 0x30
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <std+0x68>)
 8004414:	6224      	str	r4, [r4, #32]
 8004416:	429c      	cmp	r4, r3
 8004418:	d006      	beq.n	8004428 <std+0x48>
 800441a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800441e:	4294      	cmp	r4, r2
 8004420:	d002      	beq.n	8004428 <std+0x48>
 8004422:	33d0      	adds	r3, #208	; 0xd0
 8004424:	429c      	cmp	r4, r3
 8004426:	d105      	bne.n	8004434 <std+0x54>
 8004428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f000 ba56 	b.w	80048e0 <__retarget_lock_init_recursive>
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop
 8004438:	08004641 	.word	0x08004641
 800443c:	08004663 	.word	0x08004663
 8004440:	0800469b 	.word	0x0800469b
 8004444:	080046bf 	.word	0x080046bf
 8004448:	20000208 	.word	0x20000208

0800444c <stdio_exit_handler>:
 800444c:	4a02      	ldr	r2, [pc, #8]	; (8004458 <stdio_exit_handler+0xc>)
 800444e:	4903      	ldr	r1, [pc, #12]	; (800445c <stdio_exit_handler+0x10>)
 8004450:	4803      	ldr	r0, [pc, #12]	; (8004460 <stdio_exit_handler+0x14>)
 8004452:	f000 b869 	b.w	8004528 <_fwalk_sglue>
 8004456:	bf00      	nop
 8004458:	20000010 	.word	0x20000010
 800445c:	0800518d 	.word	0x0800518d
 8004460:	2000001c 	.word	0x2000001c

08004464 <cleanup_stdio>:
 8004464:	6841      	ldr	r1, [r0, #4]
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <cleanup_stdio+0x34>)
 8004468:	4299      	cmp	r1, r3
 800446a:	b510      	push	{r4, lr}
 800446c:	4604      	mov	r4, r0
 800446e:	d001      	beq.n	8004474 <cleanup_stdio+0x10>
 8004470:	f000 fe8c 	bl	800518c <_fflush_r>
 8004474:	68a1      	ldr	r1, [r4, #8]
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <cleanup_stdio+0x38>)
 8004478:	4299      	cmp	r1, r3
 800447a:	d002      	beq.n	8004482 <cleanup_stdio+0x1e>
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fe85 	bl	800518c <_fflush_r>
 8004482:	68e1      	ldr	r1, [r4, #12]
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <cleanup_stdio+0x3c>)
 8004486:	4299      	cmp	r1, r3
 8004488:	d004      	beq.n	8004494 <cleanup_stdio+0x30>
 800448a:	4620      	mov	r0, r4
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	f000 be7c 	b.w	800518c <_fflush_r>
 8004494:	bd10      	pop	{r4, pc}
 8004496:	bf00      	nop
 8004498:	20000208 	.word	0x20000208
 800449c:	20000270 	.word	0x20000270
 80044a0:	200002d8 	.word	0x200002d8

080044a4 <global_stdio_init.part.0>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <global_stdio_init.part.0+0x30>)
 80044a8:	4c0b      	ldr	r4, [pc, #44]	; (80044d8 <global_stdio_init.part.0+0x34>)
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <global_stdio_init.part.0+0x38>)
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	4620      	mov	r0, r4
 80044b0:	2200      	movs	r2, #0
 80044b2:	2104      	movs	r1, #4
 80044b4:	f7ff ff94 	bl	80043e0 <std>
 80044b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044bc:	2201      	movs	r2, #1
 80044be:	2109      	movs	r1, #9
 80044c0:	f7ff ff8e 	bl	80043e0 <std>
 80044c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044c8:	2202      	movs	r2, #2
 80044ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ce:	2112      	movs	r1, #18
 80044d0:	f7ff bf86 	b.w	80043e0 <std>
 80044d4:	20000340 	.word	0x20000340
 80044d8:	20000208 	.word	0x20000208
 80044dc:	0800444d 	.word	0x0800444d

080044e0 <__sfp_lock_acquire>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__sfp_lock_acquire+0x8>)
 80044e2:	f000 b9fe 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	20000349 	.word	0x20000349

080044ec <__sfp_lock_release>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__sfp_lock_release+0x8>)
 80044ee:	f000 b9f9 	b.w	80048e4 <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	20000349 	.word	0x20000349

080044f8 <__sinit>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	4604      	mov	r4, r0
 80044fc:	f7ff fff0 	bl	80044e0 <__sfp_lock_acquire>
 8004500:	6a23      	ldr	r3, [r4, #32]
 8004502:	b11b      	cbz	r3, 800450c <__sinit+0x14>
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f7ff bff0 	b.w	80044ec <__sfp_lock_release>
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__sinit+0x28>)
 800450e:	6223      	str	r3, [r4, #32]
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <__sinit+0x2c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f5      	bne.n	8004504 <__sinit+0xc>
 8004518:	f7ff ffc4 	bl	80044a4 <global_stdio_init.part.0>
 800451c:	e7f2      	b.n	8004504 <__sinit+0xc>
 800451e:	bf00      	nop
 8004520:	08004465 	.word	0x08004465
 8004524:	20000340 	.word	0x20000340

08004528 <_fwalk_sglue>:
 8004528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800452c:	4607      	mov	r7, r0
 800452e:	4688      	mov	r8, r1
 8004530:	4614      	mov	r4, r2
 8004532:	2600      	movs	r6, #0
 8004534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004538:	f1b9 0901 	subs.w	r9, r9, #1
 800453c:	d505      	bpl.n	800454a <_fwalk_sglue+0x22>
 800453e:	6824      	ldr	r4, [r4, #0]
 8004540:	2c00      	cmp	r4, #0
 8004542:	d1f7      	bne.n	8004534 <_fwalk_sglue+0xc>
 8004544:	4630      	mov	r0, r6
 8004546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800454a:	89ab      	ldrh	r3, [r5, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d907      	bls.n	8004560 <_fwalk_sglue+0x38>
 8004550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004554:	3301      	adds	r3, #1
 8004556:	d003      	beq.n	8004560 <_fwalk_sglue+0x38>
 8004558:	4629      	mov	r1, r5
 800455a:	4638      	mov	r0, r7
 800455c:	47c0      	blx	r8
 800455e:	4306      	orrs	r6, r0
 8004560:	3568      	adds	r5, #104	; 0x68
 8004562:	e7e9      	b.n	8004538 <_fwalk_sglue+0x10>

08004564 <iprintf>:
 8004564:	b40f      	push	{r0, r1, r2, r3}
 8004566:	b507      	push	{r0, r1, r2, lr}
 8004568:	4906      	ldr	r1, [pc, #24]	; (8004584 <iprintf+0x20>)
 800456a:	ab04      	add	r3, sp, #16
 800456c:	6808      	ldr	r0, [r1, #0]
 800456e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004572:	6881      	ldr	r1, [r0, #8]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	f000 fad9 	bl	8004b2c <_vfiprintf_r>
 800457a:	b003      	add	sp, #12
 800457c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004580:	b004      	add	sp, #16
 8004582:	4770      	bx	lr
 8004584:	20000068 	.word	0x20000068

08004588 <_puts_r>:
 8004588:	6a03      	ldr	r3, [r0, #32]
 800458a:	b570      	push	{r4, r5, r6, lr}
 800458c:	6884      	ldr	r4, [r0, #8]
 800458e:	4605      	mov	r5, r0
 8004590:	460e      	mov	r6, r1
 8004592:	b90b      	cbnz	r3, 8004598 <_puts_r+0x10>
 8004594:	f7ff ffb0 	bl	80044f8 <__sinit>
 8004598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800459a:	07db      	lsls	r3, r3, #31
 800459c:	d405      	bmi.n	80045aa <_puts_r+0x22>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	0598      	lsls	r0, r3, #22
 80045a2:	d402      	bmi.n	80045aa <_puts_r+0x22>
 80045a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045a6:	f000 f99c 	bl	80048e2 <__retarget_lock_acquire_recursive>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	0719      	lsls	r1, r3, #28
 80045ae:	d513      	bpl.n	80045d8 <_puts_r+0x50>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b18b      	cbz	r3, 80045d8 <_puts_r+0x50>
 80045b4:	3e01      	subs	r6, #1
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045bc:	3b01      	subs	r3, #1
 80045be:	60a3      	str	r3, [r4, #8]
 80045c0:	b9e9      	cbnz	r1, 80045fe <_puts_r+0x76>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da2e      	bge.n	8004624 <_puts_r+0x9c>
 80045c6:	4622      	mov	r2, r4
 80045c8:	210a      	movs	r1, #10
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f87b 	bl	80046c6 <__swbuf_r>
 80045d0:	3001      	adds	r0, #1
 80045d2:	d007      	beq.n	80045e4 <_puts_r+0x5c>
 80045d4:	250a      	movs	r5, #10
 80045d6:	e007      	b.n	80045e8 <_puts_r+0x60>
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f8b0 	bl	8004740 <__swsetup_r>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d0e7      	beq.n	80045b4 <_puts_r+0x2c>
 80045e4:	f04f 35ff 	mov.w	r5, #4294967295
 80045e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ea:	07da      	lsls	r2, r3, #31
 80045ec:	d405      	bmi.n	80045fa <_puts_r+0x72>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	059b      	lsls	r3, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_puts_r+0x72>
 80045f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045f6:	f000 f975 	bl	80048e4 <__retarget_lock_release_recursive>
 80045fa:	4628      	mov	r0, r5
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da04      	bge.n	800460c <_puts_r+0x84>
 8004602:	69a2      	ldr	r2, [r4, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	dc06      	bgt.n	8004616 <_puts_r+0x8e>
 8004608:	290a      	cmp	r1, #10
 800460a:	d004      	beq.n	8004616 <_puts_r+0x8e>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	7019      	strb	r1, [r3, #0]
 8004614:	e7cf      	b.n	80045b6 <_puts_r+0x2e>
 8004616:	4622      	mov	r2, r4
 8004618:	4628      	mov	r0, r5
 800461a:	f000 f854 	bl	80046c6 <__swbuf_r>
 800461e:	3001      	adds	r0, #1
 8004620:	d1c9      	bne.n	80045b6 <_puts_r+0x2e>
 8004622:	e7df      	b.n	80045e4 <_puts_r+0x5c>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	250a      	movs	r5, #10
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	6022      	str	r2, [r4, #0]
 800462c:	701d      	strb	r5, [r3, #0]
 800462e:	e7db      	b.n	80045e8 <_puts_r+0x60>

08004630 <puts>:
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <puts+0xc>)
 8004632:	4601      	mov	r1, r0
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f7ff bfa7 	b.w	8004588 <_puts_r>
 800463a:	bf00      	nop
 800463c:	20000068 	.word	0x20000068

08004640 <__sread>:
 8004640:	b510      	push	{r4, lr}
 8004642:	460c      	mov	r4, r1
 8004644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004648:	f000 f8fc 	bl	8004844 <_read_r>
 800464c:	2800      	cmp	r0, #0
 800464e:	bfab      	itete	ge
 8004650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004652:	89a3      	ldrhlt	r3, [r4, #12]
 8004654:	181b      	addge	r3, r3, r0
 8004656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800465a:	bfac      	ite	ge
 800465c:	6563      	strge	r3, [r4, #84]	; 0x54
 800465e:	81a3      	strhlt	r3, [r4, #12]
 8004660:	bd10      	pop	{r4, pc}

08004662 <__swrite>:
 8004662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004666:	461f      	mov	r7, r3
 8004668:	898b      	ldrh	r3, [r1, #12]
 800466a:	05db      	lsls	r3, r3, #23
 800466c:	4605      	mov	r5, r0
 800466e:	460c      	mov	r4, r1
 8004670:	4616      	mov	r6, r2
 8004672:	d505      	bpl.n	8004680 <__swrite+0x1e>
 8004674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004678:	2302      	movs	r3, #2
 800467a:	2200      	movs	r2, #0
 800467c:	f000 f8d0 	bl	8004820 <_lseek_r>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	4632      	mov	r2, r6
 800468e:	463b      	mov	r3, r7
 8004690:	4628      	mov	r0, r5
 8004692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004696:	f000 b8e7 	b.w	8004868 <_write_r>

0800469a <__sseek>:
 800469a:	b510      	push	{r4, lr}
 800469c:	460c      	mov	r4, r1
 800469e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a2:	f000 f8bd 	bl	8004820 <_lseek_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	bf15      	itete	ne
 80046ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046b6:	81a3      	strheq	r3, [r4, #12]
 80046b8:	bf18      	it	ne
 80046ba:	81a3      	strhne	r3, [r4, #12]
 80046bc:	bd10      	pop	{r4, pc}

080046be <__sclose>:
 80046be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c2:	f000 b89d 	b.w	8004800 <_close_r>

080046c6 <__swbuf_r>:
 80046c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c8:	460e      	mov	r6, r1
 80046ca:	4614      	mov	r4, r2
 80046cc:	4605      	mov	r5, r0
 80046ce:	b118      	cbz	r0, 80046d8 <__swbuf_r+0x12>
 80046d0:	6a03      	ldr	r3, [r0, #32]
 80046d2:	b90b      	cbnz	r3, 80046d8 <__swbuf_r+0x12>
 80046d4:	f7ff ff10 	bl	80044f8 <__sinit>
 80046d8:	69a3      	ldr	r3, [r4, #24]
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	071a      	lsls	r2, r3, #28
 80046e0:	d525      	bpl.n	800472e <__swbuf_r+0x68>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	b31b      	cbz	r3, 800472e <__swbuf_r+0x68>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	1a98      	subs	r0, r3, r2
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	b2f6      	uxtb	r6, r6
 80046f0:	4283      	cmp	r3, r0
 80046f2:	4637      	mov	r7, r6
 80046f4:	dc04      	bgt.n	8004700 <__swbuf_r+0x3a>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fd47 	bl	800518c <_fflush_r>
 80046fe:	b9e0      	cbnz	r0, 800473a <__swbuf_r+0x74>
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	3b01      	subs	r3, #1
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	701e      	strb	r6, [r3, #0]
 800470e:	6962      	ldr	r2, [r4, #20]
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	429a      	cmp	r2, r3
 8004714:	d004      	beq.n	8004720 <__swbuf_r+0x5a>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	07db      	lsls	r3, r3, #31
 800471a:	d506      	bpl.n	800472a <__swbuf_r+0x64>
 800471c:	2e0a      	cmp	r6, #10
 800471e:	d104      	bne.n	800472a <__swbuf_r+0x64>
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 fd32 	bl	800518c <_fflush_r>
 8004728:	b938      	cbnz	r0, 800473a <__swbuf_r+0x74>
 800472a:	4638      	mov	r0, r7
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f805 	bl	8004740 <__swsetup_r>
 8004736:	2800      	cmp	r0, #0
 8004738:	d0d5      	beq.n	80046e6 <__swbuf_r+0x20>
 800473a:	f04f 37ff 	mov.w	r7, #4294967295
 800473e:	e7f4      	b.n	800472a <__swbuf_r+0x64>

08004740 <__swsetup_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <__swsetup_r+0xac>)
 8004744:	4605      	mov	r5, r0
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	460c      	mov	r4, r1
 800474a:	b118      	cbz	r0, 8004754 <__swsetup_r+0x14>
 800474c:	6a03      	ldr	r3, [r0, #32]
 800474e:	b90b      	cbnz	r3, 8004754 <__swsetup_r+0x14>
 8004750:	f7ff fed2 	bl	80044f8 <__sinit>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800475a:	0718      	lsls	r0, r3, #28
 800475c:	d422      	bmi.n	80047a4 <__swsetup_r+0x64>
 800475e:	06d9      	lsls	r1, r3, #27
 8004760:	d407      	bmi.n	8004772 <__swsetup_r+0x32>
 8004762:	2309      	movs	r3, #9
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	e034      	b.n	80047dc <__swsetup_r+0x9c>
 8004772:	0758      	lsls	r0, r3, #29
 8004774:	d512      	bpl.n	800479c <__swsetup_r+0x5c>
 8004776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004778:	b141      	cbz	r1, 800478c <__swsetup_r+0x4c>
 800477a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800477e:	4299      	cmp	r1, r3
 8004780:	d002      	beq.n	8004788 <__swsetup_r+0x48>
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f8b0 	bl	80048e8 <_free_r>
 8004788:	2300      	movs	r3, #0
 800478a:	6363      	str	r3, [r4, #52]	; 0x34
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	2300      	movs	r3, #0
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	b94b      	cbnz	r3, 80047bc <__swsetup_r+0x7c>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b2:	d003      	beq.n	80047bc <__swsetup_r+0x7c>
 80047b4:	4621      	mov	r1, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fd36 	bl	8005228 <__smakebuf_r>
 80047bc:	89a0      	ldrh	r0, [r4, #12]
 80047be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c2:	f010 0301 	ands.w	r3, r0, #1
 80047c6:	d00a      	beq.n	80047de <__swsetup_r+0x9e>
 80047c8:	2300      	movs	r3, #0
 80047ca:	60a3      	str	r3, [r4, #8]
 80047cc:	6963      	ldr	r3, [r4, #20]
 80047ce:	425b      	negs	r3, r3
 80047d0:	61a3      	str	r3, [r4, #24]
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	b943      	cbnz	r3, 80047e8 <__swsetup_r+0xa8>
 80047d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047da:	d1c4      	bne.n	8004766 <__swsetup_r+0x26>
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	0781      	lsls	r1, r0, #30
 80047e0:	bf58      	it	pl
 80047e2:	6963      	ldrpl	r3, [r4, #20]
 80047e4:	60a3      	str	r3, [r4, #8]
 80047e6:	e7f4      	b.n	80047d2 <__swsetup_r+0x92>
 80047e8:	2000      	movs	r0, #0
 80047ea:	e7f7      	b.n	80047dc <__swsetup_r+0x9c>
 80047ec:	20000068 	.word	0x20000068

080047f0 <memset>:
 80047f0:	4402      	add	r2, r0
 80047f2:	4603      	mov	r3, r0
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d100      	bne.n	80047fa <memset+0xa>
 80047f8:	4770      	bx	lr
 80047fa:	f803 1b01 	strb.w	r1, [r3], #1
 80047fe:	e7f9      	b.n	80047f4 <memset+0x4>

08004800 <_close_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d06      	ldr	r5, [pc, #24]	; (800481c <_close_r+0x1c>)
 8004804:	2300      	movs	r3, #0
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	f7fc fb47 	bl	8000e9e <_close>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_close_r+0x1a>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_close_r+0x1a>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000344 	.word	0x20000344

08004820 <_lseek_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	; (8004840 <_lseek_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc fb5c 	bl	8000eec <_lseek>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_lseek_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_lseek_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000344 	.word	0x20000344

08004844 <_read_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d07      	ldr	r5, [pc, #28]	; (8004864 <_read_r+0x20>)
 8004848:	4604      	mov	r4, r0
 800484a:	4608      	mov	r0, r1
 800484c:	4611      	mov	r1, r2
 800484e:	2200      	movs	r2, #0
 8004850:	602a      	str	r2, [r5, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7fc faea 	bl	8000e2c <_read>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_read_r+0x1e>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_read_r+0x1e>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	20000344 	.word	0x20000344

08004868 <_write_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d07      	ldr	r5, [pc, #28]	; (8004888 <_write_r+0x20>)
 800486c:	4604      	mov	r4, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc faf5 	bl	8000e66 <_write>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_write_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_write_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	20000344 	.word	0x20000344

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000068 	.word	0x20000068

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	; (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	; (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	; (80048dc <__libc_init_array+0x44>)
 80048ac:	f000 fd2a 	bl	8005304 <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	080053ec 	.word	0x080053ec
 80048d4:	080053ec 	.word	0x080053ec
 80048d8:	080053ec 	.word	0x080053ec
 80048dc:	080053f0 	.word	0x080053f0

080048e0 <__retarget_lock_init_recursive>:
 80048e0:	4770      	bx	lr

080048e2 <__retarget_lock_acquire_recursive>:
 80048e2:	4770      	bx	lr

080048e4 <__retarget_lock_release_recursive>:
 80048e4:	4770      	bx	lr
	...

080048e8 <_free_r>:
 80048e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ea:	2900      	cmp	r1, #0
 80048ec:	d044      	beq.n	8004978 <_free_r+0x90>
 80048ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f2:	9001      	str	r0, [sp, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f1a1 0404 	sub.w	r4, r1, #4
 80048fa:	bfb8      	it	lt
 80048fc:	18e4      	addlt	r4, r4, r3
 80048fe:	f000 f8df 	bl	8004ac0 <__malloc_lock>
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <_free_r+0x94>)
 8004904:	9801      	ldr	r0, [sp, #4]
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	b933      	cbnz	r3, 8004918 <_free_r+0x30>
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	6014      	str	r4, [r2, #0]
 800490e:	b003      	add	sp, #12
 8004910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004914:	f000 b8da 	b.w	8004acc <__malloc_unlock>
 8004918:	42a3      	cmp	r3, r4
 800491a:	d908      	bls.n	800492e <_free_r+0x46>
 800491c:	6825      	ldr	r5, [r4, #0]
 800491e:	1961      	adds	r1, r4, r5
 8004920:	428b      	cmp	r3, r1
 8004922:	bf01      	itttt	eq
 8004924:	6819      	ldreq	r1, [r3, #0]
 8004926:	685b      	ldreq	r3, [r3, #4]
 8004928:	1949      	addeq	r1, r1, r5
 800492a:	6021      	streq	r1, [r4, #0]
 800492c:	e7ed      	b.n	800490a <_free_r+0x22>
 800492e:	461a      	mov	r2, r3
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b10b      	cbz	r3, 8004938 <_free_r+0x50>
 8004934:	42a3      	cmp	r3, r4
 8004936:	d9fa      	bls.n	800492e <_free_r+0x46>
 8004938:	6811      	ldr	r1, [r2, #0]
 800493a:	1855      	adds	r5, r2, r1
 800493c:	42a5      	cmp	r5, r4
 800493e:	d10b      	bne.n	8004958 <_free_r+0x70>
 8004940:	6824      	ldr	r4, [r4, #0]
 8004942:	4421      	add	r1, r4
 8004944:	1854      	adds	r4, r2, r1
 8004946:	42a3      	cmp	r3, r4
 8004948:	6011      	str	r1, [r2, #0]
 800494a:	d1e0      	bne.n	800490e <_free_r+0x26>
 800494c:	681c      	ldr	r4, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	6053      	str	r3, [r2, #4]
 8004952:	440c      	add	r4, r1
 8004954:	6014      	str	r4, [r2, #0]
 8004956:	e7da      	b.n	800490e <_free_r+0x26>
 8004958:	d902      	bls.n	8004960 <_free_r+0x78>
 800495a:	230c      	movs	r3, #12
 800495c:	6003      	str	r3, [r0, #0]
 800495e:	e7d6      	b.n	800490e <_free_r+0x26>
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	1961      	adds	r1, r4, r5
 8004964:	428b      	cmp	r3, r1
 8004966:	bf04      	itt	eq
 8004968:	6819      	ldreq	r1, [r3, #0]
 800496a:	685b      	ldreq	r3, [r3, #4]
 800496c:	6063      	str	r3, [r4, #4]
 800496e:	bf04      	itt	eq
 8004970:	1949      	addeq	r1, r1, r5
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	6054      	str	r4, [r2, #4]
 8004976:	e7ca      	b.n	800490e <_free_r+0x26>
 8004978:	b003      	add	sp, #12
 800497a:	bd30      	pop	{r4, r5, pc}
 800497c:	2000034c 	.word	0x2000034c

08004980 <sbrk_aligned>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4e0e      	ldr	r6, [pc, #56]	; (80049bc <sbrk_aligned+0x3c>)
 8004984:	460c      	mov	r4, r1
 8004986:	6831      	ldr	r1, [r6, #0]
 8004988:	4605      	mov	r5, r0
 800498a:	b911      	cbnz	r1, 8004992 <sbrk_aligned+0x12>
 800498c:	f000 fcaa 	bl	80052e4 <_sbrk_r>
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 fca5 	bl	80052e4 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d00a      	beq.n	80049b4 <sbrk_aligned+0x34>
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d007      	beq.n	80049b8 <sbrk_aligned+0x38>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 fc9a 	bl	80052e4 <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d101      	bne.n	80049b8 <sbrk_aligned+0x38>
 80049b4:	f04f 34ff 	mov.w	r4, #4294967295
 80049b8:	4620      	mov	r0, r4
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	20000350 	.word	0x20000350

080049c0 <_malloc_r>:
 80049c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c4:	1ccd      	adds	r5, r1, #3
 80049c6:	f025 0503 	bic.w	r5, r5, #3
 80049ca:	3508      	adds	r5, #8
 80049cc:	2d0c      	cmp	r5, #12
 80049ce:	bf38      	it	cc
 80049d0:	250c      	movcc	r5, #12
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	4607      	mov	r7, r0
 80049d6:	db01      	blt.n	80049dc <_malloc_r+0x1c>
 80049d8:	42a9      	cmp	r1, r5
 80049da:	d905      	bls.n	80049e8 <_malloc_r+0x28>
 80049dc:	230c      	movs	r3, #12
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	2600      	movs	r6, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004abc <_malloc_r+0xfc>
 80049ec:	f000 f868 	bl	8004ac0 <__malloc_lock>
 80049f0:	f8d8 3000 	ldr.w	r3, [r8]
 80049f4:	461c      	mov	r4, r3
 80049f6:	bb5c      	cbnz	r4, 8004a50 <_malloc_r+0x90>
 80049f8:	4629      	mov	r1, r5
 80049fa:	4638      	mov	r0, r7
 80049fc:	f7ff ffc0 	bl	8004980 <sbrk_aligned>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	4604      	mov	r4, r0
 8004a04:	d155      	bne.n	8004ab2 <_malloc_r+0xf2>
 8004a06:	f8d8 4000 	ldr.w	r4, [r8]
 8004a0a:	4626      	mov	r6, r4
 8004a0c:	2e00      	cmp	r6, #0
 8004a0e:	d145      	bne.n	8004a9c <_malloc_r+0xdc>
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d048      	beq.n	8004aa6 <_malloc_r+0xe6>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	4631      	mov	r1, r6
 8004a18:	4638      	mov	r0, r7
 8004a1a:	eb04 0903 	add.w	r9, r4, r3
 8004a1e:	f000 fc61 	bl	80052e4 <_sbrk_r>
 8004a22:	4581      	cmp	r9, r0
 8004a24:	d13f      	bne.n	8004aa6 <_malloc_r+0xe6>
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	1a6d      	subs	r5, r5, r1
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ffa7 	bl	8004980 <sbrk_aligned>
 8004a32:	3001      	adds	r0, #1
 8004a34:	d037      	beq.n	8004aa6 <_malloc_r+0xe6>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	442b      	add	r3, r5
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d038      	beq.n	8004ab6 <_malloc_r+0xf6>
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	42a2      	cmp	r2, r4
 8004a48:	d12b      	bne.n	8004aa2 <_malloc_r+0xe2>
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	e00f      	b.n	8004a70 <_malloc_r+0xb0>
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	1b52      	subs	r2, r2, r5
 8004a54:	d41f      	bmi.n	8004a96 <_malloc_r+0xd6>
 8004a56:	2a0b      	cmp	r2, #11
 8004a58:	d917      	bls.n	8004a8a <_malloc_r+0xca>
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	6025      	str	r5, [r4, #0]
 8004a60:	bf18      	it	ne
 8004a62:	6059      	strne	r1, [r3, #4]
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	bf08      	it	eq
 8004a68:	f8c8 1000 	streq.w	r1, [r8]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4638      	mov	r0, r7
 8004a72:	f104 060b 	add.w	r6, r4, #11
 8004a76:	f000 f829 	bl	8004acc <__malloc_unlock>
 8004a7a:	f026 0607 	bic.w	r6, r6, #7
 8004a7e:	1d23      	adds	r3, r4, #4
 8004a80:	1af2      	subs	r2, r6, r3
 8004a82:	d0ae      	beq.n	80049e2 <_malloc_r+0x22>
 8004a84:	1b9b      	subs	r3, r3, r6
 8004a86:	50a3      	str	r3, [r4, r2]
 8004a88:	e7ab      	b.n	80049e2 <_malloc_r+0x22>
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	6862      	ldr	r2, [r4, #4]
 8004a8e:	d1dd      	bne.n	8004a4c <_malloc_r+0x8c>
 8004a90:	f8c8 2000 	str.w	r2, [r8]
 8004a94:	e7ec      	b.n	8004a70 <_malloc_r+0xb0>
 8004a96:	4623      	mov	r3, r4
 8004a98:	6864      	ldr	r4, [r4, #4]
 8004a9a:	e7ac      	b.n	80049f6 <_malloc_r+0x36>
 8004a9c:	4634      	mov	r4, r6
 8004a9e:	6876      	ldr	r6, [r6, #4]
 8004aa0:	e7b4      	b.n	8004a0c <_malloc_r+0x4c>
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	e7cc      	b.n	8004a40 <_malloc_r+0x80>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f000 f80e 	bl	8004acc <__malloc_unlock>
 8004ab0:	e797      	b.n	80049e2 <_malloc_r+0x22>
 8004ab2:	6025      	str	r5, [r4, #0]
 8004ab4:	e7dc      	b.n	8004a70 <_malloc_r+0xb0>
 8004ab6:	605b      	str	r3, [r3, #4]
 8004ab8:	deff      	udf	#255	; 0xff
 8004aba:	bf00      	nop
 8004abc:	2000034c 	.word	0x2000034c

08004ac0 <__malloc_lock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__malloc_lock+0x8>)
 8004ac2:	f7ff bf0e 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000348 	.word	0x20000348

08004acc <__malloc_unlock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_unlock+0x8>)
 8004ace:	f7ff bf09 	b.w	80048e4 <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000348 	.word	0x20000348

08004ad8 <__sfputc_r>:
 8004ad8:	6893      	ldr	r3, [r2, #8]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	b410      	push	{r4}
 8004ae0:	6093      	str	r3, [r2, #8]
 8004ae2:	da08      	bge.n	8004af6 <__sfputc_r+0x1e>
 8004ae4:	6994      	ldr	r4, [r2, #24]
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	db01      	blt.n	8004aee <__sfputc_r+0x16>
 8004aea:	290a      	cmp	r1, #10
 8004aec:	d103      	bne.n	8004af6 <__sfputc_r+0x1e>
 8004aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004af2:	f7ff bde8 	b.w	80046c6 <__swbuf_r>
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	1c58      	adds	r0, r3, #1
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	7019      	strb	r1, [r3, #0]
 8004afe:	4608      	mov	r0, r1
 8004b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <__sfputs_r>:
 8004b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b08:	4606      	mov	r6, r0
 8004b0a:	460f      	mov	r7, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	18d5      	adds	r5, r2, r3
 8004b10:	42ac      	cmp	r4, r5
 8004b12:	d101      	bne.n	8004b18 <__sfputs_r+0x12>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e007      	b.n	8004b28 <__sfputs_r+0x22>
 8004b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1c:	463a      	mov	r2, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f7ff ffda 	bl	8004ad8 <__sfputc_r>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d1f3      	bne.n	8004b10 <__sfputs_r+0xa>
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b2c <_vfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	460d      	mov	r5, r1
 8004b32:	b09d      	sub	sp, #116	; 0x74
 8004b34:	4614      	mov	r4, r2
 8004b36:	4698      	mov	r8, r3
 8004b38:	4606      	mov	r6, r0
 8004b3a:	b118      	cbz	r0, 8004b44 <_vfiprintf_r+0x18>
 8004b3c:	6a03      	ldr	r3, [r0, #32]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <_vfiprintf_r+0x18>
 8004b40:	f7ff fcda 	bl	80044f8 <__sinit>
 8004b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b46:	07d9      	lsls	r1, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	059a      	lsls	r2, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b52:	f7ff fec6 	bl	80048e2 <__retarget_lock_acquire_recursive>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d501      	bpl.n	8004b60 <_vfiprintf_r+0x34>
 8004b5c:	692b      	ldr	r3, [r5, #16]
 8004b5e:	b99b      	cbnz	r3, 8004b88 <_vfiprintf_r+0x5c>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4630      	mov	r0, r6
 8004b64:	f7ff fdec 	bl	8004740 <__swsetup_r>
 8004b68:	b170      	cbz	r0, 8004b88 <_vfiprintf_r+0x5c>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b6c:	07dc      	lsls	r4, r3, #31
 8004b6e:	d504      	bpl.n	8004b7a <_vfiprintf_r+0x4e>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	b01d      	add	sp, #116	; 0x74
 8004b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d4f7      	bmi.n	8004b70 <_vfiprintf_r+0x44>
 8004b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b82:	f7ff feaf 	bl	80048e4 <__retarget_lock_release_recursive>
 8004b86:	e7f3      	b.n	8004b70 <_vfiprintf_r+0x44>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b96:	2330      	movs	r3, #48	; 0x30
 8004b98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004d4c <_vfiprintf_r+0x220>
 8004b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ba0:	f04f 0901 	mov.w	r9, #1
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_vfiprintf_r+0x86>
 8004bae:	2a25      	cmp	r2, #37	; 0x25
 8004bb0:	d1f9      	bne.n	8004ba6 <_vfiprintf_r+0x7a>
 8004bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb6:	d00b      	beq.n	8004bd0 <_vfiprintf_r+0xa4>
 8004bb8:	465b      	mov	r3, fp
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffa1 	bl	8004b06 <__sfputs_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f000 80a9 	beq.w	8004d1c <_vfiprintf_r+0x1f0>
 8004bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bcc:	445a      	add	r2, fp
 8004bce:	9209      	str	r2, [sp, #36]	; 0x24
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a1 	beq.w	8004d1c <_vfiprintf_r+0x1f0>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be4:	f10a 0a01 	add.w	sl, sl, #1
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfa:	4854      	ldr	r0, [pc, #336]	; (8004d4c <_vfiprintf_r+0x220>)
 8004bfc:	f7fb faf8 	bl	80001f0 <memchr>
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	b9d8      	cbnz	r0, 8004c3c <_vfiprintf_r+0x110>
 8004c04:	06d1      	lsls	r1, r2, #27
 8004c06:	bf44      	itt	mi
 8004c08:	2320      	movmi	r3, #32
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0e:	0713      	lsls	r3, r2, #28
 8004c10:	bf44      	itt	mi
 8004c12:	232b      	movmi	r3, #43	; 0x2b
 8004c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c18:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1e:	d015      	beq.n	8004c4c <_vfiprintf_r+0x120>
 8004c20:	9a07      	ldr	r2, [sp, #28]
 8004c22:	4654      	mov	r4, sl
 8004c24:	2000      	movs	r0, #0
 8004c26:	f04f 0c0a 	mov.w	ip, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c30:	3b30      	subs	r3, #48	; 0x30
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d94d      	bls.n	8004cd2 <_vfiprintf_r+0x1a6>
 8004c36:	b1b0      	cbz	r0, 8004c66 <_vfiprintf_r+0x13a>
 8004c38:	9207      	str	r2, [sp, #28]
 8004c3a:	e014      	b.n	8004c66 <_vfiprintf_r+0x13a>
 8004c3c:	eba0 0308 	sub.w	r3, r0, r8
 8004c40:	fa09 f303 	lsl.w	r3, r9, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	46a2      	mov	sl, r4
 8004c4a:	e7d2      	b.n	8004bf2 <_vfiprintf_r+0xc6>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	1d19      	adds	r1, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9103      	str	r1, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfbb      	ittet	lt
 8004c58:	425b      	neglt	r3, r3
 8004c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5e:	9307      	strge	r3, [sp, #28]
 8004c60:	9307      	strlt	r3, [sp, #28]
 8004c62:	bfb8      	it	lt
 8004c64:	9204      	strlt	r2, [sp, #16]
 8004c66:	7823      	ldrb	r3, [r4, #0]
 8004c68:	2b2e      	cmp	r3, #46	; 0x2e
 8004c6a:	d10c      	bne.n	8004c86 <_vfiprintf_r+0x15a>
 8004c6c:	7863      	ldrb	r3, [r4, #1]
 8004c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c70:	d134      	bne.n	8004cdc <_vfiprintf_r+0x1b0>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9203      	str	r2, [sp, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfb8      	it	lt
 8004c7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c82:	3402      	adds	r4, #2
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d5c <_vfiprintf_r+0x230>
 8004c8a:	7821      	ldrb	r1, [r4, #0]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	4650      	mov	r0, sl
 8004c90:	f7fb faae 	bl	80001f0 <memchr>
 8004c94:	b138      	cbz	r0, 8004ca6 <_vfiprintf_r+0x17a>
 8004c96:	9b04      	ldr	r3, [sp, #16]
 8004c98:	eba0 000a 	sub.w	r0, r0, sl
 8004c9c:	2240      	movs	r2, #64	; 0x40
 8004c9e:	4082      	lsls	r2, r0
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004caa:	4829      	ldr	r0, [pc, #164]	; (8004d50 <_vfiprintf_r+0x224>)
 8004cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	f7fb fa9d 	bl	80001f0 <memchr>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d03f      	beq.n	8004d3a <_vfiprintf_r+0x20e>
 8004cba:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <_vfiprintf_r+0x228>)
 8004cbc:	bb1b      	cbnz	r3, 8004d06 <_vfiprintf_r+0x1da>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ccc:	443b      	add	r3, r7
 8004cce:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd0:	e768      	b.n	8004ba4 <_vfiprintf_r+0x78>
 8004cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7a6      	b.n	8004c2a <_vfiprintf_r+0xfe>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	3401      	adds	r4, #1
 8004ce0:	9305      	str	r3, [sp, #20]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0c0a 	mov.w	ip, #10
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cee:	3a30      	subs	r2, #48	; 0x30
 8004cf0:	2a09      	cmp	r2, #9
 8004cf2:	d903      	bls.n	8004cfc <_vfiprintf_r+0x1d0>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0c6      	beq.n	8004c86 <_vfiprintf_r+0x15a>
 8004cf8:	9105      	str	r1, [sp, #20]
 8004cfa:	e7c4      	b.n	8004c86 <_vfiprintf_r+0x15a>
 8004cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d00:	4604      	mov	r4, r0
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7f0      	b.n	8004ce8 <_vfiprintf_r+0x1bc>
 8004d06:	ab03      	add	r3, sp, #12
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <_vfiprintf_r+0x22c>)
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	4630      	mov	r0, r6
 8004d12:	f3af 8000 	nop.w
 8004d16:	4607      	mov	r7, r0
 8004d18:	1c78      	adds	r0, r7, #1
 8004d1a:	d1d6      	bne.n	8004cca <_vfiprintf_r+0x19e>
 8004d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d1e:	07d9      	lsls	r1, r3, #31
 8004d20:	d405      	bmi.n	8004d2e <_vfiprintf_r+0x202>
 8004d22:	89ab      	ldrh	r3, [r5, #12]
 8004d24:	059a      	lsls	r2, r3, #22
 8004d26:	d402      	bmi.n	8004d2e <_vfiprintf_r+0x202>
 8004d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d2a:	f7ff fddb 	bl	80048e4 <__retarget_lock_release_recursive>
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	065b      	lsls	r3, r3, #25
 8004d32:	f53f af1d 	bmi.w	8004b70 <_vfiprintf_r+0x44>
 8004d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d38:	e71c      	b.n	8004b74 <_vfiprintf_r+0x48>
 8004d3a:	ab03      	add	r3, sp, #12
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	462a      	mov	r2, r5
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <_vfiprintf_r+0x22c>)
 8004d42:	a904      	add	r1, sp, #16
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f879 	bl	8004e3c <_printf_i>
 8004d4a:	e7e4      	b.n	8004d16 <_vfiprintf_r+0x1ea>
 8004d4c:	080053b0 	.word	0x080053b0
 8004d50:	080053ba 	.word	0x080053ba
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004b07 	.word	0x08004b07
 8004d5c:	080053b6 	.word	0x080053b6

08004d60 <_printf_common>:
 8004d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	4616      	mov	r6, r2
 8004d66:	4699      	mov	r9, r3
 8004d68:	688a      	ldr	r2, [r1, #8]
 8004d6a:	690b      	ldr	r3, [r1, #16]
 8004d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bfb8      	it	lt
 8004d74:	4613      	movlt	r3, r2
 8004d76:	6033      	str	r3, [r6, #0]
 8004d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	b10a      	cbz	r2, 8004d86 <_printf_common+0x26>
 8004d82:	3301      	adds	r3, #1
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	0699      	lsls	r1, r3, #26
 8004d8a:	bf42      	ittt	mi
 8004d8c:	6833      	ldrmi	r3, [r6, #0]
 8004d8e:	3302      	addmi	r3, #2
 8004d90:	6033      	strmi	r3, [r6, #0]
 8004d92:	6825      	ldr	r5, [r4, #0]
 8004d94:	f015 0506 	ands.w	r5, r5, #6
 8004d98:	d106      	bne.n	8004da8 <_printf_common+0x48>
 8004d9a:	f104 0a19 	add.w	sl, r4, #25
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	6832      	ldr	r2, [r6, #0]
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	42ab      	cmp	r3, r5
 8004da6:	dc26      	bgt.n	8004df6 <_printf_common+0x96>
 8004da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dac:	1e13      	subs	r3, r2, #0
 8004dae:	6822      	ldr	r2, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	0692      	lsls	r2, r2, #26
 8004db6:	d42b      	bmi.n	8004e10 <_printf_common+0xb0>
 8004db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d01e      	beq.n	8004e04 <_printf_common+0xa4>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	6922      	ldr	r2, [r4, #16]
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	bf02      	ittt	eq
 8004dd2:	68e5      	ldreq	r5, [r4, #12]
 8004dd4:	6833      	ldreq	r3, [r6, #0]
 8004dd6:	1aed      	subeq	r5, r5, r3
 8004dd8:	68a3      	ldr	r3, [r4, #8]
 8004dda:	bf0c      	ite	eq
 8004ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de0:	2500      	movne	r5, #0
 8004de2:	4293      	cmp	r3, r2
 8004de4:	bfc4      	itt	gt
 8004de6:	1a9b      	subgt	r3, r3, r2
 8004de8:	18ed      	addgt	r5, r5, r3
 8004dea:	2600      	movs	r6, #0
 8004dec:	341a      	adds	r4, #26
 8004dee:	42b5      	cmp	r5, r6
 8004df0:	d11a      	bne.n	8004e28 <_printf_common+0xc8>
 8004df2:	2000      	movs	r0, #0
 8004df4:	e008      	b.n	8004e08 <_printf_common+0xa8>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	47c0      	blx	r8
 8004e00:	3001      	adds	r0, #1
 8004e02:	d103      	bne.n	8004e0c <_printf_common+0xac>
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	e7c6      	b.n	8004d9e <_printf_common+0x3e>
 8004e10:	18e1      	adds	r1, r4, r3
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	2030      	movs	r0, #48	; 0x30
 8004e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e1a:	4422      	add	r2, r4
 8004e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e24:	3302      	adds	r3, #2
 8004e26:	e7c7      	b.n	8004db8 <_printf_common+0x58>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4638      	mov	r0, r7
 8004e30:	47c0      	blx	r8
 8004e32:	3001      	adds	r0, #1
 8004e34:	d0e6      	beq.n	8004e04 <_printf_common+0xa4>
 8004e36:	3601      	adds	r6, #1
 8004e38:	e7d9      	b.n	8004dee <_printf_common+0x8e>
	...

08004e3c <_printf_i>:
 8004e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	7e0f      	ldrb	r7, [r1, #24]
 8004e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e44:	2f78      	cmp	r7, #120	; 0x78
 8004e46:	4691      	mov	r9, r2
 8004e48:	4680      	mov	r8, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	469a      	mov	sl, r3
 8004e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e52:	d807      	bhi.n	8004e64 <_printf_i+0x28>
 8004e54:	2f62      	cmp	r7, #98	; 0x62
 8004e56:	d80a      	bhi.n	8004e6e <_printf_i+0x32>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	f000 80d4 	beq.w	8005006 <_printf_i+0x1ca>
 8004e5e:	2f58      	cmp	r7, #88	; 0x58
 8004e60:	f000 80c0 	beq.w	8004fe4 <_printf_i+0x1a8>
 8004e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e6c:	e03a      	b.n	8004ee4 <_printf_i+0xa8>
 8004e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e72:	2b15      	cmp	r3, #21
 8004e74:	d8f6      	bhi.n	8004e64 <_printf_i+0x28>
 8004e76:	a101      	add	r1, pc, #4	; (adr r1, 8004e7c <_printf_i+0x40>)
 8004e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004e65 	.word	0x08004e65
 8004e88:	08004e65 	.word	0x08004e65
 8004e8c:	08004e65 	.word	0x08004e65
 8004e90:	08004e65 	.word	0x08004e65
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e65 	.word	0x08004e65
 8004e9c:	08004e65 	.word	0x08004e65
 8004ea0:	08004e65 	.word	0x08004e65
 8004ea4:	08004e65 	.word	0x08004e65
 8004ea8:	08004fed 	.word	0x08004fed
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004fa7 	.word	0x08004fa7
 8004eb4:	08004e65 	.word	0x08004e65
 8004eb8:	08004e65 	.word	0x08004e65
 8004ebc:	0800500f 	.word	0x0800500f
 8004ec0:	08004e65 	.word	0x08004e65
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004e65 	.word	0x08004e65
 8004ecc:	08004e65 	.word	0x08004e65
 8004ed0:	08004faf 	.word	0x08004faf
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e09f      	b.n	8005028 <_printf_i+0x1ec>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	0607      	lsls	r7, r0, #24
 8004eee:	f103 0104 	add.w	r1, r3, #4
 8004ef2:	6029      	str	r1, [r5, #0]
 8004ef4:	d501      	bpl.n	8004efa <_printf_i+0xbe>
 8004ef6:	681e      	ldr	r6, [r3, #0]
 8004ef8:	e003      	b.n	8004f02 <_printf_i+0xc6>
 8004efa:	0646      	lsls	r6, r0, #25
 8004efc:	d5fb      	bpl.n	8004ef6 <_printf_i+0xba>
 8004efe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	da03      	bge.n	8004f0e <_printf_i+0xd2>
 8004f06:	232d      	movs	r3, #45	; 0x2d
 8004f08:	4276      	negs	r6, r6
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	485a      	ldr	r0, [pc, #360]	; (8005078 <_printf_i+0x23c>)
 8004f10:	230a      	movs	r3, #10
 8004f12:	e012      	b.n	8004f3a <_printf_i+0xfe>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	6029      	str	r1, [r5, #0]
 8004f1c:	0605      	lsls	r5, r0, #24
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0xe8>
 8004f20:	681e      	ldr	r6, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0xee>
 8004f24:	0641      	lsls	r1, r0, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0xe4>
 8004f28:	881e      	ldrh	r6, [r3, #0]
 8004f2a:	4853      	ldr	r0, [pc, #332]	; (8005078 <_printf_i+0x23c>)
 8004f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f2e:	bf0c      	ite	eq
 8004f30:	2308      	moveq	r3, #8
 8004f32:	230a      	movne	r3, #10
 8004f34:	2100      	movs	r1, #0
 8004f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f3a:	6865      	ldr	r5, [r4, #4]
 8004f3c:	60a5      	str	r5, [r4, #8]
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	bfa2      	ittt	ge
 8004f42:	6821      	ldrge	r1, [r4, #0]
 8004f44:	f021 0104 	bicge.w	r1, r1, #4
 8004f48:	6021      	strge	r1, [r4, #0]
 8004f4a:	b90e      	cbnz	r6, 8004f50 <_printf_i+0x114>
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	d04b      	beq.n	8004fe8 <_printf_i+0x1ac>
 8004f50:	4615      	mov	r5, r2
 8004f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f56:	fb03 6711 	mls	r7, r3, r1, r6
 8004f5a:	5dc7      	ldrb	r7, [r0, r7]
 8004f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f60:	4637      	mov	r7, r6
 8004f62:	42bb      	cmp	r3, r7
 8004f64:	460e      	mov	r6, r1
 8004f66:	d9f4      	bls.n	8004f52 <_printf_i+0x116>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d10b      	bne.n	8004f84 <_printf_i+0x148>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	07de      	lsls	r6, r3, #31
 8004f70:	d508      	bpl.n	8004f84 <_printf_i+0x148>
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	6861      	ldr	r1, [r4, #4]
 8004f76:	4299      	cmp	r1, r3
 8004f78:	bfde      	ittt	le
 8004f7a:	2330      	movle	r3, #48	; 0x30
 8004f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f84:	1b52      	subs	r2, r2, r5
 8004f86:	6122      	str	r2, [r4, #16]
 8004f88:	f8cd a000 	str.w	sl, [sp]
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	aa03      	add	r2, sp, #12
 8004f90:	4621      	mov	r1, r4
 8004f92:	4640      	mov	r0, r8
 8004f94:	f7ff fee4 	bl	8004d60 <_printf_common>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d14a      	bne.n	8005032 <_printf_i+0x1f6>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b004      	add	sp, #16
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f043 0320 	orr.w	r3, r3, #32
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	4833      	ldr	r0, [pc, #204]	; (800507c <_printf_i+0x240>)
 8004fb0:	2778      	movs	r7, #120	; 0x78
 8004fb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	6829      	ldr	r1, [r5, #0]
 8004fba:	061f      	lsls	r7, r3, #24
 8004fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc0:	d402      	bmi.n	8004fc8 <_printf_i+0x18c>
 8004fc2:	065f      	lsls	r7, r3, #25
 8004fc4:	bf48      	it	mi
 8004fc6:	b2b6      	uxthmi	r6, r6
 8004fc8:	07df      	lsls	r7, r3, #31
 8004fca:	bf48      	it	mi
 8004fcc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd0:	6029      	str	r1, [r5, #0]
 8004fd2:	bf48      	it	mi
 8004fd4:	6023      	strmi	r3, [r4, #0]
 8004fd6:	b91e      	cbnz	r6, 8004fe0 <_printf_i+0x1a4>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f023 0320 	bic.w	r3, r3, #32
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	e7a7      	b.n	8004f34 <_printf_i+0xf8>
 8004fe4:	4824      	ldr	r0, [pc, #144]	; (8005078 <_printf_i+0x23c>)
 8004fe6:	e7e4      	b.n	8004fb2 <_printf_i+0x176>
 8004fe8:	4615      	mov	r5, r2
 8004fea:	e7bd      	b.n	8004f68 <_printf_i+0x12c>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	6826      	ldr	r6, [r4, #0]
 8004ff0:	6961      	ldr	r1, [r4, #20]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6028      	str	r0, [r5, #0]
 8004ff6:	0635      	lsls	r5, r6, #24
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	d501      	bpl.n	8005000 <_printf_i+0x1c4>
 8004ffc:	6019      	str	r1, [r3, #0]
 8004ffe:	e002      	b.n	8005006 <_printf_i+0x1ca>
 8005000:	0670      	lsls	r0, r6, #25
 8005002:	d5fb      	bpl.n	8004ffc <_printf_i+0x1c0>
 8005004:	8019      	strh	r1, [r3, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	4615      	mov	r5, r2
 800500c:	e7bc      	b.n	8004f88 <_printf_i+0x14c>
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	602a      	str	r2, [r5, #0]
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	2100      	movs	r1, #0
 800501a:	4628      	mov	r0, r5
 800501c:	f7fb f8e8 	bl	80001f0 <memchr>
 8005020:	b108      	cbz	r0, 8005026 <_printf_i+0x1ea>
 8005022:	1b40      	subs	r0, r0, r5
 8005024:	6060      	str	r0, [r4, #4]
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	2300      	movs	r3, #0
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005030:	e7aa      	b.n	8004f88 <_printf_i+0x14c>
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	462a      	mov	r2, r5
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	47d0      	blx	sl
 800503c:	3001      	adds	r0, #1
 800503e:	d0ad      	beq.n	8004f9c <_printf_i+0x160>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	079b      	lsls	r3, r3, #30
 8005044:	d413      	bmi.n	800506e <_printf_i+0x232>
 8005046:	68e0      	ldr	r0, [r4, #12]
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	4298      	cmp	r0, r3
 800504c:	bfb8      	it	lt
 800504e:	4618      	movlt	r0, r3
 8005050:	e7a6      	b.n	8004fa0 <_printf_i+0x164>
 8005052:	2301      	movs	r3, #1
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	47d0      	blx	sl
 800505c:	3001      	adds	r0, #1
 800505e:	d09d      	beq.n	8004f9c <_printf_i+0x160>
 8005060:	3501      	adds	r5, #1
 8005062:	68e3      	ldr	r3, [r4, #12]
 8005064:	9903      	ldr	r1, [sp, #12]
 8005066:	1a5b      	subs	r3, r3, r1
 8005068:	42ab      	cmp	r3, r5
 800506a:	dcf2      	bgt.n	8005052 <_printf_i+0x216>
 800506c:	e7eb      	b.n	8005046 <_printf_i+0x20a>
 800506e:	2500      	movs	r5, #0
 8005070:	f104 0619 	add.w	r6, r4, #25
 8005074:	e7f5      	b.n	8005062 <_printf_i+0x226>
 8005076:	bf00      	nop
 8005078:	080053c1 	.word	0x080053c1
 800507c:	080053d2 	.word	0x080053d2

08005080 <__sflush_r>:
 8005080:	898a      	ldrh	r2, [r1, #12]
 8005082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	4605      	mov	r5, r0
 8005088:	0710      	lsls	r0, r2, #28
 800508a:	460c      	mov	r4, r1
 800508c:	d458      	bmi.n	8005140 <__sflush_r+0xc0>
 800508e:	684b      	ldr	r3, [r1, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	dc05      	bgt.n	80050a0 <__sflush_r+0x20>
 8005094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	dc02      	bgt.n	80050a0 <__sflush_r+0x20>
 800509a:	2000      	movs	r0, #0
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	d0f9      	beq.n	800509a <__sflush_r+0x1a>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050ac:	682f      	ldr	r7, [r5, #0]
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	d032      	beq.n	800511a <__sflush_r+0x9a>
 80050b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	075a      	lsls	r2, r3, #29
 80050ba:	d505      	bpl.n	80050c8 <__sflush_r+0x48>
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	1ac0      	subs	r0, r0, r3
 80050c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050c2:	b10b      	cbz	r3, 80050c8 <__sflush_r+0x48>
 80050c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c6:	1ac0      	subs	r0, r0, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	4602      	mov	r2, r0
 80050cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ce:	6a21      	ldr	r1, [r4, #32]
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b0      	blx	r6
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	d106      	bne.n	80050e8 <__sflush_r+0x68>
 80050da:	6829      	ldr	r1, [r5, #0]
 80050dc:	291d      	cmp	r1, #29
 80050de:	d82b      	bhi.n	8005138 <__sflush_r+0xb8>
 80050e0:	4a29      	ldr	r2, [pc, #164]	; (8005188 <__sflush_r+0x108>)
 80050e2:	410a      	asrs	r2, r1
 80050e4:	07d6      	lsls	r6, r2, #31
 80050e6:	d427      	bmi.n	8005138 <__sflush_r+0xb8>
 80050e8:	2200      	movs	r2, #0
 80050ea:	6062      	str	r2, [r4, #4]
 80050ec:	04d9      	lsls	r1, r3, #19
 80050ee:	6922      	ldr	r2, [r4, #16]
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	d504      	bpl.n	80050fe <__sflush_r+0x7e>
 80050f4:	1c42      	adds	r2, r0, #1
 80050f6:	d101      	bne.n	80050fc <__sflush_r+0x7c>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b903      	cbnz	r3, 80050fe <__sflush_r+0x7e>
 80050fc:	6560      	str	r0, [r4, #84]	; 0x54
 80050fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005100:	602f      	str	r7, [r5, #0]
 8005102:	2900      	cmp	r1, #0
 8005104:	d0c9      	beq.n	800509a <__sflush_r+0x1a>
 8005106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510a:	4299      	cmp	r1, r3
 800510c:	d002      	beq.n	8005114 <__sflush_r+0x94>
 800510e:	4628      	mov	r0, r5
 8005110:	f7ff fbea 	bl	80048e8 <_free_r>
 8005114:	2000      	movs	r0, #0
 8005116:	6360      	str	r0, [r4, #52]	; 0x34
 8005118:	e7c0      	b.n	800509c <__sflush_r+0x1c>
 800511a:	2301      	movs	r3, #1
 800511c:	4628      	mov	r0, r5
 800511e:	47b0      	blx	r6
 8005120:	1c41      	adds	r1, r0, #1
 8005122:	d1c8      	bne.n	80050b6 <__sflush_r+0x36>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0c5      	beq.n	80050b6 <__sflush_r+0x36>
 800512a:	2b1d      	cmp	r3, #29
 800512c:	d001      	beq.n	8005132 <__sflush_r+0xb2>
 800512e:	2b16      	cmp	r3, #22
 8005130:	d101      	bne.n	8005136 <__sflush_r+0xb6>
 8005132:	602f      	str	r7, [r5, #0]
 8005134:	e7b1      	b.n	800509a <__sflush_r+0x1a>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	e7ad      	b.n	800509c <__sflush_r+0x1c>
 8005140:	690f      	ldr	r7, [r1, #16]
 8005142:	2f00      	cmp	r7, #0
 8005144:	d0a9      	beq.n	800509a <__sflush_r+0x1a>
 8005146:	0793      	lsls	r3, r2, #30
 8005148:	680e      	ldr	r6, [r1, #0]
 800514a:	bf08      	it	eq
 800514c:	694b      	ldreq	r3, [r1, #20]
 800514e:	600f      	str	r7, [r1, #0]
 8005150:	bf18      	it	ne
 8005152:	2300      	movne	r3, #0
 8005154:	eba6 0807 	sub.w	r8, r6, r7
 8005158:	608b      	str	r3, [r1, #8]
 800515a:	f1b8 0f00 	cmp.w	r8, #0
 800515e:	dd9c      	ble.n	800509a <__sflush_r+0x1a>
 8005160:	6a21      	ldr	r1, [r4, #32]
 8005162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005164:	4643      	mov	r3, r8
 8005166:	463a      	mov	r2, r7
 8005168:	4628      	mov	r0, r5
 800516a:	47b0      	blx	r6
 800516c:	2800      	cmp	r0, #0
 800516e:	dc06      	bgt.n	800517e <__sflush_r+0xfe>
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	e78e      	b.n	800509c <__sflush_r+0x1c>
 800517e:	4407      	add	r7, r0
 8005180:	eba8 0800 	sub.w	r8, r8, r0
 8005184:	e7e9      	b.n	800515a <__sflush_r+0xda>
 8005186:	bf00      	nop
 8005188:	dfbffffe 	.word	0xdfbffffe

0800518c <_fflush_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b913      	cbnz	r3, 800519c <_fflush_r+0x10>
 8005196:	2500      	movs	r5, #0
 8005198:	4628      	mov	r0, r5
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	b118      	cbz	r0, 80051a6 <_fflush_r+0x1a>
 800519e:	6a03      	ldr	r3, [r0, #32]
 80051a0:	b90b      	cbnz	r3, 80051a6 <_fflush_r+0x1a>
 80051a2:	f7ff f9a9 	bl	80044f8 <__sinit>
 80051a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f3      	beq.n	8005196 <_fflush_r+0xa>
 80051ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051b0:	07d0      	lsls	r0, r2, #31
 80051b2:	d404      	bmi.n	80051be <_fflush_r+0x32>
 80051b4:	0599      	lsls	r1, r3, #22
 80051b6:	d402      	bmi.n	80051be <_fflush_r+0x32>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f7ff fb92 	bl	80048e2 <__retarget_lock_acquire_recursive>
 80051be:	4628      	mov	r0, r5
 80051c0:	4621      	mov	r1, r4
 80051c2:	f7ff ff5d 	bl	8005080 <__sflush_r>
 80051c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c8:	07da      	lsls	r2, r3, #31
 80051ca:	4605      	mov	r5, r0
 80051cc:	d4e4      	bmi.n	8005198 <_fflush_r+0xc>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	059b      	lsls	r3, r3, #22
 80051d2:	d4e1      	bmi.n	8005198 <_fflush_r+0xc>
 80051d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d6:	f7ff fb85 	bl	80048e4 <__retarget_lock_release_recursive>
 80051da:	e7dd      	b.n	8005198 <_fflush_r+0xc>

080051dc <__swhatbuf_r>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	460c      	mov	r4, r1
 80051e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e4:	2900      	cmp	r1, #0
 80051e6:	b096      	sub	sp, #88	; 0x58
 80051e8:	4615      	mov	r5, r2
 80051ea:	461e      	mov	r6, r3
 80051ec:	da0d      	bge.n	800520a <__swhatbuf_r+0x2e>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	bf0c      	ite	eq
 80051fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051fe:	2340      	movne	r3, #64	; 0x40
 8005200:	2000      	movs	r0, #0
 8005202:	6031      	str	r1, [r6, #0]
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	b016      	add	sp, #88	; 0x58
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	466a      	mov	r2, sp
 800520c:	f000 f848 	bl	80052a0 <_fstat_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	dbec      	blt.n	80051ee <__swhatbuf_r+0x12>
 8005214:	9901      	ldr	r1, [sp, #4]
 8005216:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800521a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800521e:	4259      	negs	r1, r3
 8005220:	4159      	adcs	r1, r3
 8005222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005226:	e7eb      	b.n	8005200 <__swhatbuf_r+0x24>

08005228 <__smakebuf_r>:
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800522c:	079d      	lsls	r5, r3, #30
 800522e:	4606      	mov	r6, r0
 8005230:	460c      	mov	r4, r1
 8005232:	d507      	bpl.n	8005244 <__smakebuf_r+0x1c>
 8005234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	2301      	movs	r3, #1
 800523e:	6163      	str	r3, [r4, #20]
 8005240:	b002      	add	sp, #8
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	ab01      	add	r3, sp, #4
 8005246:	466a      	mov	r2, sp
 8005248:	f7ff ffc8 	bl	80051dc <__swhatbuf_r>
 800524c:	9900      	ldr	r1, [sp, #0]
 800524e:	4605      	mov	r5, r0
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff fbb5 	bl	80049c0 <_malloc_r>
 8005256:	b948      	cbnz	r0, 800526c <__smakebuf_r+0x44>
 8005258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525c:	059a      	lsls	r2, r3, #22
 800525e:	d4ef      	bmi.n	8005240 <__smakebuf_r+0x18>
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e7e3      	b.n	8005234 <__smakebuf_r+0xc>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	6020      	str	r0, [r4, #0]
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	9b00      	ldr	r3, [sp, #0]
 8005278:	6163      	str	r3, [r4, #20]
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	6120      	str	r0, [r4, #16]
 800527e:	b15b      	cbz	r3, 8005298 <__smakebuf_r+0x70>
 8005280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f81d 	bl	80052c4 <_isatty_r>
 800528a:	b128      	cbz	r0, 8005298 <__smakebuf_r+0x70>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	431d      	orrs	r5, r3
 800529c:	81a5      	strh	r5, [r4, #12]
 800529e:	e7cf      	b.n	8005240 <__smakebuf_r+0x18>

080052a0 <_fstat_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d07      	ldr	r5, [pc, #28]	; (80052c0 <_fstat_r+0x20>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	f7fb fe02 	bl	8000eb6 <_fstat>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d102      	bne.n	80052bc <_fstat_r+0x1c>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	b103      	cbz	r3, 80052bc <_fstat_r+0x1c>
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	bd38      	pop	{r3, r4, r5, pc}
 80052be:	bf00      	nop
 80052c0:	20000344 	.word	0x20000344

080052c4 <_isatty_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	; (80052e0 <_isatty_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fb fe01 	bl	8000ed6 <_isatty>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_isatty_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_isatty_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20000344 	.word	0x20000344

080052e4 <_sbrk_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d06      	ldr	r5, [pc, #24]	; (8005300 <_sbrk_r+0x1c>)
 80052e8:	2300      	movs	r3, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	f7fb fe0a 	bl	8000f08 <_sbrk>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_sbrk_r+0x1a>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_sbrk_r+0x1a>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000344 	.word	0x20000344

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
