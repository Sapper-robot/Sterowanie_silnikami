
Sterowanie_silnikami.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800539c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000006c  08005408  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005408  00007354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe6d  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a0  00000000  00000000  00016f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00018fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc2  00000000  00000000  00019ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002760d  00000000  00000000  0001aa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001144f  00000000  00000000  0004208f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f412a  00000000  00000000  000534de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  0014764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052ac 	.word	0x080052ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080052ac 	.word	0x080052ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b0d      	cmp	r3, #13
 800058e:	d003      	beq.n	8000598 <line_append+0x18>
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b0a      	cmp	r3, #10
 8000594:	f040 80c0 	bne.w	8000718 <line_append+0x198>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 8000598:	4b69      	ldr	r3, [pc, #420]	@ (8000740 <line_append+0x1c0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 80cb 	beq.w	8000738 <line_append+0x1b8>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 80005a2:	4b67      	ldr	r3, [pc, #412]	@ (8000740 <line_append+0x1c0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a67      	ldr	r2, [pc, #412]	@ (8000744 <line_append+0x1c4>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("Otrzymano: %s\n", line_buffer);
 80005ac:	4965      	ldr	r1, [pc, #404]	@ (8000744 <line_append+0x1c4>)
 80005ae:	4866      	ldr	r0, [pc, #408]	@ (8000748 <line_append+0x1c8>)
 80005b0:	f003 ffb0 	bl	8004514 <iprintf>

			//kody: prawy/lewy/oba | przód/tyl | wypelnienie
			//          P/L/O      |    P/T    |    0-99
			// stop = SP

			if (strcmp(line_buffer, "wlacz") == 0) {
 80005b4:	4965      	ldr	r1, [pc, #404]	@ (800074c <line_append+0x1cc>)
 80005b6:	4863      	ldr	r0, [pc, #396]	@ (8000744 <line_append+0x1c4>)
 80005b8:	f7ff fe0a 	bl	80001d0 <strcmp>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d106      	bne.n	80005d0 <line_append+0x50>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f001 f85d 	bl	8001688 <HAL_GPIO_WritePin>
 80005ce:	e090      	b.n	80006f2 <line_append+0x172>
			}
			else if (strcmp(line_buffer, "wylacz") == 0) {
 80005d0:	495f      	ldr	r1, [pc, #380]	@ (8000750 <line_append+0x1d0>)
 80005d2:	485c      	ldr	r0, [pc, #368]	@ (8000744 <line_append+0x1c4>)
 80005d4:	f7ff fdfc 	bl	80001d0 <strcmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d106      	bne.n	80005ec <line_append+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f001 f84f 	bl	8001688 <HAL_GPIO_WritePin>
 80005ea:	e082      	b.n	80006f2 <line_append+0x172>
			}

			else if (line_buffer[0]=='O'&&line_buffer[1]=='P'){ //OP
 80005ec:	4b55      	ldr	r3, [pc, #340]	@ (8000744 <line_append+0x1c4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80005f2:	d117      	bne.n	8000624 <line_append+0xa4>
 80005f4:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <line_append+0x1c4>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	2b50      	cmp	r3, #80	@ 0x50
 80005fa:	d113      	bne.n	8000624 <line_append+0xa4>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 1 = przod
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f001 f83f 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000610:	4850      	ldr	r0, [pc, #320]	@ (8000754 <line_append+0x1d4>)
 8000612:	f001 f839 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 8000616:	4850      	ldr	r0, [pc, #320]	@ (8000758 <line_append+0x1d8>)
 8000618:	f002 fbe0 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 800061c:	484f      	ldr	r0, [pc, #316]	@ (800075c <line_append+0x1dc>)
 800061e:	f002 fbdd 	bl	8002ddc <HAL_TIM_Base_Start_IT>
 8000622:	e066      	b.n	80006f2 <line_append+0x172>
			}
			else if (line_buffer[0]=='O'&&line_buffer[1]=='T'){
 8000624:	4b47      	ldr	r3, [pc, #284]	@ (8000744 <line_append+0x1c4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b4f      	cmp	r3, #79	@ 0x4f
 800062a:	d117      	bne.n	800065c <line_append+0xdc>
 800062c:	4b45      	ldr	r3, [pc, #276]	@ (8000744 <line_append+0x1c4>)
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	2b54      	cmp	r3, #84	@ 0x54
 8000632:	d113      	bne.n	800065c <line_append+0xdc>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 1 = przod
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 f823 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000648:	4842      	ldr	r0, [pc, #264]	@ (8000754 <line_append+0x1d4>)
 800064a:	f001 f81d 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 800064e:	4842      	ldr	r0, [pc, #264]	@ (8000758 <line_append+0x1d8>)
 8000650:	f002 fbc4 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim6);
 8000654:	4841      	ldr	r0, [pc, #260]	@ (800075c <line_append+0x1dc>)
 8000656:	f002 fbc1 	bl	8002ddc <HAL_TIM_Base_Start_IT>
 800065a:	e04a      	b.n	80006f2 <line_append+0x172>
			}
			else if (line_buffer[0]=='S'&&line_buffer[1]=='P'){
 800065c:	4b39      	ldr	r3, [pc, #228]	@ (8000744 <line_append+0x1c4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b53      	cmp	r3, #83	@ 0x53
 8000662:	d10a      	bne.n	800067a <line_append+0xfa>
 8000664:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <line_append+0x1c4>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	2b50      	cmp	r3, #80	@ 0x50
 800066a:	d106      	bne.n	800067a <line_append+0xfa>
				HAL_TIM_Base_Stop_IT(&htim4);
 800066c:	483a      	ldr	r0, [pc, #232]	@ (8000758 <line_append+0x1d8>)
 800066e:	f002 fc25 	bl	8002ebc <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim6);
 8000672:	483a      	ldr	r0, [pc, #232]	@ (800075c <line_append+0x1dc>)
 8000674:	f002 fc22 	bl	8002ebc <HAL_TIM_Base_Stop_IT>
 8000678:	e03b      	b.n	80006f2 <line_append+0x172>
			}
			else if (line_buffer[0]=='P'&&line_buffer[1]=='P'){
 800067a:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <line_append+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b50      	cmp	r3, #80	@ 0x50
 8000680:	d117      	bne.n	80006b2 <line_append+0x132>
 8000682:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <line_append+0x1c4>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b50      	cmp	r3, #80	@ 0x50
 8000688:	d113      	bne.n	80006b2 <line_append+0x132>
				HAL_TIM_Base_Start_IT(&htim4);
 800068a:	4833      	ldr	r0, [pc, #204]	@ (8000758 <line_append+0x1d8>)
 800068c:	f002 fba6 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 1); //direction2 0 = przod
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000696:	482f      	ldr	r0, [pc, #188]	@ (8000754 <line_append+0x1d4>)
 8000698:	f000 fff6 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 800069c:	482f      	ldr	r0, [pc, #188]	@ (800075c <line_append+0x1dc>)
 800069e:	f002 fb9d 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 1);  //direction1 0 = tyl
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f000 ffec 	bl	8001688 <HAL_GPIO_WritePin>
 80006b0:	e01f      	b.n	80006f2 <line_append+0x172>
			}
			else if (line_buffer[0]=='L'&&line_buffer[1]=='P'){
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <line_append+0x1c4>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b4c      	cmp	r3, #76	@ 0x4c
 80006b8:	d117      	bne.n	80006ea <line_append+0x16a>
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <line_append+0x1c4>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2b50      	cmp	r3, #80	@ 0x50
 80006c0:	d113      	bne.n	80006ea <line_append+0x16a>
				HAL_TIM_Base_Start_IT(&htim4);
 80006c2:	4825      	ldr	r0, [pc, #148]	@ (8000758 <line_append+0x1d8>)
 80006c4:	f002 fb8a 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, 0); //direction2 0 = przod
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ce:	4821      	ldr	r0, [pc, #132]	@ (8000754 <line_append+0x1d4>)
 80006d0:	f000 ffda 	bl	8001688 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim6);
 80006d4:	4821      	ldr	r0, [pc, #132]	@ (800075c <line_append+0x1dc>)
 80006d6:	f002 fb81 	bl	8002ddc <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(DIR_minus_GPIO_Port, DIR_minus_Pin, 0);  //direction1 0 = tyl
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 ffd0 	bl	8001688 <HAL_GPIO_WritePin>
 80006e8:	e003      	b.n	80006f2 <line_append+0x172>


			} //*/
			else {
				printf("Nieznane polecenie: %s\n", line_buffer);
 80006ea:	4916      	ldr	r1, [pc, #88]	@ (8000744 <line_append+0x1c4>)
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <line_append+0x1e0>)
 80006ee:	f003 ff11 	bl	8004514 <iprintf>
			}

			wypelnienie_uart = (int)(line_buffer[2] - '0')*10 + (int)(line_buffer[3] - '0');
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <line_append+0x1c4>)
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	461a      	mov	r2, r3
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <line_append+0x1c4>)
 8000706:	78db      	ldrb	r3, [r3, #3]
 8000708:	3b30      	subs	r3, #48	@ 0x30
 800070a:	4413      	add	r3, r2
 800070c:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <line_append+0x1e4>)
 800070e:	6013      	str	r3, [r2, #0]


			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <line_append+0x1c0>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8000716:	e00f      	b.n	8000738 <line_append+0x1b8>

		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <line_append+0x1c0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b4f      	cmp	r3, #79	@ 0x4f
 800071e:	d902      	bls.n	8000726 <line_append+0x1a6>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <line_append+0x1c0>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <line_append+0x1c0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	4904      	ldr	r1, [pc, #16]	@ (8000740 <line_append+0x1c0>)
 800072e:	600a      	str	r2, [r1, #0]
 8000730:	4904      	ldr	r1, [pc, #16]	@ (8000744 <line_append+0x1c4>)
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	54ca      	strb	r2, [r1, r3]
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001fc 	.word	0x200001fc
 8000744:	200001a8 	.word	0x200001a8
 8000748:	080052c4 	.word	0x080052c4
 800074c:	080052d4 	.word	0x080052d4
 8000750:	080052dc 	.word	0x080052dc
 8000754:	48000800 	.word	0x48000800
 8000758:	20000088 	.word	0x20000088
 800075c:	200000d4 	.word	0x200000d4
 8000760:	080052e4 	.word	0x080052e4
 8000764:	20000000 	.word	0x20000000

08000768 <__io_putchar>:


/////////////////////////////////////////////////  send
int __io_putchar(int ch)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b0a      	cmp	r3, #10
 8000774:	d109      	bne.n	800078a <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000776:	230d      	movs	r3, #13
 8000778:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800077a:	f107 010f 	add.w	r1, r7, #15
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	2201      	movs	r2, #1
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <__io_putchar+0x3c>)
 8000786:	f002 ffe3 	bl	8003750 <HAL_UART_Transmit>
	}

	  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800078a:	1d39      	adds	r1, r7, #4
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <__io_putchar+0x3c>)
 8000794:	f002 ffdc 	bl	8003750 <HAL_UART_Transmit>
	  return 1;
 8000798:	2301      	movs	r3, #1
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000120 	.word	0x20000120

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fbf7 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f859 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f95d 	bl	8000a74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 f92b 	bl	8000a14 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80007be:	f000 f8a5 	bl	800090c <MX_TIM4_Init>
  MX_TIM6_Init();
 80007c2:	f000 f8f1 	bl	80009a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  int i;

  for (i = 0; i < 10; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e00a      	b.n	80007e2 <main+0x3a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007cc:	2120      	movs	r1, #32
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d2:	f000 ff71 	bl	80016b8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80007d6:	2064      	movs	r0, #100	@ 0x64
 80007d8:	f000 fc5e 	bl	8001098 <HAL_Delay>
  for (i = 0; i < 10; i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b09      	cmp	r3, #9
 80007e6:	ddf1      	ble.n	80007cc <main+0x24>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  int b=0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  printf("Hello World!\n");
 80007f0:	4819      	ldr	r0, [pc, #100]	@ (8000858 <main+0xb0>)
 80007f2:	f003 fef7 	bl	80045e4 <puts>
  while (1)
  {

	  uint8_t test;
	  uint8_t value;
	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK) {
 80007f6:	1cb9      	adds	r1, r7, #2
 80007f8:	2300      	movs	r3, #0
 80007fa:	2201      	movs	r2, #1
 80007fc:	4817      	ldr	r0, [pc, #92]	@ (800085c <main+0xb4>)
 80007fe:	f003 f830 	bl	8003862 <HAL_UART_Receive>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <main+0x74>
		  line_append(value);
 8000808:	78bb      	ldrb	r3, [r7, #2]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff feb8 	bl	8000580 <line_append>
		  test = value;
 8000810:	78bb      	ldrb	r3, [r7, #2]
 8000812:	70fb      	strb	r3, [r7, #3]
		  //printf("otrzymano: ");
		  printf(value);
 8000814:	78bb      	ldrb	r3, [r7, #2]
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fe7c 	bl	8004514 <iprintf>
	  }
	  if (HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin)==0){
 800081c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <main+0xb8>)
 8000822:	f000 ff19 	bl	8001658 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10a      	bne.n	8000842 <main+0x9a>
		  if (a==1){
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d105      	bne.n	800083e <main+0x96>
			  printf("b1\n");
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <main+0xbc>)
 8000834:	f003 fed6 	bl	80045e4 <puts>
			  b++;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
		  }
		  a=0;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
	  }
	  if (HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin)==1){
 8000842:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <main+0xb8>)
 8000848:	f000 ff06 	bl	8001658 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d1d1      	bne.n	80007f6 <main+0x4e>
		  a=1;
 8000852:	2301      	movs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
  {
 8000856:	e7ce      	b.n	80007f6 <main+0x4e>
 8000858:	080052fc 	.word	0x080052fc
 800085c:	20000120 	.word	0x20000120
 8000860:	48000800 	.word	0x48000800
 8000864:	0800530c 	.word	0x0800530c

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	@ 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	@ 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 ff94 	bl	80047a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800088e:	f000 ff3b 	bl	8001708 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000898:	f000 f996 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2310      	movs	r3, #16
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008b6:	230a      	movs	r3, #10
 80008b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ba:	2307      	movs	r3, #7
 80008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 ff72 	bl	80017b4 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008d6:	f000 f977 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2104      	movs	r1, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fb3a 	bl	8001f6c <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fe:	f000 f963 	bl	8000bc8 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3758      	adds	r7, #88	@ 0x58
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <MX_TIM4_Init+0x94>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <MX_TIM4_Init+0x98>)
 800092e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 199;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_TIM4_Init+0x94>)
 8000932:	22c7      	movs	r2, #199	@ 0xc7
 8000934:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_TIM4_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_TIM4_Init+0x94>)
 800093e:	2263      	movs	r2, #99	@ 0x63
 8000940:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_TIM4_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_TIM4_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800094e:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_TIM4_Init+0x94>)
 8000950:	f002 f9ec 	bl	8002d2c <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f935 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_TIM4_Init+0x94>)
 800096c:	f002 fbd7 	bl	800311e <HAL_TIM_ConfigClockSource>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f927 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <MX_TIM4_Init+0x94>)
 8000988:	f002 fdee 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000992:	f000 f919 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000088 	.word	0x20000088
 80009a4:	40000800 	.word	0x40000800

080009a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <MX_TIM6_Init+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009c0:	22c7      	movs	r2, #199	@ 0xc7
 80009c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009cc:	2263      	movs	r2, #99	@ 0x63
 80009ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009d8:	f002 f9a8 	bl	8002d2c <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009e2:	f000 f8f1 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <MX_TIM6_Init+0x64>)
 80009f4:	f002 fdb8 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009fe:	f000 f8e3 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000d4 	.word	0x200000d4
 8000a10:	40001000 	.word	0x40001000

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_USART2_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a58:	f002 fe2c 	bl	80036b4 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8b1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000120 	.word	0x20000120
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a36      	ldr	r2, [pc, #216]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b34      	ldr	r3, [pc, #208]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b31      	ldr	r3, [pc, #196]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a30      	ldr	r2, [pc, #192]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f649 0120 	movw	r1, #38944	@ 0x9820
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fdc8 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_minus_GPIO_Port, DIR2_minus_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	4821      	ldr	r0, [pc, #132]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b00:	f000 fdc2 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b1c:	f000 fbf2 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_minus_Pin PUL_minus_Pin PUL2_minus_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_minus_Pin|PUL_minus_Pin|PUL2_minus_Pin;
 8000b20:	f649 0320 	movw	r3, #38944	@ 0x9820
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3c:	f000 fbe2 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_L_Pin */
  GPIO_InitStruct.Pin = Button_L_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_L_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b56:	f000 fbd5 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_minus_Pin */
  GPIO_InitStruct.Pin = DIR2_minus_Pin;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR2_minus_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b74:	f000 fbc6 	bl	8001304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000800 	.word	0x48000800

08000b88 <HAL_TIM_PeriodElapsedCallback>:
	//}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	if (htim == &htim6){
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d105      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(PUL_minus_GPIO_Port, PUL_minus_Pin);
 8000b98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f000 fd8a 	bl	80016b8 <HAL_GPIO_TogglePin>
	}

	if (htim == &htim4){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d105      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(PUL2_minus_GPIO_Port, PUL2_minus_Pin);
 8000bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f000 fd80 	bl	80016b8 <HAL_GPIO_TogglePin>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000d4 	.word	0x200000d4
 8000bc4:	20000088 	.word	0x20000088

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1a      	ldr	r2, [pc, #104]	@ (8000c94 <HAL_TIM_Base_MspInit+0x78>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d114      	bne.n	8000c58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c32:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	201e      	movs	r0, #30
 8000c4c:	f000 fb23 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c50:	201e      	movs	r0, #30
 8000c52:	f000 fb3c 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c56:	e018      	b.n	8000c8a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <HAL_TIM_Base_MspInit+0x80>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d113      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a0c      	ldr	r2, [pc, #48]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_TIM_Base_MspInit+0x7c>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2036      	movs	r0, #54	@ 0x36
 8000c80:	f000 fb09 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c84:	2036      	movs	r0, #54	@ 0x36
 8000c86:	f000 fb22 	bl	80012ce <HAL_NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40000800 	.word	0x40000800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40001000 	.word	0x40001000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2288      	movs	r2, #136	@ 0x88
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fd6f 	bl	80047a4 <memset>
  if(huart->Instance==USART2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <HAL_UART_MspInit+0xb0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13b      	bne.n	8000d48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fb69 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce8:	f7ff ff6e 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_UART_MspInit+0xb4>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f000 fade 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	37b0      	adds	r7, #176	@ 0xb0
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f953 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM4_IRQHandler+0x10>)
 8000dbe:	f002 f8ac 	bl	8002f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000088 	.word	0x20000088

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f002 f8a2 	bl	8002f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d4 	.word	0x200000d4

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc97 	bl	8000768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fca8 	bl	8004840 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20018000 	.word	0x20018000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000200 	.word	0x20000200
 8000f24:	20000358 	.word	0x20000358

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fc67 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fc13 	bl	80007a8 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f90:	0800539c 	.word	0x0800539c
  ldr r2, =_sbss
 8000f94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f98:	20000354 	.word	0x20000354

08000f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_2_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_Init+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <HAL_Init+0x3c>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f962 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f80f 	bl	8000fe0 <HAL_InitTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	e001      	b.n	8000fd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fce:	f7ff fe01 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_InitTick+0x70>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f96d 	bl	80012ea <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10f      	bne.n	8001036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d809      	bhi.n	8001030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f937 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <HAL_InitTick+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e007      	b.n	8001040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e004      	b.n	8001040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e001      	b.n	8001040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000000c 	.word	0x2000000c
 8001050:	20000004 	.word	0x20000004
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000204 	.word	0x20000204

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000204 	.word	0x20000204

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	@ (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff29 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff3e 	bl	8001128 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff31 	bl	8001144 <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e17f      	b.n	8001614 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8171 	beq.w	800160e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d005      	beq.n	8001344 <HAL_GPIO_Init+0x40>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d130      	bne.n	80013a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137a:	2201      	movs	r2, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 0201 	and.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d118      	bne.n	80013e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	6939      	ldr	r1, [r7, #16]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80ac 	beq.w	800160e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001634 <HAL_GPIO_Init+0x330>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001634 <HAL_GPIO_Init+0x330>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001634 <HAL_GPIO_Init+0x330>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001638 <HAL_GPIO_Init+0x334>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x242>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4f      	ldr	r2, [pc, #316]	@ (800163c <HAL_GPIO_Init+0x338>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x23e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4e      	ldr	r2, [pc, #312]	@ (8001640 <HAL_GPIO_Init+0x33c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x23a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4d      	ldr	r2, [pc, #308]	@ (8001644 <HAL_GPIO_Init+0x340>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x236>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4c      	ldr	r2, [pc, #304]	@ (8001648 <HAL_GPIO_Init+0x344>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x232>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4b      	ldr	r2, [pc, #300]	@ (800164c <HAL_GPIO_Init+0x348>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x22e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4a      	ldr	r2, [pc, #296]	@ (8001650 <HAL_GPIO_Init+0x34c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x22a>
 800152a:	2306      	movs	r3, #6
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800152e:	2307      	movs	r3, #7
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001546:	2300      	movs	r3, #0
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001558:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_GPIO_Init+0x334>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <HAL_GPIO_Init+0x350>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800158a:	4a32      	ldr	r2, [pc, #200]	@ (8001654 <HAL_GPIO_Init+0x350>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001590:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <HAL_GPIO_Init+0x350>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <HAL_GPIO_Init+0x350>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_GPIO_Init+0x350>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015de:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <HAL_GPIO_Init+0x350>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_GPIO_Init+0x350>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <HAL_GPIO_Init+0x350>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f47f ae78 	bne.w	8001314 <HAL_GPIO_Init+0x10>
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	48001000 	.word	0x48001000
 800164c:	48001400 	.word	0x48001400
 8001650:	48001800 	.word	0x48001800
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e001      	b.n	800167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43d9      	mvns	r1, r3
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	400b      	ands	r3, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_PWREx_GetVoltageRange+0x18>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001716:	d130      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001724:	d038      	beq.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001730:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2232      	movs	r2, #50	@ 0x32
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174c:	e002      	b.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3b01      	subs	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001760:	d102      	bne.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f2      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001774:	d110      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e00f      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001786:	d007      	beq.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001790:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001796:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000
 80017ac:	20000004 	.word	0x20000004
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e3ca      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4b97      	ldr	r3, [pc, #604]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d0:	4b94      	ldr	r3, [pc, #592]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80e4 	beq.w	80019b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_RCC_OscConfig+0x4a>
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	f040 808b 	bne.w	800190c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	f040 8087 	bne.w	800190c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fe:	4b89      	ldr	r3, [pc, #548]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x62>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e3a2      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4b82      	ldr	r3, [pc, #520]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_RCC_OscConfig+0x7c>
 8001826:	4b7f      	ldr	r3, [pc, #508]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800182e:	e005      	b.n	800183c <HAL_RCC_OscConfig+0x88>
 8001830:	4b7c      	ldr	r3, [pc, #496]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800183c:	4293      	cmp	r3, r2
 800183e:	d223      	bcs.n	8001888 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fd55 	bl	80022f4 <RCC_SetFlashLatencyFromMSIRange>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e383      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001854:	4b73      	ldr	r3, [pc, #460]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a72      	ldr	r2, [pc, #456]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b70      	ldr	r3, [pc, #448]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	496d      	ldr	r1, [pc, #436]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b6c      	ldr	r3, [pc, #432]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	4968      	ldr	r1, [pc, #416]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
 8001886:	e025      	b.n	80018d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001888:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a65      	ldr	r2, [pc, #404]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4960      	ldr	r1, [pc, #384]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	495b      	ldr	r1, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fd15 	bl	80022f4 <RCC_SetFlashLatencyFromMSIRange>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e343      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d4:	f000 fc4a 	bl	800216c <HAL_RCC_GetSysClockFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	4950      	ldr	r1, [pc, #320]	@ (8001a28 <HAL_RCC_OscConfig+0x274>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a2c <HAL_RCC_OscConfig+0x278>)
 80018f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a30 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb71 	bl	8000fe0 <HAL_InitTick>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d052      	beq.n	80019ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e327      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d032      	beq.n	800197a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001914:	4b43      	ldr	r3, [pc, #268]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a42      	ldr	r2, [pc, #264]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001920:	f7ff fbae 	bl	8001080 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001928:	f7ff fbaa 	bl	8001080 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e310      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a36      	ldr	r2, [pc, #216]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4931      	ldr	r1, [pc, #196]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	492c      	ldr	r1, [pc, #176]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e01a      	b.n	80019b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a29      	ldr	r2, [pc, #164]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001986:	f7ff fb7b 	bl	8001080 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198e:	f7ff fb77 	bl	8001080 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e2dd      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a0:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x1da>
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d074      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x21a>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d10e      	bne.n	80019e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d064      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2f0>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d160      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e2ba      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x24a>
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e026      	b.n	8001a4c <HAL_RCC_OscConfig+0x298>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x280>
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a02      	ldr	r2, [pc, #8]	@ (8001a24 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x298>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08005310 	.word	0x08005310
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000008 	.word	0x20000008
 8001a34:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a9f      	ldr	r2, [pc, #636]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb14 	bl	8001080 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fb10 	bl	8001080 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	@ 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e276      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6e:	4b92      	ldr	r3, [pc, #584]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2a8>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fb00 	bl	8001080 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fafc 	bl	8001080 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	@ 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e262      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2d0>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d060      	beq.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x310>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d119      	bne.n	8001af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d116      	bne.n	8001af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_OscConfig+0x328>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e23f      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	4973      	ldr	r1, [pc, #460]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af0:	e040      	b.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d023      	beq.n	8001b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afa:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fabb 	bl	8001080 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fab7 	bl	8001080 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e21d      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b62      	ldr	r3, [pc, #392]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	495f      	ldr	r1, [pc, #380]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e018      	b.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa97 	bl	8001080 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fa93 	bl	8001080 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1f9      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b68:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b88:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fa72 	bl	8001080 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fa6e 	bl	8001080 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1d4      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ef      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3ec>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fa55 	bl	8001080 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fa51 	bl	8001080 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1b7      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ef      	bne.n	8001bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80a6 	beq.w	8001d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	4a26      	ldr	r2, [pc, #152]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c30:	2301      	movs	r3, #1
 8001c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c34:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_RCC_OscConfig+0x508>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d118      	bne.n	8001c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c40:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <HAL_RCC_OscConfig+0x508>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <HAL_RCC_OscConfig+0x508>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fa18 	bl	8001080 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c54:	f7ff fa14 	bl	8001080 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e17a      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_RCC_OscConfig+0x508>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d108      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4d8>
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c8a:	e029      	b.n	8001ce0 <HAL_RCC_OscConfig+0x52c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d115      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x50c>
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9a:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001caa:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb4:	e014      	b.n	8001ce0 <HAL_RCC_OscConfig+0x52c>
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	4b9c      	ldr	r3, [pc, #624]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc6:	4a9b      	ldr	r2, [pc, #620]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd0:	4b98      	ldr	r3, [pc, #608]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd6:	4a97      	ldr	r2, [pc, #604]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d016      	beq.n	8001d16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f9ca 	bl	8001080 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f9c6 	bl	8001080 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e12a      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b8b      	ldr	r3, [pc, #556]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ed      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x53c>
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff f9b3 	bl	8001080 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff f9af 	bl	8001080 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e113      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	4b7f      	ldr	r3, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ed      	bne.n	8001d1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b7a      	ldr	r3, [pc, #488]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	4a79      	ldr	r2, [pc, #484]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80fe 	beq.w	8001f5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	f040 80d0 	bne.w	8001f08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d68:	4b72      	ldr	r3, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d130      	bne.n	8001dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d127      	bne.n	8001dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11f      	bne.n	8001dde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001da8:	2a07      	cmp	r2, #7
 8001daa:	bf14      	ite	ne
 8001dac:	2201      	movne	r2, #1
 8001dae:	2200      	moveq	r2, #0
 8001db0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d113      	bne.n	8001dde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d06e      	beq.n	8001ebc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d069      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de4:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001df0:	4b50      	ldr	r3, [pc, #320]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0ad      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e00:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e0c:	f7ff f938 	bl	8001080 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f934 	bl	8001080 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e09a      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e32:	4b40      	ldr	r3, [pc, #256]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <HAL_RCC_OscConfig+0x784>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e42:	3a01      	subs	r2, #1
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e4c:	0212      	lsls	r2, r2, #8
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e54:	0852      	lsrs	r2, r2, #1
 8001e56:	3a01      	subs	r2, #1
 8001e58:	0552      	lsls	r2, r2, #21
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e60:	0852      	lsrs	r2, r2, #1
 8001e62:	3a01      	subs	r2, #1
 8001e64:	0652      	lsls	r2, r2, #25
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e6c:	0912      	lsrs	r2, r2, #4
 8001e6e:	0452      	lsls	r2, r2, #17
 8001e70:	430a      	orrs	r2, r1
 8001e72:	4930      	ldr	r1, [pc, #192]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e78:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e84:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e90:	f7ff f8f6 	bl	8001080 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f8f2 	bl	8001080 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e058      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb6:	e050      	b.n	8001f5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e04f      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d148      	bne.n	8001f5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a16      	ldr	r2, [pc, #88]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ede:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ee0:	f7ff f8ce 	bl	8001080 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f8ca 	bl	8001080 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e030      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x734>
 8001f06:	e028      	b.n	8001f5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d023      	beq.n	8001f56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_RCC_OscConfig+0x780>)
 8001f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f8b1 	bl	8001080 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	e00c      	b.n	8001f3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff f8ad 	bl	8001080 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d905      	bls.n	8001f3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_RCC_OscConfig+0x7b0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ec      	bne.n	8001f22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_RCC_OscConfig+0x7b0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4905      	ldr	r1, [pc, #20]	@ (8001f64 <HAL_RCC_OscConfig+0x7b0>)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_RCC_OscConfig+0x7b4>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e001      	b.n	8001f5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	feeefffc 	.word	0xfeeefffc

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0e7      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b75      	ldr	r3, [pc, #468]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4970      	ldr	r1, [pc, #448]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0cf      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b66      	ldr	r3, [pc, #408]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d908      	bls.n	8001fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4960      	ldr	r1, [pc, #384]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d04c      	beq.n	8002084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d121      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0a6      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e09a      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002022:	4b4e      	ldr	r3, [pc, #312]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e08e      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002032:	4b4a      	ldr	r3, [pc, #296]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e086      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b46      	ldr	r3, [pc, #280]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4943      	ldr	r1, [pc, #268]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002054:	f7ff f814 	bl	8001080 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff f810 	bl	8001080 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e06e      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b31      	ldr	r3, [pc, #196]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	492b      	ldr	r1, [pc, #172]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b2:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d210      	bcs.n	80020e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	4923      	ldr	r1, [pc, #140]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e036      	b.n	8002150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ee:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4918      	ldr	r1, [pc, #96]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4910      	ldr	r1, [pc, #64]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002120:	f000 f824 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	490b      	ldr	r1, [pc, #44]	@ (8002160 <HAL_RCC_ClockConfig+0x1f4>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1f8>)
 800213e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_ClockConfig+0x1fc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe ff4b 	bl	8000fe0 <HAL_InitTick>
 800214a:	4603      	mov	r3, r0
 800214c:	72fb      	strb	r3, [r7, #11]

  return status;
 800214e:	7afb      	ldrb	r3, [r7, #11]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40022000 	.word	0x40022000
 800215c:	40021000 	.word	0x40021000
 8002160:	08005310 	.word	0x08005310
 8002164:	20000004 	.word	0x20000004
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217a:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d121      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d11e      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021a0:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021ac:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e005      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_RCC_GetSysClockFreq+0x110>)
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e004      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x114>)
 80021f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d134      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0xa6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
 8002210:	e005      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_RCC_GetSysClockFreq+0x110>)
 8002214:	617b      	str	r3, [r7, #20]
      break;
 8002216:	e005      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x114>)
 800221a:	617b      	str	r3, [r7, #20]
      break;
 800221c:	e002      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	617b      	str	r3, [r7, #20]
      break;
 8002222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	3301      	adds	r3, #1
 8002230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fb03 f202 	mul.w	r2, r3, r2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	0e5b      	lsrs	r3, r3, #25
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	3301      	adds	r3, #1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002264:	69bb      	ldr	r3, [r7, #24]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	08005328 	.word	0x08005328
 800227c:	00f42400 	.word	0x00f42400
 8002280:	007a1200 	.word	0x007a1200

08002284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_GetHCLKFreq+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022a0:	f7ff fff0 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4904      	ldr	r1, [pc, #16]	@ (80022c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08005320 	.word	0x08005320

080022c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022cc:	f7ff ffda 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0adb      	lsrs	r3, r3, #11
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4904      	ldr	r1, [pc, #16]	@ (80022f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08005320 	.word	0x08005320

080022f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002300:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800230c:	f7ff f9ee 	bl	80016ec <HAL_PWREx_GetVoltageRange>
 8002310:	6178      	str	r0, [r7, #20]
 8002312:	e014      	b.n	800233e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	4a24      	ldr	r2, [pc, #144]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002320:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800232c:	f7ff f9de 	bl	80016ec <HAL_PWREx_GetVoltageRange>
 8002330:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002344:	d10b      	bne.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d919      	bls.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002350:	d902      	bls.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002352:	2302      	movs	r3, #2
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e013      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002358:	2301      	movs	r3, #1
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e010      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b80      	cmp	r3, #128	@ 0x80
 8002362:	d902      	bls.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002364:	2303      	movs	r3, #3
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e00a      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b80      	cmp	r3, #128	@ 0x80
 800236e:	d102      	bne.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e004      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b70      	cmp	r3, #112	@ 0x70
 800237a:	d101      	bne.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 0207 	bic.w	r2, r3, #7
 8002388:	4909      	ldr	r1, [pc, #36]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d041      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023d8:	d02a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023de:	d824      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023e4:	d008      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ea:	d81e      	bhi.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f4:	d010      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023f6:	e018      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f8:	4b86      	ldr	r3, [pc, #536]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a85      	ldr	r2, [pc, #532]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002402:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002404:	e015      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fabb 	bl	8002988 <RCCEx_PLLSAI1_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002416:	e00c      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3320      	adds	r3, #32
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fba6 	bl	8002b70 <RCCEx_PLLSAI2_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002428:	e003      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	74fb      	strb	r3, [r7, #19]
      break;
 800242e:	e000      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002438:	4b76      	ldr	r3, [pc, #472]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002446:	4973      	ldr	r1, [pc, #460]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800244e:	e001      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d041      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002464:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002468:	d02a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800246a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800246e:	d824      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800247a:	d81e      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d010      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002486:	e018      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002488:	4b62      	ldr	r3, [pc, #392]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a61      	ldr	r2, [pc, #388]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002492:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002494:	e015      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fa73 	bl	8002988 <RCCEx_PLLSAI1_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a6:	e00c      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3320      	adds	r3, #32
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fb5e 	bl	8002b70 <RCCEx_PLLSAI2_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b8:	e003      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	74fb      	strb	r3, [r7, #19]
      break;
 80024be:	e000      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c8:	4b52      	ldr	r3, [pc, #328]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d6:	494f      	ldr	r1, [pc, #316]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024de:	e001      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a0 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f6:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a40      	ldr	r2, [pc, #256]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b3e      	ldr	r3, [pc, #248]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002524:	2301      	movs	r3, #1
 8002526:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002528:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a3a      	ldr	r2, [pc, #232]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002534:	f7fe fda4 	bl	8001080 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fda0 	bl	8001080 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	74fb      	strb	r3, [r7, #19]
        break;
 800254e:	e005      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d15c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002562:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01f      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	d019      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002592:	4a20      	ldr	r2, [pc, #128]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025ac:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fd5f 	bl	8001080 <HAL_GetTick>
 80025c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c4:	e00b      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fd5b 	bl	8001080 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d902      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	74fb      	strb	r3, [r7, #19]
            break;
 80025dc:	e006      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ec      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002602:	4904      	ldr	r1, [pc, #16]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800260a:	e009      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
 8002610:	e006      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b9e      	ldr	r3, [pc, #632]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	4a9d      	ldr	r2, [pc, #628]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263e:	4b98      	ldr	r3, [pc, #608]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002644:	f023 0203 	bic.w	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	4994      	ldr	r1, [pc, #592]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b8f      	ldr	r3, [pc, #572]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	f023 020c 	bic.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266e:	498c      	ldr	r1, [pc, #560]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002682:	4b87      	ldr	r3, [pc, #540]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002688:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	4983      	ldr	r1, [pc, #524]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a4:	4b7e      	ldr	r3, [pc, #504]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	497b      	ldr	r1, [pc, #492]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026c6:	4b76      	ldr	r3, [pc, #472]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	4972      	ldr	r1, [pc, #456]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e8:	4b6d      	ldr	r3, [pc, #436]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	496a      	ldr	r1, [pc, #424]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270a:	4b65      	ldr	r3, [pc, #404]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	4961      	ldr	r1, [pc, #388]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800272c:	4b5c      	ldr	r3, [pc, #368]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273a:	4959      	ldr	r1, [pc, #356]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274e:	4b54      	ldr	r3, [pc, #336]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275c:	4950      	ldr	r1, [pc, #320]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002770:	4b4b      	ldr	r3, [pc, #300]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	4948      	ldr	r1, [pc, #288]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002792:	4b43      	ldr	r3, [pc, #268]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	493f      	ldr	r1, [pc, #252]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d028      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027b4:	4b3a      	ldr	r3, [pc, #232]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c2:	4937      	ldr	r1, [pc, #220]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d4:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a31      	ldr	r2, [pc, #196]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027de:	60d3      	str	r3, [r2, #12]
 80027e0:	e011      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ea:	d10c      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f8c8 	bl	8002988 <RCCEx_PLLSAI1_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d028      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002812:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	491f      	ldr	r1, [pc, #124]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002830:	d106      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a1a      	ldr	r2, [pc, #104]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
 800283e:	e011      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002848:	d10c      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f899 	bl	8002988 <RCCEx_PLLSAI1_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02b      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288e:	d109      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a02      	ldr	r2, [pc, #8]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800289a:	60d3      	str	r3, [r2, #12]
 800289c:	e014      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f867 	bl	8002988 <RCCEx_PLLSAI1_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028e2:	4928      	ldr	r1, [pc, #160]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028f2:	d10d      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	2102      	movs	r1, #2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f844 	bl	8002988 <RCCEx_PLLSAI1_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	74bb      	strb	r3, [r7, #18]
 800290e:	e011      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002918:	d10c      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3320      	adds	r3, #32
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f925 	bl	8002b70 <RCCEx_PLLSAI2_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002946:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294e:	490d      	ldr	r1, [pc, #52]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002968:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002972:	4904      	ldr	r1, [pc, #16]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800297a:	7cbb      	ldrb	r3, [r7, #18]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002996:	4b75      	ldr	r3, [pc, #468]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029a2:	4b72      	ldr	r3, [pc, #456]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0203 	and.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d10d      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
       ||
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ba:	4b6c      	ldr	r3, [pc, #432]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
       ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d047      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e044      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d018      	beq.n	8002a0e <RCCEx_PLLSAI1_Config+0x86>
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d825      	bhi.n	8002a2c <RCCEx_PLLSAI1_Config+0xa4>
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0x62>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d009      	beq.n	80029fc <RCCEx_PLLSAI1_Config+0x74>
 80029e8:	e020      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ea:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11d      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fa:	e01a      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029fc:	4b5b      	ldr	r3, [pc, #364]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d116      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0c:	e013      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a0e:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a1a:	4b54      	ldr	r3, [pc, #336]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a2a:	e006      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e004      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a32:	bf00      	nop
 8002a34:	e002      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a42:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	430b      	orrs	r3, r1
 8002a58:	4944      	ldr	r1, [pc, #272]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d17d      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a64:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a40      	ldr	r2, [pc, #256]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a70:	f7fe fb06 	bl	8001080 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a76:	e009      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a78:	f7fe fb02 	bl	8001080 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	73fb      	strb	r3, [r7, #15]
        break;
 8002a8a:	e005      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ef      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d160      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa4:	4b31      	ldr	r3, [pc, #196]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6892      	ldr	r2, [r2, #8]
 8002ab4:	0211      	lsls	r1, r2, #8
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	0912      	lsrs	r2, r2, #4
 8002abc:	0452      	lsls	r2, r2, #17
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	492a      	ldr	r1, [pc, #168]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	610b      	str	r3, [r1, #16]
 8002ac6:	e027      	b.n	8002b18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d112      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ad6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6892      	ldr	r2, [r2, #8]
 8002ade:	0211      	lsls	r1, r2, #8
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6912      	ldr	r2, [r2, #16]
 8002ae4:	0852      	lsrs	r2, r2, #1
 8002ae6:	3a01      	subs	r2, #1
 8002ae8:	0552      	lsls	r2, r2, #21
 8002aea:	430a      	orrs	r2, r1
 8002aec:	491f      	ldr	r1, [pc, #124]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	610b      	str	r3, [r1, #16]
 8002af2:	e011      	b.n	8002b18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002afc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6892      	ldr	r2, [r2, #8]
 8002b04:	0211      	lsls	r1, r2, #8
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6952      	ldr	r2, [r2, #20]
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	0652      	lsls	r2, r2, #25
 8002b10:	430a      	orrs	r2, r1
 8002b12:	4916      	ldr	r1, [pc, #88]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b18:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe faac 	bl	8001080 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2a:	e009      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b2c:	f7fe faa8 	bl	8001080 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d902      	bls.n	8002b40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b3e:	e005      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ef      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	4904      	ldr	r1, [pc, #16]	@ (8002b6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b8a:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d10d      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ba2:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d047      	beq.n	8002c46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e044      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d018      	beq.n	8002bf6 <RCCEx_PLLSAI2_Config+0x86>
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d825      	bhi.n	8002c14 <RCCEx_PLLSAI2_Config+0xa4>
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d002      	beq.n	8002bd2 <RCCEx_PLLSAI2_Config+0x62>
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d009      	beq.n	8002be4 <RCCEx_PLLSAI2_Config+0x74>
 8002bd0:	e020      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bd2:	4b55      	ldr	r3, [pc, #340]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11d      	bne.n	8002c1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be2:	e01a      	b.n	8002c1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002be4:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d116      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf4:	e013      	b.n	8002c1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c02:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c12:	e006      	b.n	8002c22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e004      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e002      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	4939      	ldr	r1, [pc, #228]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d167      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a35      	ldr	r2, [pc, #212]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c58:	f7fe fa12 	bl	8001080 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c5e:	e009      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c60:	f7fe fa0e 	bl	8001080 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	73fb      	strb	r3, [r7, #15]
        break;
 8002c72:	e005      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ef      	bne.n	8002c60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d14a      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d111      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c8c:	4b26      	ldr	r3, [pc, #152]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	0211      	lsls	r1, r2, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68d2      	ldr	r2, [r2, #12]
 8002ca2:	0912      	lsrs	r2, r2, #4
 8002ca4:	0452      	lsls	r2, r2, #17
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	491f      	ldr	r1, [pc, #124]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	614b      	str	r3, [r1, #20]
 8002cae:	e011      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6912      	ldr	r2, [r2, #16]
 8002cc6:	0852      	lsrs	r2, r2, #1
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	0652      	lsls	r2, r2, #25
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe f9ce 	bl	8001080 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce6:	e009      	b.n	8002cfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce8:	f7fe f9ca 	bl	8001080 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cfa:	e005      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e049      	b.n	8002dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd ff62 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fac8 	bl	8003300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04f      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01d      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1e:	d018      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1c      	ldr	r2, [pc, #112]	@ (8002eac <HAL_TIM_Base_Start_IT+0xd0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x76>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d115      	bne.n	8002e7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d015      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0xb4>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6a:	d011      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7c:	e008      	b.n	8002e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e000      	b.n	8002e92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40013400 	.word	0x40013400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	00010007 	.word	0x00010007

08002ebc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10f      	bne.n	8002f04 <HAL_TIM_Base_Stop_IT+0x48>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_Base_Stop_IT+0x48>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01b      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0202 	mvn.w	r2, #2
 8002f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9ad 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002f6a:	e005      	b.n	8002f78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f99f 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9b0 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01b      	beq.n	8002fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0204 	mvn.w	r2, #4
 8002f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f987 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8002fb6:	e005      	b.n	8002fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f979 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f98a 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0208 	mvn.w	r2, #8
 8002fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2204      	movs	r2, #4
 8002fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f961 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 8003002:	e005      	b.n	8003010 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f953 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f964 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01b      	beq.n	8003062 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0210 	mvn.w	r2, #16
 8003032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2208      	movs	r2, #8
 8003038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f93b 	bl	80032c4 <HAL_TIM_IC_CaptureCallback>
 800304e:	e005      	b.n	800305c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f92d 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f93e 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0201 	mvn.w	r2, #1
 800307e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fd81 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 faf1 	bl	800368c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00c      	beq.n	80030ce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fae9 	bl	80036a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8fd 	bl	80032ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00c      	beq.n	8003116 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0220 	mvn.w	r2, #32
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fab1 	bl	8003678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_ConfigClockSource+0x1c>
 8003136:	2302      	movs	r3, #2
 8003138:	e0b6      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x18a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003158:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800315c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003164:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003176:	d03e      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0xd8>
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317c:	f200 8087 	bhi.w	800328e <HAL_TIM_ConfigClockSource+0x170>
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	f000 8086 	beq.w	8003294 <HAL_TIM_ConfigClockSource+0x176>
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318c:	d87f      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 800318e:	2b70      	cmp	r3, #112	@ 0x70
 8003190:	d01a      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0xaa>
 8003192:	2b70      	cmp	r3, #112	@ 0x70
 8003194:	d87b      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 8003196:	2b60      	cmp	r3, #96	@ 0x60
 8003198:	d050      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x11e>
 800319a:	2b60      	cmp	r3, #96	@ 0x60
 800319c:	d877      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 800319e:	2b50      	cmp	r3, #80	@ 0x50
 80031a0:	d03c      	beq.n	800321c <HAL_TIM_ConfigClockSource+0xfe>
 80031a2:	2b50      	cmp	r3, #80	@ 0x50
 80031a4:	d873      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d058      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x13e>
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d86f      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 80031ae:	2b30      	cmp	r3, #48	@ 0x30
 80031b0:	d064      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x15e>
 80031b2:	2b30      	cmp	r3, #48	@ 0x30
 80031b4:	d86b      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d060      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x15e>
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d867      	bhi.n	800328e <HAL_TIM_ConfigClockSource+0x170>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d05c      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x15e>
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d05a      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x15e>
 80031c6:	e062      	b.n	800328e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d8:	f000 f9a6 	bl	8003528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
      break;
 80031f4:	e04f      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	f000 f98f 	bl	8003528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e03c      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003228:	461a      	mov	r2, r3
 800322a:	f000 f903 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2150      	movs	r1, #80	@ 0x50
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f95c 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800323a:	e02c      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003248:	461a      	mov	r2, r3
 800324a:	f000 f922 	bl	8003492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2160      	movs	r1, #96	@ 0x60
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f94c 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800325a:	e01c      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003268:	461a      	mov	r2, r3
 800326a:	f000 f8e3 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2140      	movs	r1, #64	@ 0x40
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f93c 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800327a:	e00c      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 f933 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800328c:	e003      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      break;
 8003292:	e000      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <TIM_Base_SetConfig+0x114>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3d      	ldr	r2, [pc, #244]	@ (8003418 <TIM_Base_SetConfig+0x118>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3c      	ldr	r2, [pc, #240]	@ (800341c <TIM_Base_SetConfig+0x11c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3b      	ldr	r2, [pc, #236]	@ (8003420 <TIM_Base_SetConfig+0x120>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3a      	ldr	r2, [pc, #232]	@ (8003424 <TIM_Base_SetConfig+0x124>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2f      	ldr	r2, [pc, #188]	@ (8003414 <TIM_Base_SetConfig+0x114>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01f      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d01b      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2c      	ldr	r2, [pc, #176]	@ (8003418 <TIM_Base_SetConfig+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d017      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <TIM_Base_SetConfig+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2a      	ldr	r2, [pc, #168]	@ (8003420 <TIM_Base_SetConfig+0x120>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a29      	ldr	r2, [pc, #164]	@ (8003424 <TIM_Base_SetConfig+0x124>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a28      	ldr	r2, [pc, #160]	@ (8003428 <TIM_Base_SetConfig+0x128>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a27      	ldr	r2, [pc, #156]	@ (800342c <TIM_Base_SetConfig+0x12c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x9a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a26      	ldr	r2, [pc, #152]	@ (8003430 <TIM_Base_SetConfig+0x130>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <TIM_Base_SetConfig+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00f      	beq.n	80033f8 <TIM_Base_SetConfig+0xf8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <TIM_Base_SetConfig+0x124>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_Base_SetConfig+0xf8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <TIM_Base_SetConfig+0x128>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_Base_SetConfig+0xf8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a10      	ldr	r2, [pc, #64]	@ (800342c <TIM_Base_SetConfig+0x12c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0xf8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003430 <TIM_Base_SetConfig+0x130>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40013400 	.word	0x40013400
 8003428:	40014000 	.word	0x40014000
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 030a 	bic.w	r3, r3, #10
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 0210 	bic.w	r2, r3, #16
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	f043 0307 	orr.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	431a      	orrs	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e068      	b.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80035ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f2:	d018      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a18      	ldr	r2, [pc, #96]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10c      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800362c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4313      	orrs	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40013400 	.word	0x40013400
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40014000 	.word	0x40014000

08003678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e040      	b.n	8003748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fae2 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fc32 	bl	8003f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f977 	bl	80039f4 <UART_SetConfig>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e01b      	b.n	8003748 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800371e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800372e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fcb1 	bl	80040a8 <UART_CheckIdleState>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003764:	2b20      	cmp	r3, #32
 8003766:	d177      	bne.n	8003858 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Transmit+0x24>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e070      	b.n	800385a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	@ 0x21
 8003784:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003786:	f7fd fc7b 	bl	8001080 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	d108      	bne.n	80037b8 <HAL_UART_Transmit+0x68>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e003      	b.n	80037c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c0:	e02f      	b.n	8003822 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fd13 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e03b      	b.n	800385a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	881a      	ldrh	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	b292      	uxth	r2, r2
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3302      	adds	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e007      	b.n	8003810 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1c9      	bne.n	80037c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	@ 0x40
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fcdd 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e005      	b.n	800385a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	@ 0x28
 8003866:	af02      	add	r7, sp, #8
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003878:	2b20      	cmp	r3, #32
 800387a:	f040 80b6 	bne.w	80039ea <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_UART_Receive+0x28>
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0ae      	b.n	80039ec <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2222      	movs	r2, #34	@ 0x22
 800389a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a4:	f7fd fbec 	bl	8001080 <HAL_GetTick>
 80038a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c2:	d10e      	bne.n	80038e2 <HAL_UART_Receive+0x80>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_Receive+0x76>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80038d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038d6:	e02d      	b.n	8003934 <HAL_UART_Receive+0xd2>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	22ff      	movs	r2, #255	@ 0xff
 80038dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038e0:	e028      	b.n	8003934 <HAL_UART_Receive+0xd2>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_UART_Receive+0xa4>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Receive+0x9a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	22ff      	movs	r2, #255	@ 0xff
 80038f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038fa:	e01b      	b.n	8003934 <HAL_UART_Receive+0xd2>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	227f      	movs	r2, #127	@ 0x7f
 8003900:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003904:	e016      	b.n	8003934 <HAL_UART_Receive+0xd2>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390e:	d10d      	bne.n	800392c <HAL_UART_Receive+0xca>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_UART_Receive+0xc0>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	227f      	movs	r2, #127	@ 0x7f
 800391c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003920:	e008      	b.n	8003934 <HAL_UART_Receive+0xd2>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	223f      	movs	r2, #63	@ 0x3f
 8003926:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800392a:	e003      	b.n	8003934 <HAL_UART_Receive+0xd2>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800393a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003944:	d108      	bne.n	8003958 <HAL_UART_Receive+0xf6>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e003      	b.n	8003960 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003960:	e037      	b.n	80039d2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2120      	movs	r1, #32
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fc43 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e033      	b.n	80039ec <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003990:	b29a      	uxth	r2, r3
 8003992:	8a7b      	ldrh	r3, [r7, #18]
 8003994:	4013      	ands	r3, r2
 8003996:	b29a      	uxth	r2, r3
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3302      	adds	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e00d      	b.n	80039c0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	8a7b      	ldrh	r3, [r7, #18]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4013      	ands	r3, r2
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1c1      	bne.n	8003962 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b08a      	sub	sp, #40	@ 0x28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4ba4      	ldr	r3, [pc, #656]	@ (8003cb4 <UART_SetConfig+0x2c0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a99      	ldr	r2, [pc, #612]	@ (8003cb8 <UART_SetConfig+0x2c4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a90      	ldr	r2, [pc, #576]	@ (8003cbc <UART_SetConfig+0x2c8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d126      	bne.n	8003acc <UART_SetConfig+0xd8>
 8003a7e:	4b90      	ldr	r3, [pc, #576]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d81b      	bhi.n	8003ac4 <UART_SetConfig+0xd0>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <UART_SetConfig+0xa0>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003abd 	.word	0x08003abd
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	e116      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab2:	e112      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aba:	e10e      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003abc:	2308      	movs	r3, #8
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e10a      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e106      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc4 <UART_SetConfig+0x2d0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d138      	bne.n	8003b48 <UART_SetConfig+0x154>
 8003ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d82d      	bhi.n	8003b40 <UART_SetConfig+0x14c>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <UART_SetConfig+0xf8>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b21 	.word	0x08003b21
 8003af0:	08003b41 	.word	0x08003b41
 8003af4:	08003b41 	.word	0x08003b41
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003b41 	.word	0x08003b41
 8003b04:	08003b41 	.word	0x08003b41
 8003b08:	08003b41 	.word	0x08003b41
 8003b0c:	08003b29 	.word	0x08003b29
 8003b10:	08003b41 	.word	0x08003b41
 8003b14:	08003b41 	.word	0x08003b41
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b39 	.word	0x08003b39
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b26:	e0d8      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2e:	e0d4      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e0d0      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e0cc      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e0c8      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003cc8 <UART_SetConfig+0x2d4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d125      	bne.n	8003b9e <UART_SetConfig+0x1aa>
 8003b52:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b5c:	2b30      	cmp	r3, #48	@ 0x30
 8003b5e:	d016      	beq.n	8003b8e <UART_SetConfig+0x19a>
 8003b60:	2b30      	cmp	r3, #48	@ 0x30
 8003b62:	d818      	bhi.n	8003b96 <UART_SetConfig+0x1a2>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d00a      	beq.n	8003b7e <UART_SetConfig+0x18a>
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d814      	bhi.n	8003b96 <UART_SetConfig+0x1a2>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <UART_SetConfig+0x182>
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d008      	beq.n	8003b86 <UART_SetConfig+0x192>
 8003b74:	e00f      	b.n	8003b96 <UART_SetConfig+0x1a2>
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7c:	e0ad      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b84:	e0a9      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b86:	2304      	movs	r3, #4
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8c:	e0a5      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b94:	e0a1      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b96:	2310      	movs	r3, #16
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	e09d      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <UART_SetConfig+0x2d8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d125      	bne.n	8003bf4 <UART_SetConfig+0x200>
 8003ba8:	4b45      	ldr	r3, [pc, #276]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bb4:	d016      	beq.n	8003be4 <UART_SetConfig+0x1f0>
 8003bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bb8:	d818      	bhi.n	8003bec <UART_SetConfig+0x1f8>
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d00a      	beq.n	8003bd4 <UART_SetConfig+0x1e0>
 8003bbe:	2b80      	cmp	r3, #128	@ 0x80
 8003bc0:	d814      	bhi.n	8003bec <UART_SetConfig+0x1f8>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <UART_SetConfig+0x1d8>
 8003bc6:	2b40      	cmp	r3, #64	@ 0x40
 8003bc8:	d008      	beq.n	8003bdc <UART_SetConfig+0x1e8>
 8003bca:	e00f      	b.n	8003bec <UART_SetConfig+0x1f8>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e082      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e07e      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e07a      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003be4:	2308      	movs	r3, #8
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e076      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003bec:	2310      	movs	r3, #16
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e072      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	@ (8003cd0 <UART_SetConfig+0x2dc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d12a      	bne.n	8003c54 <UART_SetConfig+0x260>
 8003bfe:	4b30      	ldr	r3, [pc, #192]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c0c:	d01a      	beq.n	8003c44 <UART_SetConfig+0x250>
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c12:	d81b      	bhi.n	8003c4c <UART_SetConfig+0x258>
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c18:	d00c      	beq.n	8003c34 <UART_SetConfig+0x240>
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c1e:	d815      	bhi.n	8003c4c <UART_SetConfig+0x258>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <UART_SetConfig+0x238>
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c28:	d008      	beq.n	8003c3c <UART_SetConfig+0x248>
 8003c2a:	e00f      	b.n	8003c4c <UART_SetConfig+0x258>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e052      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3a:	e04e      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c42:	e04a      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e046      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e042      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a17      	ldr	r2, [pc, #92]	@ (8003cb8 <UART_SetConfig+0x2c4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d13a      	bne.n	8003cd4 <UART_SetConfig+0x2e0>
 8003c5e:	4b18      	ldr	r3, [pc, #96]	@ (8003cc0 <UART_SetConfig+0x2cc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c6c:	d01a      	beq.n	8003ca4 <UART_SetConfig+0x2b0>
 8003c6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c72:	d81b      	bhi.n	8003cac <UART_SetConfig+0x2b8>
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c78:	d00c      	beq.n	8003c94 <UART_SetConfig+0x2a0>
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c7e:	d815      	bhi.n	8003cac <UART_SetConfig+0x2b8>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <UART_SetConfig+0x298>
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c88:	d008      	beq.n	8003c9c <UART_SetConfig+0x2a8>
 8003c8a:	e00f      	b.n	8003cac <UART_SetConfig+0x2b8>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c92:	e022      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9a:	e01e      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca2:	e01a      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e016      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003cac:	2310      	movs	r3, #16
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e012      	b.n	8003cda <UART_SetConfig+0x2e6>
 8003cb4:	efff69f3 	.word	0xefff69f3
 8003cb8:	40008000 	.word	0x40008000
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40004400 	.word	0x40004400
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	40004c00 	.word	0x40004c00
 8003cd0:	40005000 	.word	0x40005000
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a9f      	ldr	r2, [pc, #636]	@ (8003f5c <UART_SetConfig+0x568>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d17a      	bne.n	8003dda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d824      	bhi.n	8003d36 <UART_SetConfig+0x342>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <UART_SetConfig+0x300>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d37 	.word	0x08003d37
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d27 	.word	0x08003d27
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d37 	.word	0x08003d37
 8003d10:	08003d37 	.word	0x08003d37
 8003d14:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7fe fac0 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8003d1c:	61f8      	str	r0, [r7, #28]
        break;
 8003d1e:	e010      	b.n	8003d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <UART_SetConfig+0x56c>)
 8003d22:	61fb      	str	r3, [r7, #28]
        break;
 8003d24:	e00d      	b.n	8003d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7fe fa21 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8003d2a:	61f8      	str	r0, [r7, #28]
        break;
 8003d2c:	e009      	b.n	8003d42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d32:	61fb      	str	r3, [r7, #28]
        break;
 8003d34:	e005      	b.n	8003d42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80fb 	beq.w	8003f40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d305      	bcc.n	8003d66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d903      	bls.n	8003d6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d6c:	e0e8      	b.n	8003f40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2200      	movs	r2, #0
 8003d72:	461c      	mov	r4, r3
 8003d74:	4615      	mov	r5, r2
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	022b      	lsls	r3, r5, #8
 8003d80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d84:	0222      	lsls	r2, r4, #8
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	6849      	ldr	r1, [r1, #4]
 8003d8a:	0849      	lsrs	r1, r1, #1
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	4688      	mov	r8, r1
 8003d90:	4681      	mov	r9, r0
 8003d92:	eb12 0a08 	adds.w	sl, r2, r8
 8003d96:	eb43 0b09 	adc.w	fp, r3, r9
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003da8:	4650      	mov	r0, sl
 8003daa:	4659      	mov	r1, fp
 8003dac:	f7fc fa70 	bl	8000290 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dbe:	d308      	bcc.n	8003dd2 <UART_SetConfig+0x3de>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc6:	d204      	bcs.n	8003dd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	60da      	str	r2, [r3, #12]
 8003dd0:	e0b6      	b.n	8003f40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dd8:	e0b2      	b.n	8003f40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de2:	d15e      	bne.n	8003ea2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d828      	bhi.n	8003e3e <UART_SetConfig+0x44a>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <UART_SetConfig+0x400>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fe fa40 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61f8      	str	r0, [r7, #28]
        break;
 8003e1e:	e014      	b.n	8003e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fa52 	bl	80022c8 <HAL_RCC_GetPCLK2Freq>
 8003e24:	61f8      	str	r0, [r7, #28]
        break;
 8003e26:	e010      	b.n	8003e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b4d      	ldr	r3, [pc, #308]	@ (8003f60 <UART_SetConfig+0x56c>)
 8003e2a:	61fb      	str	r3, [r7, #28]
        break;
 8003e2c:	e00d      	b.n	8003e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7fe f99d 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8003e32:	61f8      	str	r0, [r7, #28]
        break;
 8003e34:	e009      	b.n	8003e4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3a:	61fb      	str	r3, [r7, #28]
        break;
 8003e3c:	e005      	b.n	8003e4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d077      	beq.n	8003f40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d916      	bls.n	8003e9a <UART_SetConfig+0x4a6>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e72:	d212      	bcs.n	8003e9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f023 030f 	bic.w	r3, r3, #15
 8003e7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	8afb      	ldrh	r3, [r7, #22]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	8afa      	ldrh	r2, [r7, #22]
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	e052      	b.n	8003f40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ea0:	e04e      	b.n	8003f40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d827      	bhi.n	8003efa <UART_SetConfig+0x506>
 8003eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <UART_SetConfig+0x4bc>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003eeb 	.word	0x08003eeb
 8003ec4:	08003efb 	.word	0x08003efb
 8003ec8:	08003efb 	.word	0x08003efb
 8003ecc:	08003efb 	.word	0x08003efb
 8003ed0:	08003ef3 	.word	0x08003ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7fe f9e2 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8003ed8:	61f8      	str	r0, [r7, #28]
        break;
 8003eda:	e014      	b.n	8003f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7fe f9f4 	bl	80022c8 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	61f8      	str	r0, [r7, #28]
        break;
 8003ee2:	e010      	b.n	8003f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <UART_SetConfig+0x56c>)
 8003ee6:	61fb      	str	r3, [r7, #28]
        break;
 8003ee8:	e00d      	b.n	8003f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eea:	f7fe f93f 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8003eee:	61f8      	str	r0, [r7, #28]
        break;
 8003ef0:	e009      	b.n	8003f06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef6:	61fb      	str	r3, [r7, #28]
        break;
 8003ef8:	e005      	b.n	8003f06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f04:	bf00      	nop
    }

    if (pclk != 0U)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	085a      	lsrs	r2, r3, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d909      	bls.n	8003f3a <UART_SetConfig+0x546>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d205      	bcs.n	8003f3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	e002      	b.n	8003f40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3728      	adds	r7, #40	@ 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40008000 	.word	0x40008000
 8003f60:	00f42400 	.word	0x00f42400

08003f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01a      	beq.n	800407a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004062:	d10a      	bne.n	800407a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b098      	sub	sp, #96	@ 0x60
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b8:	f7fc ffe2 	bl	8001080 <HAL_GetTick>
 80040bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d12e      	bne.n	800412a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d4:	2200      	movs	r2, #0
 80040d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f88c 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d021      	beq.n	800412a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004104:	647b      	str	r3, [r7, #68]	@ 0x44
 8004106:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800410a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e6      	bne.n	80040e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e062      	b.n	80041f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d149      	bne.n	80041cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004138:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f856 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d03c      	beq.n	80041cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	623b      	str	r3, [r7, #32]
   return(result);
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
 8004172:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800417e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e6      	bne.n	8004152 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	60fb      	str	r3, [r7, #12]
   return(result);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041a4:	61fa      	str	r2, [r7, #28]
 80041a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	617b      	str	r3, [r7, #20]
   return(result);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e5      	bne.n	8004184 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e011      	b.n	80041f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3758      	adds	r7, #88	@ 0x58
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	e049      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d045      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fc ff35 	bl	8001080 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <UART_WaitOnFlagUntilTimeout+0x30>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e048      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d031      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b08      	cmp	r3, #8
 8004246:	d110      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2208      	movs	r2, #8
 800424e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f838 	bl	80042c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2208      	movs	r2, #8
 800425a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e029      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004278:	d111      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f81e 	bl	80042c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e00f      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0a6      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b095      	sub	sp, #84	@ 0x54
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3308      	adds	r3, #8
 8004306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	2b01      	cmp	r3, #1
 800433a:	d118      	bne.n	800436e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	60bb      	str	r3, [r7, #8]
   return(result);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0310 	bic.w	r3, r3, #16
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004382:	bf00      	nop
 8004384:	3754      	adds	r7, #84	@ 0x54
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <std>:
 8004390:	2300      	movs	r3, #0
 8004392:	b510      	push	{r4, lr}
 8004394:	4604      	mov	r4, r0
 8004396:	e9c0 3300 	strd	r3, r3, [r0]
 800439a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800439e:	6083      	str	r3, [r0, #8]
 80043a0:	8181      	strh	r1, [r0, #12]
 80043a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80043a4:	81c2      	strh	r2, [r0, #14]
 80043a6:	6183      	str	r3, [r0, #24]
 80043a8:	4619      	mov	r1, r3
 80043aa:	2208      	movs	r2, #8
 80043ac:	305c      	adds	r0, #92	@ 0x5c
 80043ae:	f000 f9f9 	bl	80047a4 <memset>
 80043b2:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <std+0x58>)
 80043b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <std+0x5c>)
 80043b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043ba:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <std+0x60>)
 80043bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <std+0x64>)
 80043c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80043c2:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <std+0x68>)
 80043c4:	6224      	str	r4, [r4, #32]
 80043c6:	429c      	cmp	r4, r3
 80043c8:	d006      	beq.n	80043d8 <std+0x48>
 80043ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043ce:	4294      	cmp	r4, r2
 80043d0:	d002      	beq.n	80043d8 <std+0x48>
 80043d2:	33d0      	adds	r3, #208	@ 0xd0
 80043d4:	429c      	cmp	r4, r3
 80043d6:	d105      	bne.n	80043e4 <std+0x54>
 80043d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	f000 ba58 	b.w	8004894 <__retarget_lock_init_recursive>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	bf00      	nop
 80043e8:	080045f5 	.word	0x080045f5
 80043ec:	08004617 	.word	0x08004617
 80043f0:	0800464f 	.word	0x0800464f
 80043f4:	08004673 	.word	0x08004673
 80043f8:	20000208 	.word	0x20000208

080043fc <stdio_exit_handler>:
 80043fc:	4a02      	ldr	r2, [pc, #8]	@ (8004408 <stdio_exit_handler+0xc>)
 80043fe:	4903      	ldr	r1, [pc, #12]	@ (800440c <stdio_exit_handler+0x10>)
 8004400:	4803      	ldr	r0, [pc, #12]	@ (8004410 <stdio_exit_handler+0x14>)
 8004402:	f000 b869 	b.w	80044d8 <_fwalk_sglue>
 8004406:	bf00      	nop
 8004408:	20000010 	.word	0x20000010
 800440c:	08005135 	.word	0x08005135
 8004410:	20000020 	.word	0x20000020

08004414 <cleanup_stdio>:
 8004414:	6841      	ldr	r1, [r0, #4]
 8004416:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <cleanup_stdio+0x34>)
 8004418:	4299      	cmp	r1, r3
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	d001      	beq.n	8004424 <cleanup_stdio+0x10>
 8004420:	f000 fe88 	bl	8005134 <_fflush_r>
 8004424:	68a1      	ldr	r1, [r4, #8]
 8004426:	4b09      	ldr	r3, [pc, #36]	@ (800444c <cleanup_stdio+0x38>)
 8004428:	4299      	cmp	r1, r3
 800442a:	d002      	beq.n	8004432 <cleanup_stdio+0x1e>
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fe81 	bl	8005134 <_fflush_r>
 8004432:	68e1      	ldr	r1, [r4, #12]
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <cleanup_stdio+0x3c>)
 8004436:	4299      	cmp	r1, r3
 8004438:	d004      	beq.n	8004444 <cleanup_stdio+0x30>
 800443a:	4620      	mov	r0, r4
 800443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004440:	f000 be78 	b.w	8005134 <_fflush_r>
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	20000208 	.word	0x20000208
 800444c:	20000270 	.word	0x20000270
 8004450:	200002d8 	.word	0x200002d8

08004454 <global_stdio_init.part.0>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <global_stdio_init.part.0+0x30>)
 8004458:	4c0b      	ldr	r4, [pc, #44]	@ (8004488 <global_stdio_init.part.0+0x34>)
 800445a:	4a0c      	ldr	r2, [pc, #48]	@ (800448c <global_stdio_init.part.0+0x38>)
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	4620      	mov	r0, r4
 8004460:	2200      	movs	r2, #0
 8004462:	2104      	movs	r1, #4
 8004464:	f7ff ff94 	bl	8004390 <std>
 8004468:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800446c:	2201      	movs	r2, #1
 800446e:	2109      	movs	r1, #9
 8004470:	f7ff ff8e 	bl	8004390 <std>
 8004474:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004478:	2202      	movs	r2, #2
 800447a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447e:	2112      	movs	r1, #18
 8004480:	f7ff bf86 	b.w	8004390 <std>
 8004484:	20000340 	.word	0x20000340
 8004488:	20000208 	.word	0x20000208
 800448c:	080043fd 	.word	0x080043fd

08004490 <__sfp_lock_acquire>:
 8004490:	4801      	ldr	r0, [pc, #4]	@ (8004498 <__sfp_lock_acquire+0x8>)
 8004492:	f000 ba00 	b.w	8004896 <__retarget_lock_acquire_recursive>
 8004496:	bf00      	nop
 8004498:	20000349 	.word	0x20000349

0800449c <__sfp_lock_release>:
 800449c:	4801      	ldr	r0, [pc, #4]	@ (80044a4 <__sfp_lock_release+0x8>)
 800449e:	f000 b9fb 	b.w	8004898 <__retarget_lock_release_recursive>
 80044a2:	bf00      	nop
 80044a4:	20000349 	.word	0x20000349

080044a8 <__sinit>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	f7ff fff0 	bl	8004490 <__sfp_lock_acquire>
 80044b0:	6a23      	ldr	r3, [r4, #32]
 80044b2:	b11b      	cbz	r3, 80044bc <__sinit+0x14>
 80044b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b8:	f7ff bff0 	b.w	800449c <__sfp_lock_release>
 80044bc:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <__sinit+0x28>)
 80044be:	6223      	str	r3, [r4, #32]
 80044c0:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <__sinit+0x2c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f5      	bne.n	80044b4 <__sinit+0xc>
 80044c8:	f7ff ffc4 	bl	8004454 <global_stdio_init.part.0>
 80044cc:	e7f2      	b.n	80044b4 <__sinit+0xc>
 80044ce:	bf00      	nop
 80044d0:	08004415 	.word	0x08004415
 80044d4:	20000340 	.word	0x20000340

080044d8 <_fwalk_sglue>:
 80044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044dc:	4607      	mov	r7, r0
 80044de:	4688      	mov	r8, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	2600      	movs	r6, #0
 80044e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044e8:	f1b9 0901 	subs.w	r9, r9, #1
 80044ec:	d505      	bpl.n	80044fa <_fwalk_sglue+0x22>
 80044ee:	6824      	ldr	r4, [r4, #0]
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d1f7      	bne.n	80044e4 <_fwalk_sglue+0xc>
 80044f4:	4630      	mov	r0, r6
 80044f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044fa:	89ab      	ldrh	r3, [r5, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d907      	bls.n	8004510 <_fwalk_sglue+0x38>
 8004500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004504:	3301      	adds	r3, #1
 8004506:	d003      	beq.n	8004510 <_fwalk_sglue+0x38>
 8004508:	4629      	mov	r1, r5
 800450a:	4638      	mov	r0, r7
 800450c:	47c0      	blx	r8
 800450e:	4306      	orrs	r6, r0
 8004510:	3568      	adds	r5, #104	@ 0x68
 8004512:	e7e9      	b.n	80044e8 <_fwalk_sglue+0x10>

08004514 <iprintf>:
 8004514:	b40f      	push	{r0, r1, r2, r3}
 8004516:	b507      	push	{r0, r1, r2, lr}
 8004518:	4906      	ldr	r1, [pc, #24]	@ (8004534 <iprintf+0x20>)
 800451a:	ab04      	add	r3, sp, #16
 800451c:	6808      	ldr	r0, [r1, #0]
 800451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004522:	6881      	ldr	r1, [r0, #8]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	f000 fadb 	bl	8004ae0 <_vfiprintf_r>
 800452a:	b003      	add	sp, #12
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b004      	add	sp, #16
 8004532:	4770      	bx	lr
 8004534:	2000001c 	.word	0x2000001c

08004538 <_puts_r>:
 8004538:	6a03      	ldr	r3, [r0, #32]
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	6884      	ldr	r4, [r0, #8]
 800453e:	4605      	mov	r5, r0
 8004540:	460e      	mov	r6, r1
 8004542:	b90b      	cbnz	r3, 8004548 <_puts_r+0x10>
 8004544:	f7ff ffb0 	bl	80044a8 <__sinit>
 8004548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800454a:	07db      	lsls	r3, r3, #31
 800454c:	d405      	bmi.n	800455a <_puts_r+0x22>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	0598      	lsls	r0, r3, #22
 8004552:	d402      	bmi.n	800455a <_puts_r+0x22>
 8004554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004556:	f000 f99e 	bl	8004896 <__retarget_lock_acquire_recursive>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	0719      	lsls	r1, r3, #28
 800455e:	d502      	bpl.n	8004566 <_puts_r+0x2e>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d135      	bne.n	80045d2 <_puts_r+0x9a>
 8004566:	4621      	mov	r1, r4
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f8c5 	bl	80046f8 <__swsetup_r>
 800456e:	b380      	cbz	r0, 80045d2 <_puts_r+0x9a>
 8004570:	f04f 35ff 	mov.w	r5, #4294967295
 8004574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004576:	07da      	lsls	r2, r3, #31
 8004578:	d405      	bmi.n	8004586 <_puts_r+0x4e>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	059b      	lsls	r3, r3, #22
 800457e:	d402      	bmi.n	8004586 <_puts_r+0x4e>
 8004580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004582:	f000 f989 	bl	8004898 <__retarget_lock_release_recursive>
 8004586:	4628      	mov	r0, r5
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	2b00      	cmp	r3, #0
 800458c:	da04      	bge.n	8004598 <_puts_r+0x60>
 800458e:	69a2      	ldr	r2, [r4, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	dc17      	bgt.n	80045c4 <_puts_r+0x8c>
 8004594:	290a      	cmp	r1, #10
 8004596:	d015      	beq.n	80045c4 <_puts_r+0x8c>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	6022      	str	r2, [r4, #0]
 800459e:	7019      	strb	r1, [r3, #0]
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	2900      	cmp	r1, #0
 80045ac:	d1ed      	bne.n	800458a <_puts_r+0x52>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da11      	bge.n	80045d6 <_puts_r+0x9e>
 80045b2:	4622      	mov	r2, r4
 80045b4:	210a      	movs	r1, #10
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f85f 	bl	800467a <__swbuf_r>
 80045bc:	3001      	adds	r0, #1
 80045be:	d0d7      	beq.n	8004570 <_puts_r+0x38>
 80045c0:	250a      	movs	r5, #10
 80045c2:	e7d7      	b.n	8004574 <_puts_r+0x3c>
 80045c4:	4622      	mov	r2, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 f857 	bl	800467a <__swbuf_r>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d1e7      	bne.n	80045a0 <_puts_r+0x68>
 80045d0:	e7ce      	b.n	8004570 <_puts_r+0x38>
 80045d2:	3e01      	subs	r6, #1
 80045d4:	e7e4      	b.n	80045a0 <_puts_r+0x68>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6022      	str	r2, [r4, #0]
 80045dc:	220a      	movs	r2, #10
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e7ee      	b.n	80045c0 <_puts_r+0x88>
	...

080045e4 <puts>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	@ (80045f0 <puts+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f7ff bfa5 	b.w	8004538 <_puts_r>
 80045ee:	bf00      	nop
 80045f0:	2000001c 	.word	0x2000001c

080045f4 <__sread>:
 80045f4:	b510      	push	{r4, lr}
 80045f6:	460c      	mov	r4, r1
 80045f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fc:	f000 f8fc 	bl	80047f8 <_read_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	bfab      	itete	ge
 8004604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004606:	89a3      	ldrhlt	r3, [r4, #12]
 8004608:	181b      	addge	r3, r3, r0
 800460a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800460e:	bfac      	ite	ge
 8004610:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004612:	81a3      	strhlt	r3, [r4, #12]
 8004614:	bd10      	pop	{r4, pc}

08004616 <__swrite>:
 8004616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461a:	461f      	mov	r7, r3
 800461c:	898b      	ldrh	r3, [r1, #12]
 800461e:	05db      	lsls	r3, r3, #23
 8004620:	4605      	mov	r5, r0
 8004622:	460c      	mov	r4, r1
 8004624:	4616      	mov	r6, r2
 8004626:	d505      	bpl.n	8004634 <__swrite+0x1e>
 8004628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462c:	2302      	movs	r3, #2
 800462e:	2200      	movs	r2, #0
 8004630:	f000 f8d0 	bl	80047d4 <_lseek_r>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800463a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	4632      	mov	r2, r6
 8004642:	463b      	mov	r3, r7
 8004644:	4628      	mov	r0, r5
 8004646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800464a:	f000 b8e7 	b.w	800481c <_write_r>

0800464e <__sseek>:
 800464e:	b510      	push	{r4, lr}
 8004650:	460c      	mov	r4, r1
 8004652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004656:	f000 f8bd 	bl	80047d4 <_lseek_r>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	bf15      	itete	ne
 8004660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800466a:	81a3      	strheq	r3, [r4, #12]
 800466c:	bf18      	it	ne
 800466e:	81a3      	strhne	r3, [r4, #12]
 8004670:	bd10      	pop	{r4, pc}

08004672 <__sclose>:
 8004672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004676:	f000 b89d 	b.w	80047b4 <_close_r>

0800467a <__swbuf_r>:
 800467a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467c:	460e      	mov	r6, r1
 800467e:	4614      	mov	r4, r2
 8004680:	4605      	mov	r5, r0
 8004682:	b118      	cbz	r0, 800468c <__swbuf_r+0x12>
 8004684:	6a03      	ldr	r3, [r0, #32]
 8004686:	b90b      	cbnz	r3, 800468c <__swbuf_r+0x12>
 8004688:	f7ff ff0e 	bl	80044a8 <__sinit>
 800468c:	69a3      	ldr	r3, [r4, #24]
 800468e:	60a3      	str	r3, [r4, #8]
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	071a      	lsls	r2, r3, #28
 8004694:	d501      	bpl.n	800469a <__swbuf_r+0x20>
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	b943      	cbnz	r3, 80046ac <__swbuf_r+0x32>
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f82b 	bl	80046f8 <__swsetup_r>
 80046a2:	b118      	cbz	r0, 80046ac <__swbuf_r+0x32>
 80046a4:	f04f 37ff 	mov.w	r7, #4294967295
 80046a8:	4638      	mov	r0, r7
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	6922      	ldr	r2, [r4, #16]
 80046b0:	1a98      	subs	r0, r3, r2
 80046b2:	6963      	ldr	r3, [r4, #20]
 80046b4:	b2f6      	uxtb	r6, r6
 80046b6:	4283      	cmp	r3, r0
 80046b8:	4637      	mov	r7, r6
 80046ba:	dc05      	bgt.n	80046c8 <__swbuf_r+0x4e>
 80046bc:	4621      	mov	r1, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 fd38 	bl	8005134 <_fflush_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d1ed      	bne.n	80046a4 <__swbuf_r+0x2a>
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	6022      	str	r2, [r4, #0]
 80046d4:	701e      	strb	r6, [r3, #0]
 80046d6:	6962      	ldr	r2, [r4, #20]
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	429a      	cmp	r2, r3
 80046dc:	d004      	beq.n	80046e8 <__swbuf_r+0x6e>
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	07db      	lsls	r3, r3, #31
 80046e2:	d5e1      	bpl.n	80046a8 <__swbuf_r+0x2e>
 80046e4:	2e0a      	cmp	r6, #10
 80046e6:	d1df      	bne.n	80046a8 <__swbuf_r+0x2e>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 fd22 	bl	8005134 <_fflush_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d0d9      	beq.n	80046a8 <__swbuf_r+0x2e>
 80046f4:	e7d6      	b.n	80046a4 <__swbuf_r+0x2a>
	...

080046f8 <__swsetup_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4b29      	ldr	r3, [pc, #164]	@ (80047a0 <__swsetup_r+0xa8>)
 80046fc:	4605      	mov	r5, r0
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	460c      	mov	r4, r1
 8004702:	b118      	cbz	r0, 800470c <__swsetup_r+0x14>
 8004704:	6a03      	ldr	r3, [r0, #32]
 8004706:	b90b      	cbnz	r3, 800470c <__swsetup_r+0x14>
 8004708:	f7ff fece 	bl	80044a8 <__sinit>
 800470c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004710:	0719      	lsls	r1, r3, #28
 8004712:	d422      	bmi.n	800475a <__swsetup_r+0x62>
 8004714:	06da      	lsls	r2, r3, #27
 8004716:	d407      	bmi.n	8004728 <__swsetup_r+0x30>
 8004718:	2209      	movs	r2, #9
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	f04f 30ff 	mov.w	r0, #4294967295
 8004726:	e033      	b.n	8004790 <__swsetup_r+0x98>
 8004728:	0758      	lsls	r0, r3, #29
 800472a:	d512      	bpl.n	8004752 <__swsetup_r+0x5a>
 800472c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800472e:	b141      	cbz	r1, 8004742 <__swsetup_r+0x4a>
 8004730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004734:	4299      	cmp	r1, r3
 8004736:	d002      	beq.n	800473e <__swsetup_r+0x46>
 8004738:	4628      	mov	r0, r5
 800473a:	f000 f8af 	bl	800489c <_free_r>
 800473e:	2300      	movs	r3, #0
 8004740:	6363      	str	r3, [r4, #52]	@ 0x34
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	2300      	movs	r3, #0
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f043 0308 	orr.w	r3, r3, #8
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	b94b      	cbnz	r3, 8004772 <__swsetup_r+0x7a>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004768:	d003      	beq.n	8004772 <__swsetup_r+0x7a>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f000 fd2f 	bl	80051d0 <__smakebuf_r>
 8004772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004776:	f013 0201 	ands.w	r2, r3, #1
 800477a:	d00a      	beq.n	8004792 <__swsetup_r+0x9a>
 800477c:	2200      	movs	r2, #0
 800477e:	60a2      	str	r2, [r4, #8]
 8004780:	6962      	ldr	r2, [r4, #20]
 8004782:	4252      	negs	r2, r2
 8004784:	61a2      	str	r2, [r4, #24]
 8004786:	6922      	ldr	r2, [r4, #16]
 8004788:	b942      	cbnz	r2, 800479c <__swsetup_r+0xa4>
 800478a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800478e:	d1c5      	bne.n	800471c <__swsetup_r+0x24>
 8004790:	bd38      	pop	{r3, r4, r5, pc}
 8004792:	0799      	lsls	r1, r3, #30
 8004794:	bf58      	it	pl
 8004796:	6962      	ldrpl	r2, [r4, #20]
 8004798:	60a2      	str	r2, [r4, #8]
 800479a:	e7f4      	b.n	8004786 <__swsetup_r+0x8e>
 800479c:	2000      	movs	r0, #0
 800479e:	e7f7      	b.n	8004790 <__swsetup_r+0x98>
 80047a0:	2000001c 	.word	0x2000001c

080047a4 <memset>:
 80047a4:	4402      	add	r2, r0
 80047a6:	4603      	mov	r3, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d100      	bne.n	80047ae <memset+0xa>
 80047ac:	4770      	bx	lr
 80047ae:	f803 1b01 	strb.w	r1, [r3], #1
 80047b2:	e7f9      	b.n	80047a8 <memset+0x4>

080047b4 <_close_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d06      	ldr	r5, [pc, #24]	@ (80047d0 <_close_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f7fc fb47 	bl	8000e52 <_close>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_close_r+0x1a>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_close_r+0x1a>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20000344 	.word	0x20000344

080047d4 <_lseek_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d07      	ldr	r5, [pc, #28]	@ (80047f4 <_lseek_r+0x20>)
 80047d8:	4604      	mov	r4, r0
 80047da:	4608      	mov	r0, r1
 80047dc:	4611      	mov	r1, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	602a      	str	r2, [r5, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f7fc fb5c 	bl	8000ea0 <_lseek>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_lseek_r+0x1e>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_lseek_r+0x1e>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20000344 	.word	0x20000344

080047f8 <_read_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4d07      	ldr	r5, [pc, #28]	@ (8004818 <_read_r+0x20>)
 80047fc:	4604      	mov	r4, r0
 80047fe:	4608      	mov	r0, r1
 8004800:	4611      	mov	r1, r2
 8004802:	2200      	movs	r2, #0
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f7fc faea 	bl	8000de0 <_read>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_read_r+0x1e>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_read_r+0x1e>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	20000344 	.word	0x20000344

0800481c <_write_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4d07      	ldr	r5, [pc, #28]	@ (800483c <_write_r+0x20>)
 8004820:	4604      	mov	r4, r0
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	2200      	movs	r2, #0
 8004828:	602a      	str	r2, [r5, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7fc faf5 	bl	8000e1a <_write>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_write_r+0x1e>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_write_r+0x1e>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000344 	.word	0x20000344

08004840 <__errno>:
 8004840:	4b01      	ldr	r3, [pc, #4]	@ (8004848 <__errno+0x8>)
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	2000001c 	.word	0x2000001c

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4d0d      	ldr	r5, [pc, #52]	@ (8004884 <__libc_init_array+0x38>)
 8004850:	4c0d      	ldr	r4, [pc, #52]	@ (8004888 <__libc_init_array+0x3c>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	2600      	movs	r6, #0
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	4d0b      	ldr	r5, [pc, #44]	@ (800488c <__libc_init_array+0x40>)
 800485e:	4c0c      	ldr	r4, [pc, #48]	@ (8004890 <__libc_init_array+0x44>)
 8004860:	f000 fd24 	bl	80052ac <_init>
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	2600      	movs	r6, #0
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	08005394 	.word	0x08005394
 8004888:	08005394 	.word	0x08005394
 800488c:	08005394 	.word	0x08005394
 8004890:	08005398 	.word	0x08005398

08004894 <__retarget_lock_init_recursive>:
 8004894:	4770      	bx	lr

08004896 <__retarget_lock_acquire_recursive>:
 8004896:	4770      	bx	lr

08004898 <__retarget_lock_release_recursive>:
 8004898:	4770      	bx	lr
	...

0800489c <_free_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	2900      	cmp	r1, #0
 80048a2:	d041      	beq.n	8004928 <_free_r+0x8c>
 80048a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a8:	1f0c      	subs	r4, r1, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	18e4      	addlt	r4, r4, r3
 80048b0:	f000 f8e0 	bl	8004a74 <__malloc_lock>
 80048b4:	4a1d      	ldr	r2, [pc, #116]	@ (800492c <_free_r+0x90>)
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	b933      	cbnz	r3, 80048c8 <_free_r+0x2c>
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	6014      	str	r4, [r2, #0]
 80048be:	4628      	mov	r0, r5
 80048c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c4:	f000 b8dc 	b.w	8004a80 <__malloc_unlock>
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	d908      	bls.n	80048de <_free_r+0x42>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	1821      	adds	r1, r4, r0
 80048d0:	428b      	cmp	r3, r1
 80048d2:	bf01      	itttt	eq
 80048d4:	6819      	ldreq	r1, [r3, #0]
 80048d6:	685b      	ldreq	r3, [r3, #4]
 80048d8:	1809      	addeq	r1, r1, r0
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	e7ed      	b.n	80048ba <_free_r+0x1e>
 80048de:	461a      	mov	r2, r3
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b10b      	cbz	r3, 80048e8 <_free_r+0x4c>
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d9fa      	bls.n	80048de <_free_r+0x42>
 80048e8:	6811      	ldr	r1, [r2, #0]
 80048ea:	1850      	adds	r0, r2, r1
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d10b      	bne.n	8004908 <_free_r+0x6c>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	4401      	add	r1, r0
 80048f4:	1850      	adds	r0, r2, r1
 80048f6:	4283      	cmp	r3, r0
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	d1e0      	bne.n	80048be <_free_r+0x22>
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	6053      	str	r3, [r2, #4]
 8004902:	4408      	add	r0, r1
 8004904:	6010      	str	r0, [r2, #0]
 8004906:	e7da      	b.n	80048be <_free_r+0x22>
 8004908:	d902      	bls.n	8004910 <_free_r+0x74>
 800490a:	230c      	movs	r3, #12
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	e7d6      	b.n	80048be <_free_r+0x22>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	1821      	adds	r1, r4, r0
 8004914:	428b      	cmp	r3, r1
 8004916:	bf04      	itt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	bf04      	itt	eq
 8004920:	1809      	addeq	r1, r1, r0
 8004922:	6021      	streq	r1, [r4, #0]
 8004924:	6054      	str	r4, [r2, #4]
 8004926:	e7ca      	b.n	80048be <_free_r+0x22>
 8004928:	bd38      	pop	{r3, r4, r5, pc}
 800492a:	bf00      	nop
 800492c:	20000350 	.word	0x20000350

08004930 <sbrk_aligned>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0f      	ldr	r6, [pc, #60]	@ (8004970 <sbrk_aligned+0x40>)
 8004934:	460c      	mov	r4, r1
 8004936:	6831      	ldr	r1, [r6, #0]
 8004938:	4605      	mov	r5, r0
 800493a:	b911      	cbnz	r1, 8004942 <sbrk_aligned+0x12>
 800493c:	f000 fca6 	bl	800528c <_sbrk_r>
 8004940:	6030      	str	r0, [r6, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 fca1 	bl	800528c <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d103      	bne.n	8004956 <sbrk_aligned+0x26>
 800494e:	f04f 34ff 	mov.w	r4, #4294967295
 8004952:	4620      	mov	r0, r4
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	1cc4      	adds	r4, r0, #3
 8004958:	f024 0403 	bic.w	r4, r4, #3
 800495c:	42a0      	cmp	r0, r4
 800495e:	d0f8      	beq.n	8004952 <sbrk_aligned+0x22>
 8004960:	1a21      	subs	r1, r4, r0
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fc92 	bl	800528c <_sbrk_r>
 8004968:	3001      	adds	r0, #1
 800496a:	d1f2      	bne.n	8004952 <sbrk_aligned+0x22>
 800496c:	e7ef      	b.n	800494e <sbrk_aligned+0x1e>
 800496e:	bf00      	nop
 8004970:	2000034c 	.word	0x2000034c

08004974 <_malloc_r>:
 8004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004978:	1ccd      	adds	r5, r1, #3
 800497a:	f025 0503 	bic.w	r5, r5, #3
 800497e:	3508      	adds	r5, #8
 8004980:	2d0c      	cmp	r5, #12
 8004982:	bf38      	it	cc
 8004984:	250c      	movcc	r5, #12
 8004986:	2d00      	cmp	r5, #0
 8004988:	4606      	mov	r6, r0
 800498a:	db01      	blt.n	8004990 <_malloc_r+0x1c>
 800498c:	42a9      	cmp	r1, r5
 800498e:	d904      	bls.n	800499a <_malloc_r+0x26>
 8004990:	230c      	movs	r3, #12
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a70 <_malloc_r+0xfc>
 800499e:	f000 f869 	bl	8004a74 <__malloc_lock>
 80049a2:	f8d8 3000 	ldr.w	r3, [r8]
 80049a6:	461c      	mov	r4, r3
 80049a8:	bb44      	cbnz	r4, 80049fc <_malloc_r+0x88>
 80049aa:	4629      	mov	r1, r5
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbf 	bl	8004930 <sbrk_aligned>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	4604      	mov	r4, r0
 80049b6:	d158      	bne.n	8004a6a <_malloc_r+0xf6>
 80049b8:	f8d8 4000 	ldr.w	r4, [r8]
 80049bc:	4627      	mov	r7, r4
 80049be:	2f00      	cmp	r7, #0
 80049c0:	d143      	bne.n	8004a4a <_malloc_r+0xd6>
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d04b      	beq.n	8004a5e <_malloc_r+0xea>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	4639      	mov	r1, r7
 80049ca:	4630      	mov	r0, r6
 80049cc:	eb04 0903 	add.w	r9, r4, r3
 80049d0:	f000 fc5c 	bl	800528c <_sbrk_r>
 80049d4:	4581      	cmp	r9, r0
 80049d6:	d142      	bne.n	8004a5e <_malloc_r+0xea>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	1a6d      	subs	r5, r5, r1
 80049dc:	4629      	mov	r1, r5
 80049de:	4630      	mov	r0, r6
 80049e0:	f7ff ffa6 	bl	8004930 <sbrk_aligned>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d03a      	beq.n	8004a5e <_malloc_r+0xea>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	442b      	add	r3, r5
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	f8d8 3000 	ldr.w	r3, [r8]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	bb62      	cbnz	r2, 8004a50 <_malloc_r+0xdc>
 80049f6:	f8c8 7000 	str.w	r7, [r8]
 80049fa:	e00f      	b.n	8004a1c <_malloc_r+0xa8>
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	d420      	bmi.n	8004a44 <_malloc_r+0xd0>
 8004a02:	2a0b      	cmp	r2, #11
 8004a04:	d917      	bls.n	8004a36 <_malloc_r+0xc2>
 8004a06:	1961      	adds	r1, r4, r5
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	6025      	str	r5, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	6059      	strne	r1, [r3, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	bf08      	it	eq
 8004a14:	f8c8 1000 	streq.w	r1, [r8]
 8004a18:	5162      	str	r2, [r4, r5]
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 f82f 	bl	8004a80 <__malloc_unlock>
 8004a22:	f104 000b 	add.w	r0, r4, #11
 8004a26:	1d23      	adds	r3, r4, #4
 8004a28:	f020 0007 	bic.w	r0, r0, #7
 8004a2c:	1ac2      	subs	r2, r0, r3
 8004a2e:	bf1c      	itt	ne
 8004a30:	1a1b      	subne	r3, r3, r0
 8004a32:	50a3      	strne	r3, [r4, r2]
 8004a34:	e7af      	b.n	8004996 <_malloc_r+0x22>
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	bf0c      	ite	eq
 8004a3c:	f8c8 2000 	streq.w	r2, [r8]
 8004a40:	605a      	strne	r2, [r3, #4]
 8004a42:	e7eb      	b.n	8004a1c <_malloc_r+0xa8>
 8004a44:	4623      	mov	r3, r4
 8004a46:	6864      	ldr	r4, [r4, #4]
 8004a48:	e7ae      	b.n	80049a8 <_malloc_r+0x34>
 8004a4a:	463c      	mov	r4, r7
 8004a4c:	687f      	ldr	r7, [r7, #4]
 8004a4e:	e7b6      	b.n	80049be <_malloc_r+0x4a>
 8004a50:	461a      	mov	r2, r3
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d1fb      	bne.n	8004a50 <_malloc_r+0xdc>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6053      	str	r3, [r2, #4]
 8004a5c:	e7de      	b.n	8004a1c <_malloc_r+0xa8>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	4630      	mov	r0, r6
 8004a64:	f000 f80c 	bl	8004a80 <__malloc_unlock>
 8004a68:	e794      	b.n	8004994 <_malloc_r+0x20>
 8004a6a:	6005      	str	r5, [r0, #0]
 8004a6c:	e7d6      	b.n	8004a1c <_malloc_r+0xa8>
 8004a6e:	bf00      	nop
 8004a70:	20000350 	.word	0x20000350

08004a74 <__malloc_lock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	@ (8004a7c <__malloc_lock+0x8>)
 8004a76:	f7ff bf0e 	b.w	8004896 <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	20000348 	.word	0x20000348

08004a80 <__malloc_unlock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	@ (8004a88 <__malloc_unlock+0x8>)
 8004a82:	f7ff bf09 	b.w	8004898 <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	20000348 	.word	0x20000348

08004a8c <__sfputc_r>:
 8004a8c:	6893      	ldr	r3, [r2, #8]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	b410      	push	{r4}
 8004a94:	6093      	str	r3, [r2, #8]
 8004a96:	da08      	bge.n	8004aaa <__sfputc_r+0x1e>
 8004a98:	6994      	ldr	r4, [r2, #24]
 8004a9a:	42a3      	cmp	r3, r4
 8004a9c:	db01      	blt.n	8004aa2 <__sfputc_r+0x16>
 8004a9e:	290a      	cmp	r1, #10
 8004aa0:	d103      	bne.n	8004aaa <__sfputc_r+0x1e>
 8004aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aa6:	f7ff bde8 	b.w	800467a <__swbuf_r>
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	1c58      	adds	r0, r3, #1
 8004aae:	6010      	str	r0, [r2, #0]
 8004ab0:	7019      	strb	r1, [r3, #0]
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <__sfputs_r>:
 8004aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abc:	4606      	mov	r6, r0
 8004abe:	460f      	mov	r7, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	18d5      	adds	r5, r2, r3
 8004ac4:	42ac      	cmp	r4, r5
 8004ac6:	d101      	bne.n	8004acc <__sfputs_r+0x12>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	e007      	b.n	8004adc <__sfputs_r+0x22>
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ffda 	bl	8004a8c <__sfputc_r>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d1f3      	bne.n	8004ac4 <__sfputs_r+0xa>
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ae0 <_vfiprintf_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	460d      	mov	r5, r1
 8004ae6:	b09d      	sub	sp, #116	@ 0x74
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4698      	mov	r8, r3
 8004aec:	4606      	mov	r6, r0
 8004aee:	b118      	cbz	r0, 8004af8 <_vfiprintf_r+0x18>
 8004af0:	6a03      	ldr	r3, [r0, #32]
 8004af2:	b90b      	cbnz	r3, 8004af8 <_vfiprintf_r+0x18>
 8004af4:	f7ff fcd8 	bl	80044a8 <__sinit>
 8004af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004afa:	07d9      	lsls	r1, r3, #31
 8004afc:	d405      	bmi.n	8004b0a <_vfiprintf_r+0x2a>
 8004afe:	89ab      	ldrh	r3, [r5, #12]
 8004b00:	059a      	lsls	r2, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <_vfiprintf_r+0x2a>
 8004b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b06:	f7ff fec6 	bl	8004896 <__retarget_lock_acquire_recursive>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	d501      	bpl.n	8004b14 <_vfiprintf_r+0x34>
 8004b10:	692b      	ldr	r3, [r5, #16]
 8004b12:	b99b      	cbnz	r3, 8004b3c <_vfiprintf_r+0x5c>
 8004b14:	4629      	mov	r1, r5
 8004b16:	4630      	mov	r0, r6
 8004b18:	f7ff fdee 	bl	80046f8 <__swsetup_r>
 8004b1c:	b170      	cbz	r0, 8004b3c <_vfiprintf_r+0x5c>
 8004b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b20:	07dc      	lsls	r4, r3, #31
 8004b22:	d504      	bpl.n	8004b2e <_vfiprintf_r+0x4e>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	b01d      	add	sp, #116	@ 0x74
 8004b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	0598      	lsls	r0, r3, #22
 8004b32:	d4f7      	bmi.n	8004b24 <_vfiprintf_r+0x44>
 8004b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b36:	f7ff feaf 	bl	8004898 <__retarget_lock_release_recursive>
 8004b3a:	e7f3      	b.n	8004b24 <_vfiprintf_r+0x44>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b40:	2320      	movs	r3, #32
 8004b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4a:	2330      	movs	r3, #48	@ 0x30
 8004b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004cfc <_vfiprintf_r+0x21c>
 8004b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b54:	f04f 0901 	mov.w	r9, #1
 8004b58:	4623      	mov	r3, r4
 8004b5a:	469a      	mov	sl, r3
 8004b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b60:	b10a      	cbz	r2, 8004b66 <_vfiprintf_r+0x86>
 8004b62:	2a25      	cmp	r2, #37	@ 0x25
 8004b64:	d1f9      	bne.n	8004b5a <_vfiprintf_r+0x7a>
 8004b66:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6a:	d00b      	beq.n	8004b84 <_vfiprintf_r+0xa4>
 8004b6c:	465b      	mov	r3, fp
 8004b6e:	4622      	mov	r2, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ffa1 	bl	8004aba <__sfputs_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f000 80a7 	beq.w	8004ccc <_vfiprintf_r+0x1ec>
 8004b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b80:	445a      	add	r2, fp
 8004b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b84:	f89a 3000 	ldrb.w	r3, [sl]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 809f 	beq.w	8004ccc <_vfiprintf_r+0x1ec>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b98:	f10a 0a01 	add.w	sl, sl, #1
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	9307      	str	r3, [sp, #28]
 8004ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ba6:	4654      	mov	r4, sl
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bae:	4853      	ldr	r0, [pc, #332]	@ (8004cfc <_vfiprintf_r+0x21c>)
 8004bb0:	f7fb fb1e 	bl	80001f0 <memchr>
 8004bb4:	9a04      	ldr	r2, [sp, #16]
 8004bb6:	b9d8      	cbnz	r0, 8004bf0 <_vfiprintf_r+0x110>
 8004bb8:	06d1      	lsls	r1, r2, #27
 8004bba:	bf44      	itt	mi
 8004bbc:	2320      	movmi	r3, #32
 8004bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc2:	0713      	lsls	r3, r2, #28
 8004bc4:	bf44      	itt	mi
 8004bc6:	232b      	movmi	r3, #43	@ 0x2b
 8004bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd2:	d015      	beq.n	8004c00 <_vfiprintf_r+0x120>
 8004bd4:	9a07      	ldr	r2, [sp, #28]
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f04f 0c0a 	mov.w	ip, #10
 8004bde:	4621      	mov	r1, r4
 8004be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be4:	3b30      	subs	r3, #48	@ 0x30
 8004be6:	2b09      	cmp	r3, #9
 8004be8:	d94b      	bls.n	8004c82 <_vfiprintf_r+0x1a2>
 8004bea:	b1b0      	cbz	r0, 8004c1a <_vfiprintf_r+0x13a>
 8004bec:	9207      	str	r2, [sp, #28]
 8004bee:	e014      	b.n	8004c1a <_vfiprintf_r+0x13a>
 8004bf0:	eba0 0308 	sub.w	r3, r0, r8
 8004bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	9304      	str	r3, [sp, #16]
 8004bfc:	46a2      	mov	sl, r4
 8004bfe:	e7d2      	b.n	8004ba6 <_vfiprintf_r+0xc6>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	1d19      	adds	r1, r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	9103      	str	r1, [sp, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfbb      	ittet	lt
 8004c0c:	425b      	neglt	r3, r3
 8004c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c12:	9307      	strge	r3, [sp, #28]
 8004c14:	9307      	strlt	r3, [sp, #28]
 8004c16:	bfb8      	it	lt
 8004c18:	9204      	strlt	r2, [sp, #16]
 8004c1a:	7823      	ldrb	r3, [r4, #0]
 8004c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c1e:	d10a      	bne.n	8004c36 <_vfiprintf_r+0x156>
 8004c20:	7863      	ldrb	r3, [r4, #1]
 8004c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c24:	d132      	bne.n	8004c8c <_vfiprintf_r+0x1ac>
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	9203      	str	r2, [sp, #12]
 8004c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c32:	3402      	adds	r4, #2
 8004c34:	9305      	str	r3, [sp, #20]
 8004c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d0c <_vfiprintf_r+0x22c>
 8004c3a:	7821      	ldrb	r1, [r4, #0]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f7fb fad6 	bl	80001f0 <memchr>
 8004c44:	b138      	cbz	r0, 8004c56 <_vfiprintf_r+0x176>
 8004c46:	9b04      	ldr	r3, [sp, #16]
 8004c48:	eba0 000a 	sub.w	r0, r0, sl
 8004c4c:	2240      	movs	r2, #64	@ 0x40
 8004c4e:	4082      	lsls	r2, r0
 8004c50:	4313      	orrs	r3, r2
 8004c52:	3401      	adds	r4, #1
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5a:	4829      	ldr	r0, [pc, #164]	@ (8004d00 <_vfiprintf_r+0x220>)
 8004c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c60:	2206      	movs	r2, #6
 8004c62:	f7fb fac5 	bl	80001f0 <memchr>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d03f      	beq.n	8004cea <_vfiprintf_r+0x20a>
 8004c6a:	4b26      	ldr	r3, [pc, #152]	@ (8004d04 <_vfiprintf_r+0x224>)
 8004c6c:	bb1b      	cbnz	r3, 8004cb6 <_vfiprintf_r+0x1d6>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	3307      	adds	r3, #7
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	3308      	adds	r3, #8
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c7c:	443b      	add	r3, r7
 8004c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c80:	e76a      	b.n	8004b58 <_vfiprintf_r+0x78>
 8004c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c86:	460c      	mov	r4, r1
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7a8      	b.n	8004bde <_vfiprintf_r+0xfe>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	3401      	adds	r4, #1
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 0c0a 	mov.w	ip, #10
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9e:	3a30      	subs	r2, #48	@ 0x30
 8004ca0:	2a09      	cmp	r2, #9
 8004ca2:	d903      	bls.n	8004cac <_vfiprintf_r+0x1cc>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c6      	beq.n	8004c36 <_vfiprintf_r+0x156>
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	e7c4      	b.n	8004c36 <_vfiprintf_r+0x156>
 8004cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7f0      	b.n	8004c98 <_vfiprintf_r+0x1b8>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <_vfiprintf_r+0x228>)
 8004cbe:	a904      	add	r1, sp, #16
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f3af 8000 	nop.w
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	1c78      	adds	r0, r7, #1
 8004cca:	d1d6      	bne.n	8004c7a <_vfiprintf_r+0x19a>
 8004ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cce:	07d9      	lsls	r1, r3, #31
 8004cd0:	d405      	bmi.n	8004cde <_vfiprintf_r+0x1fe>
 8004cd2:	89ab      	ldrh	r3, [r5, #12]
 8004cd4:	059a      	lsls	r2, r3, #22
 8004cd6:	d402      	bmi.n	8004cde <_vfiprintf_r+0x1fe>
 8004cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cda:	f7ff fddd 	bl	8004898 <__retarget_lock_release_recursive>
 8004cde:	89ab      	ldrh	r3, [r5, #12]
 8004ce0:	065b      	lsls	r3, r3, #25
 8004ce2:	f53f af1f 	bmi.w	8004b24 <_vfiprintf_r+0x44>
 8004ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ce8:	e71e      	b.n	8004b28 <_vfiprintf_r+0x48>
 8004cea:	ab03      	add	r3, sp, #12
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	462a      	mov	r2, r5
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <_vfiprintf_r+0x228>)
 8004cf2:	a904      	add	r1, sp, #16
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f000 f879 	bl	8004dec <_printf_i>
 8004cfa:	e7e4      	b.n	8004cc6 <_vfiprintf_r+0x1e6>
 8004cfc:	08005358 	.word	0x08005358
 8004d00:	08005362 	.word	0x08005362
 8004d04:	00000000 	.word	0x00000000
 8004d08:	08004abb 	.word	0x08004abb
 8004d0c:	0800535e 	.word	0x0800535e

08004d10 <_printf_common>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	4616      	mov	r6, r2
 8004d16:	4698      	mov	r8, r3
 8004d18:	688a      	ldr	r2, [r1, #8]
 8004d1a:	690b      	ldr	r3, [r1, #16]
 8004d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bfb8      	it	lt
 8004d24:	4613      	movlt	r3, r2
 8004d26:	6033      	str	r3, [r6, #0]
 8004d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	b10a      	cbz	r2, 8004d36 <_printf_common+0x26>
 8004d32:	3301      	adds	r3, #1
 8004d34:	6033      	str	r3, [r6, #0]
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	0699      	lsls	r1, r3, #26
 8004d3a:	bf42      	ittt	mi
 8004d3c:	6833      	ldrmi	r3, [r6, #0]
 8004d3e:	3302      	addmi	r3, #2
 8004d40:	6033      	strmi	r3, [r6, #0]
 8004d42:	6825      	ldr	r5, [r4, #0]
 8004d44:	f015 0506 	ands.w	r5, r5, #6
 8004d48:	d106      	bne.n	8004d58 <_printf_common+0x48>
 8004d4a:	f104 0a19 	add.w	sl, r4, #25
 8004d4e:	68e3      	ldr	r3, [r4, #12]
 8004d50:	6832      	ldr	r2, [r6, #0]
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	42ab      	cmp	r3, r5
 8004d56:	dc26      	bgt.n	8004da6 <_printf_common+0x96>
 8004d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	3b00      	subs	r3, #0
 8004d60:	bf18      	it	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	0692      	lsls	r2, r2, #26
 8004d66:	d42b      	bmi.n	8004dc0 <_printf_common+0xb0>
 8004d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c8      	blx	r9
 8004d72:	3001      	adds	r0, #1
 8004d74:	d01e      	beq.n	8004db4 <_printf_common+0xa4>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	f003 0306 	and.w	r3, r3, #6
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	bf02      	ittt	eq
 8004d82:	68e5      	ldreq	r5, [r4, #12]
 8004d84:	6833      	ldreq	r3, [r6, #0]
 8004d86:	1aed      	subeq	r5, r5, r3
 8004d88:	68a3      	ldr	r3, [r4, #8]
 8004d8a:	bf0c      	ite	eq
 8004d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d90:	2500      	movne	r5, #0
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bfc4      	itt	gt
 8004d96:	1a9b      	subgt	r3, r3, r2
 8004d98:	18ed      	addgt	r5, r5, r3
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	341a      	adds	r4, #26
 8004d9e:	42b5      	cmp	r5, r6
 8004da0:	d11a      	bne.n	8004dd8 <_printf_common+0xc8>
 8004da2:	2000      	movs	r0, #0
 8004da4:	e008      	b.n	8004db8 <_printf_common+0xa8>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4652      	mov	r2, sl
 8004daa:	4641      	mov	r1, r8
 8004dac:	4638      	mov	r0, r7
 8004dae:	47c8      	blx	r9
 8004db0:	3001      	adds	r0, #1
 8004db2:	d103      	bne.n	8004dbc <_printf_common+0xac>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	e7c6      	b.n	8004d4e <_printf_common+0x3e>
 8004dc0:	18e1      	adds	r1, r4, r3
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	2030      	movs	r0, #48	@ 0x30
 8004dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dca:	4422      	add	r2, r4
 8004dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	e7c7      	b.n	8004d68 <_printf_common+0x58>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4641      	mov	r1, r8
 8004dde:	4638      	mov	r0, r7
 8004de0:	47c8      	blx	r9
 8004de2:	3001      	adds	r0, #1
 8004de4:	d0e6      	beq.n	8004db4 <_printf_common+0xa4>
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7d9      	b.n	8004d9e <_printf_common+0x8e>
	...

08004dec <_printf_i>:
 8004dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	7e0f      	ldrb	r7, [r1, #24]
 8004df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004df4:	2f78      	cmp	r7, #120	@ 0x78
 8004df6:	4691      	mov	r9, r2
 8004df8:	4680      	mov	r8, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	469a      	mov	sl, r3
 8004dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e02:	d807      	bhi.n	8004e14 <_printf_i+0x28>
 8004e04:	2f62      	cmp	r7, #98	@ 0x62
 8004e06:	d80a      	bhi.n	8004e1e <_printf_i+0x32>
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	f000 80d2 	beq.w	8004fb2 <_printf_i+0x1c6>
 8004e0e:	2f58      	cmp	r7, #88	@ 0x58
 8004e10:	f000 80b9 	beq.w	8004f86 <_printf_i+0x19a>
 8004e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e1c:	e03a      	b.n	8004e94 <_printf_i+0xa8>
 8004e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e22:	2b15      	cmp	r3, #21
 8004e24:	d8f6      	bhi.n	8004e14 <_printf_i+0x28>
 8004e26:	a101      	add	r1, pc, #4	@ (adr r1, 8004e2c <_printf_i+0x40>)
 8004e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e15 	.word	0x08004e15
 8004e38:	08004e15 	.word	0x08004e15
 8004e3c:	08004e15 	.word	0x08004e15
 8004e40:	08004e15 	.word	0x08004e15
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e15 	.word	0x08004e15
 8004e4c:	08004e15 	.word	0x08004e15
 8004e50:	08004e15 	.word	0x08004e15
 8004e54:	08004e15 	.word	0x08004e15
 8004e58:	08004f99 	.word	0x08004f99
 8004e5c:	08004ec3 	.word	0x08004ec3
 8004e60:	08004f53 	.word	0x08004f53
 8004e64:	08004e15 	.word	0x08004e15
 8004e68:	08004e15 	.word	0x08004e15
 8004e6c:	08004fbb 	.word	0x08004fbb
 8004e70:	08004e15 	.word	0x08004e15
 8004e74:	08004ec3 	.word	0x08004ec3
 8004e78:	08004e15 	.word	0x08004e15
 8004e7c:	08004e15 	.word	0x08004e15
 8004e80:	08004f5b 	.word	0x08004f5b
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6032      	str	r2, [r6, #0]
 8004e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e94:	2301      	movs	r3, #1
 8004e96:	e09d      	b.n	8004fd4 <_printf_i+0x1e8>
 8004e98:	6833      	ldr	r3, [r6, #0]
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	1d19      	adds	r1, r3, #4
 8004e9e:	6031      	str	r1, [r6, #0]
 8004ea0:	0606      	lsls	r6, r0, #24
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0xbc>
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	e003      	b.n	8004eb0 <_printf_i+0xc4>
 8004ea8:	0645      	lsls	r5, r0, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0xb8>
 8004eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	da03      	bge.n	8004ebc <_printf_i+0xd0>
 8004eb4:	232d      	movs	r3, #45	@ 0x2d
 8004eb6:	426d      	negs	r5, r5
 8004eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ebc:	4859      	ldr	r0, [pc, #356]	@ (8005024 <_printf_i+0x238>)
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	e011      	b.n	8004ee6 <_printf_i+0xfa>
 8004ec2:	6821      	ldr	r1, [r4, #0]
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	0608      	lsls	r0, r1, #24
 8004ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ecc:	d402      	bmi.n	8004ed4 <_printf_i+0xe8>
 8004ece:	0649      	lsls	r1, r1, #25
 8004ed0:	bf48      	it	mi
 8004ed2:	b2ad      	uxthmi	r5, r5
 8004ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ed6:	4853      	ldr	r0, [pc, #332]	@ (8005024 <_printf_i+0x238>)
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	bf14      	ite	ne
 8004edc:	230a      	movne	r3, #10
 8004ede:	2308      	moveq	r3, #8
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ee6:	6866      	ldr	r6, [r4, #4]
 8004ee8:	60a6      	str	r6, [r4, #8]
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	bfa2      	ittt	ge
 8004eee:	6821      	ldrge	r1, [r4, #0]
 8004ef0:	f021 0104 	bicge.w	r1, r1, #4
 8004ef4:	6021      	strge	r1, [r4, #0]
 8004ef6:	b90d      	cbnz	r5, 8004efc <_printf_i+0x110>
 8004ef8:	2e00      	cmp	r6, #0
 8004efa:	d04b      	beq.n	8004f94 <_printf_i+0x1a8>
 8004efc:	4616      	mov	r6, r2
 8004efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f02:	fb03 5711 	mls	r7, r3, r1, r5
 8004f06:	5dc7      	ldrb	r7, [r0, r7]
 8004f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f0c:	462f      	mov	r7, r5
 8004f0e:	42bb      	cmp	r3, r7
 8004f10:	460d      	mov	r5, r1
 8004f12:	d9f4      	bls.n	8004efe <_printf_i+0x112>
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d10b      	bne.n	8004f30 <_printf_i+0x144>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	07df      	lsls	r7, r3, #31
 8004f1c:	d508      	bpl.n	8004f30 <_printf_i+0x144>
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	6861      	ldr	r1, [r4, #4]
 8004f22:	4299      	cmp	r1, r3
 8004f24:	bfde      	ittt	le
 8004f26:	2330      	movle	r3, #48	@ 0x30
 8004f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f30:	1b92      	subs	r2, r2, r6
 8004f32:	6122      	str	r2, [r4, #16]
 8004f34:	f8cd a000 	str.w	sl, [sp]
 8004f38:	464b      	mov	r3, r9
 8004f3a:	aa03      	add	r2, sp, #12
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4640      	mov	r0, r8
 8004f40:	f7ff fee6 	bl	8004d10 <_printf_common>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d14a      	bne.n	8004fde <_printf_i+0x1f2>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	b004      	add	sp, #16
 8004f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	f043 0320 	orr.w	r3, r3, #32
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	4833      	ldr	r0, [pc, #204]	@ (8005028 <_printf_i+0x23c>)
 8004f5c:	2778      	movs	r7, #120	@ 0x78
 8004f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	6831      	ldr	r1, [r6, #0]
 8004f66:	061f      	lsls	r7, r3, #24
 8004f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f6c:	d402      	bmi.n	8004f74 <_printf_i+0x188>
 8004f6e:	065f      	lsls	r7, r3, #25
 8004f70:	bf48      	it	mi
 8004f72:	b2ad      	uxthmi	r5, r5
 8004f74:	6031      	str	r1, [r6, #0]
 8004f76:	07d9      	lsls	r1, r3, #31
 8004f78:	bf44      	itt	mi
 8004f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f7e:	6023      	strmi	r3, [r4, #0]
 8004f80:	b11d      	cbz	r5, 8004f8a <_printf_i+0x19e>
 8004f82:	2310      	movs	r3, #16
 8004f84:	e7ac      	b.n	8004ee0 <_printf_i+0xf4>
 8004f86:	4827      	ldr	r0, [pc, #156]	@ (8005024 <_printf_i+0x238>)
 8004f88:	e7e9      	b.n	8004f5e <_printf_i+0x172>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f023 0320 	bic.w	r3, r3, #32
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	e7f6      	b.n	8004f82 <_printf_i+0x196>
 8004f94:	4616      	mov	r6, r2
 8004f96:	e7bd      	b.n	8004f14 <_printf_i+0x128>
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	6961      	ldr	r1, [r4, #20]
 8004f9e:	1d18      	adds	r0, r3, #4
 8004fa0:	6030      	str	r0, [r6, #0]
 8004fa2:	062e      	lsls	r6, r5, #24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0x1c0>
 8004fa8:	6019      	str	r1, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <_printf_i+0x1c6>
 8004fac:	0668      	lsls	r0, r5, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0x1bc>
 8004fb0:	8019      	strh	r1, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	e7bc      	b.n	8004f34 <_printf_i+0x148>
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	6032      	str	r2, [r6, #0]
 8004fc0:	681e      	ldr	r6, [r3, #0]
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7fb f912 	bl	80001f0 <memchr>
 8004fcc:	b108      	cbz	r0, 8004fd2 <_printf_i+0x1e6>
 8004fce:	1b80      	subs	r0, r0, r6
 8004fd0:	6060      	str	r0, [r4, #4]
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fdc:	e7aa      	b.n	8004f34 <_printf_i+0x148>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	47d0      	blx	sl
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0ad      	beq.n	8004f48 <_printf_i+0x15c>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	079b      	lsls	r3, r3, #30
 8004ff0:	d413      	bmi.n	800501a <_printf_i+0x22e>
 8004ff2:	68e0      	ldr	r0, [r4, #12]
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	bfb8      	it	lt
 8004ffa:	4618      	movlt	r0, r3
 8004ffc:	e7a6      	b.n	8004f4c <_printf_i+0x160>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d09d      	beq.n	8004f48 <_printf_i+0x15c>
 800500c:	3501      	adds	r5, #1
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	9903      	ldr	r1, [sp, #12]
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	42ab      	cmp	r3, r5
 8005016:	dcf2      	bgt.n	8004ffe <_printf_i+0x212>
 8005018:	e7eb      	b.n	8004ff2 <_printf_i+0x206>
 800501a:	2500      	movs	r5, #0
 800501c:	f104 0619 	add.w	r6, r4, #25
 8005020:	e7f5      	b.n	800500e <_printf_i+0x222>
 8005022:	bf00      	nop
 8005024:	08005369 	.word	0x08005369
 8005028:	0800537a 	.word	0x0800537a

0800502c <__sflush_r>:
 800502c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	0716      	lsls	r6, r2, #28
 8005036:	4605      	mov	r5, r0
 8005038:	460c      	mov	r4, r1
 800503a:	d454      	bmi.n	80050e6 <__sflush_r+0xba>
 800503c:	684b      	ldr	r3, [r1, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	dc02      	bgt.n	8005048 <__sflush_r+0x1c>
 8005042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	dd48      	ble.n	80050da <__sflush_r+0xae>
 8005048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800504a:	2e00      	cmp	r6, #0
 800504c:	d045      	beq.n	80050da <__sflush_r+0xae>
 800504e:	2300      	movs	r3, #0
 8005050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005054:	682f      	ldr	r7, [r5, #0]
 8005056:	6a21      	ldr	r1, [r4, #32]
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	d030      	beq.n	80050be <__sflush_r+0x92>
 800505c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	0759      	lsls	r1, r3, #29
 8005062:	d505      	bpl.n	8005070 <__sflush_r+0x44>
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800506a:	b10b      	cbz	r3, 8005070 <__sflush_r+0x44>
 800506c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005074:	6a21      	ldr	r1, [r4, #32]
 8005076:	4628      	mov	r0, r5
 8005078:	47b0      	blx	r6
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	d106      	bne.n	800508e <__sflush_r+0x62>
 8005080:	6829      	ldr	r1, [r5, #0]
 8005082:	291d      	cmp	r1, #29
 8005084:	d82b      	bhi.n	80050de <__sflush_r+0xb2>
 8005086:	4a2a      	ldr	r2, [pc, #168]	@ (8005130 <__sflush_r+0x104>)
 8005088:	410a      	asrs	r2, r1
 800508a:	07d6      	lsls	r6, r2, #31
 800508c:	d427      	bmi.n	80050de <__sflush_r+0xb2>
 800508e:	2200      	movs	r2, #0
 8005090:	6062      	str	r2, [r4, #4]
 8005092:	04d9      	lsls	r1, r3, #19
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	d504      	bpl.n	80050a4 <__sflush_r+0x78>
 800509a:	1c42      	adds	r2, r0, #1
 800509c:	d101      	bne.n	80050a2 <__sflush_r+0x76>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b903      	cbnz	r3, 80050a4 <__sflush_r+0x78>
 80050a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80050a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050a6:	602f      	str	r7, [r5, #0]
 80050a8:	b1b9      	cbz	r1, 80050da <__sflush_r+0xae>
 80050aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d002      	beq.n	80050b8 <__sflush_r+0x8c>
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7ff fbf2 	bl	800489c <_free_r>
 80050b8:	2300      	movs	r3, #0
 80050ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80050bc:	e00d      	b.n	80050da <__sflush_r+0xae>
 80050be:	2301      	movs	r3, #1
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b0      	blx	r6
 80050c4:	4602      	mov	r2, r0
 80050c6:	1c50      	adds	r0, r2, #1
 80050c8:	d1c9      	bne.n	800505e <__sflush_r+0x32>
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0c6      	beq.n	800505e <__sflush_r+0x32>
 80050d0:	2b1d      	cmp	r3, #29
 80050d2:	d001      	beq.n	80050d8 <__sflush_r+0xac>
 80050d4:	2b16      	cmp	r3, #22
 80050d6:	d11e      	bne.n	8005116 <__sflush_r+0xea>
 80050d8:	602f      	str	r7, [r5, #0]
 80050da:	2000      	movs	r0, #0
 80050dc:	e022      	b.n	8005124 <__sflush_r+0xf8>
 80050de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e2:	b21b      	sxth	r3, r3
 80050e4:	e01b      	b.n	800511e <__sflush_r+0xf2>
 80050e6:	690f      	ldr	r7, [r1, #16]
 80050e8:	2f00      	cmp	r7, #0
 80050ea:	d0f6      	beq.n	80050da <__sflush_r+0xae>
 80050ec:	0793      	lsls	r3, r2, #30
 80050ee:	680e      	ldr	r6, [r1, #0]
 80050f0:	bf08      	it	eq
 80050f2:	694b      	ldreq	r3, [r1, #20]
 80050f4:	600f      	str	r7, [r1, #0]
 80050f6:	bf18      	it	ne
 80050f8:	2300      	movne	r3, #0
 80050fa:	eba6 0807 	sub.w	r8, r6, r7
 80050fe:	608b      	str	r3, [r1, #8]
 8005100:	f1b8 0f00 	cmp.w	r8, #0
 8005104:	dde9      	ble.n	80050da <__sflush_r+0xae>
 8005106:	6a21      	ldr	r1, [r4, #32]
 8005108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800510a:	4643      	mov	r3, r8
 800510c:	463a      	mov	r2, r7
 800510e:	4628      	mov	r0, r5
 8005110:	47b0      	blx	r6
 8005112:	2800      	cmp	r0, #0
 8005114:	dc08      	bgt.n	8005128 <__sflush_r+0xfc>
 8005116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	4407      	add	r7, r0
 800512a:	eba8 0800 	sub.w	r8, r8, r0
 800512e:	e7e7      	b.n	8005100 <__sflush_r+0xd4>
 8005130:	dfbffffe 	.word	0xdfbffffe

08005134 <_fflush_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	4605      	mov	r5, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b913      	cbnz	r3, 8005144 <_fflush_r+0x10>
 800513e:	2500      	movs	r5, #0
 8005140:	4628      	mov	r0, r5
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	b118      	cbz	r0, 800514e <_fflush_r+0x1a>
 8005146:	6a03      	ldr	r3, [r0, #32]
 8005148:	b90b      	cbnz	r3, 800514e <_fflush_r+0x1a>
 800514a:	f7ff f9ad 	bl	80044a8 <__sinit>
 800514e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f3      	beq.n	800513e <_fflush_r+0xa>
 8005156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005158:	07d0      	lsls	r0, r2, #31
 800515a:	d404      	bmi.n	8005166 <_fflush_r+0x32>
 800515c:	0599      	lsls	r1, r3, #22
 800515e:	d402      	bmi.n	8005166 <_fflush_r+0x32>
 8005160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005162:	f7ff fb98 	bl	8004896 <__retarget_lock_acquire_recursive>
 8005166:	4628      	mov	r0, r5
 8005168:	4621      	mov	r1, r4
 800516a:	f7ff ff5f 	bl	800502c <__sflush_r>
 800516e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005170:	07da      	lsls	r2, r3, #31
 8005172:	4605      	mov	r5, r0
 8005174:	d4e4      	bmi.n	8005140 <_fflush_r+0xc>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	059b      	lsls	r3, r3, #22
 800517a:	d4e1      	bmi.n	8005140 <_fflush_r+0xc>
 800517c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800517e:	f7ff fb8b 	bl	8004898 <__retarget_lock_release_recursive>
 8005182:	e7dd      	b.n	8005140 <_fflush_r+0xc>

08005184 <__swhatbuf_r>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	460c      	mov	r4, r1
 8005188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518c:	2900      	cmp	r1, #0
 800518e:	b096      	sub	sp, #88	@ 0x58
 8005190:	4615      	mov	r5, r2
 8005192:	461e      	mov	r6, r3
 8005194:	da0d      	bge.n	80051b2 <__swhatbuf_r+0x2e>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	bf14      	ite	ne
 80051a2:	2340      	movne	r3, #64	@ 0x40
 80051a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051a8:	2000      	movs	r0, #0
 80051aa:	6031      	str	r1, [r6, #0]
 80051ac:	602b      	str	r3, [r5, #0]
 80051ae:	b016      	add	sp, #88	@ 0x58
 80051b0:	bd70      	pop	{r4, r5, r6, pc}
 80051b2:	466a      	mov	r2, sp
 80051b4:	f000 f848 	bl	8005248 <_fstat_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	dbec      	blt.n	8005196 <__swhatbuf_r+0x12>
 80051bc:	9901      	ldr	r1, [sp, #4]
 80051be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051c6:	4259      	negs	r1, r3
 80051c8:	4159      	adcs	r1, r3
 80051ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ce:	e7eb      	b.n	80051a8 <__swhatbuf_r+0x24>

080051d0 <__smakebuf_r>:
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051d4:	079d      	lsls	r5, r3, #30
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	d507      	bpl.n	80051ec <__smakebuf_r+0x1c>
 80051dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	2301      	movs	r3, #1
 80051e6:	6163      	str	r3, [r4, #20]
 80051e8:	b003      	add	sp, #12
 80051ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ec:	ab01      	add	r3, sp, #4
 80051ee:	466a      	mov	r2, sp
 80051f0:	f7ff ffc8 	bl	8005184 <__swhatbuf_r>
 80051f4:	9f00      	ldr	r7, [sp, #0]
 80051f6:	4605      	mov	r5, r0
 80051f8:	4639      	mov	r1, r7
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7ff fbba 	bl	8004974 <_malloc_r>
 8005200:	b948      	cbnz	r0, 8005216 <__smakebuf_r+0x46>
 8005202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005206:	059a      	lsls	r2, r3, #22
 8005208:	d4ee      	bmi.n	80051e8 <__smakebuf_r+0x18>
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	e7e2      	b.n	80051dc <__smakebuf_r+0xc>
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	6020      	str	r0, [r4, #0]
 800521a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	9b01      	ldr	r3, [sp, #4]
 8005222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005226:	b15b      	cbz	r3, 8005240 <__smakebuf_r+0x70>
 8005228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f81d 	bl	800526c <_isatty_r>
 8005232:	b128      	cbz	r0, 8005240 <__smakebuf_r+0x70>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	431d      	orrs	r5, r3
 8005244:	81a5      	strh	r5, [r4, #12]
 8005246:	e7cf      	b.n	80051e8 <__smakebuf_r+0x18>

08005248 <_fstat_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	@ (8005268 <_fstat_r+0x20>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	f7fb fe08 	bl	8000e6a <_fstat>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d102      	bne.n	8005264 <_fstat_r+0x1c>
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	b103      	cbz	r3, 8005264 <_fstat_r+0x1c>
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	20000344 	.word	0x20000344

0800526c <_isatty_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	@ (8005288 <_isatty_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb fe07 	bl	8000e8a <_isatty>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_isatty_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_isatty_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	20000344 	.word	0x20000344

0800528c <_sbrk_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	@ (80052a8 <_sbrk_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fb fe10 	bl	8000ebc <_sbrk>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_sbrk_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_sbrk_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	20000344 	.word	0x20000344

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
